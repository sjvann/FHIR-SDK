// <auto-generated>
#nullable enable
using System.Collections.Generic;
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
namespace FhirSDK.Resources.R5
{
    public static class ListFluentExtensions
    {
        public static List WithCode(this List r, CodeableConcept value) { r.Code = value; return r; }
        public static List AddContained(this List r, Resource item) { r.Contained ??= new List<Resource>(); r.Contained!.Add(item); return r; }
        public static List WithDate(this List r, FhirDateTime value) { r.Date = value; return r; }
        public static List WithEmptyReason(this List r, CodeableConcept value) { r.EmptyReason = value; return r; }
        public static List WithEncounter(this List r, ReferenceType value) { r.Encounter = value; return r; }
        public static List AddEntry(this List r, BackboneElement item) { r.Entry ??= new List<BackboneElement>(); r.Entry!.Add(item); return r; }
        public static List AddIdentifier(this List r, Identifier item) { r.Identifier ??= new List<Identifier>(); r.Identifier!.Add(item); return r; }
        public static List WithMode(this List r, FhirCode value) { r.Mode = value; return r; }
        public static List AddNote(this List r, Annotation item) { r.Note ??= new List<Annotation>(); r.Note!.Add(item); return r; }
        public static List WithOrderedBy(this List r, CodeableConcept value) { r.OrderedBy = value; return r; }
        public static List WithSource(this List r, ReferenceType value) { r.Source = value; return r; }
        public static List WithStatus(this List r, FhirCode value) { r.Status = value; return r; }
        public static List AddSubject(this List r, ReferenceType item) { r.Subject ??= new List<ReferenceType>(); r.Subject!.Add(item); return r; }
        public static List WithText(this List r, Narrative value) { r.Text = value; return r; }
        public static List WithTitle(this List r, FhirString value) { r.Title = value; return r; }
    }
}
