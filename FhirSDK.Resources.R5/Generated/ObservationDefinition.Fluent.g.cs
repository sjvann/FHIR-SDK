// <auto-generated>
#nullable enable
using System.Collections.Generic;
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
namespace FhirSDK.Resources.R5
{
    public static class ObservationDefinitionFluentExtensions
    {
        public static ObservationDefinition WithApprovalDate(this ObservationDefinition r, FhirDate value) { r.ApprovalDate = value; return r; }
        public static ObservationDefinition WithBodySite(this ObservationDefinition r, CodeableConcept value) { r.BodySite = value; return r; }
        public static ObservationDefinition AddCategory(this ObservationDefinition r, CodeableConcept item) { r.Category ??= new List<CodeableConcept>(); r.Category!.Add(item); return r; }
        public static ObservationDefinition WithCode(this ObservationDefinition r, CodeableConcept value) { r.Code = value; return r; }
        public static ObservationDefinition AddComponent(this ObservationDefinition r, BackboneElement item) { r.Component ??= new List<BackboneElement>(); r.Component!.Add(item); return r; }
        public static ObservationDefinition AddContact(this ObservationDefinition r, ContactDetail item) { r.Contact ??= new List<ContactDetail>(); r.Contact!.Add(item); return r; }
        public static ObservationDefinition AddContained(this ObservationDefinition r, Resource item) { r.Contained ??= new List<Resource>(); r.Contained!.Add(item); return r; }
        public static ObservationDefinition WithCopyright(this ObservationDefinition r, FhirMarkdown value) { r.Copyright = value; return r; }
        public static ObservationDefinition WithCopyrightLabel(this ObservationDefinition r, FhirString value) { r.CopyrightLabel = value; return r; }
        public static ObservationDefinition WithDate(this ObservationDefinition r, FhirDateTime value) { r.Date = value; return r; }
        public static ObservationDefinition AddDerivedFromCanonical(this ObservationDefinition r, FhirCanonical item) { r.DerivedFromCanonical ??= new List<FhirCanonical>(); r.DerivedFromCanonical!.Add(item); return r; }
        public static ObservationDefinition AddDerivedFromUri(this ObservationDefinition r, FhirUri item) { r.DerivedFromUri ??= new List<FhirUri>(); r.DerivedFromUri!.Add(item); return r; }
        public static ObservationDefinition WithDescription(this ObservationDefinition r, FhirMarkdown value) { r.Description = value; return r; }
        public static ObservationDefinition AddDevice(this ObservationDefinition r, ReferenceType item) { r.Device ??= new List<ReferenceType>(); r.Device!.Add(item); return r; }
        public static ObservationDefinition WithEffectivePeriod(this ObservationDefinition r, Period value) { r.EffectivePeriod = value; return r; }
        public static ObservationDefinition WithExperimental(this ObservationDefinition r, FhirBoolean value) { r.Experimental = value; return r; }
        public static ObservationDefinition AddHasMember(this ObservationDefinition r, ReferenceType item) { r.HasMember ??= new List<ReferenceType>(); r.HasMember!.Add(item); return r; }
        public static ObservationDefinition WithIdentifier(this ObservationDefinition r, Identifier value) { r.Identifier = value; return r; }
        public static ObservationDefinition AddJurisdiction(this ObservationDefinition r, CodeableConcept item) { r.Jurisdiction ??= new List<CodeableConcept>(); r.Jurisdiction!.Add(item); return r; }
        public static ObservationDefinition WithLastReviewDate(this ObservationDefinition r, FhirDate value) { r.LastReviewDate = value; return r; }
        public static ObservationDefinition WithMethod(this ObservationDefinition r, CodeableConcept value) { r.Method = value; return r; }
        public static ObservationDefinition WithMultipleResultsAllowed(this ObservationDefinition r, FhirBoolean value) { r.MultipleResultsAllowed = value; return r; }
        public static ObservationDefinition WithName(this ObservationDefinition r, FhirString value) { r.Name = value; return r; }
        public static ObservationDefinition WithPerformerType(this ObservationDefinition r, CodeableConcept value) { r.PerformerType = value; return r; }
        public static ObservationDefinition AddPermittedDataType(this ObservationDefinition r, FhirCode item) { r.PermittedDataType ??= new List<FhirCode>(); r.PermittedDataType!.Add(item); return r; }
        public static ObservationDefinition AddPermittedUnit(this ObservationDefinition r, Coding item) { r.PermittedUnit ??= new List<Coding>(); r.PermittedUnit!.Add(item); return r; }
        public static ObservationDefinition WithPreferredReportName(this ObservationDefinition r, FhirString value) { r.PreferredReportName = value; return r; }
        public static ObservationDefinition WithPublisher(this ObservationDefinition r, FhirString value) { r.Publisher = value; return r; }
        public static ObservationDefinition WithPurpose(this ObservationDefinition r, FhirMarkdown value) { r.Purpose = value; return r; }
        public static ObservationDefinition AddQualifiedValue(this ObservationDefinition r, BackboneElement item) { r.QualifiedValue ??= new List<BackboneElement>(); r.QualifiedValue!.Add(item); return r; }
        public static ObservationDefinition AddSpecimen(this ObservationDefinition r, ReferenceType item) { r.Specimen ??= new List<ReferenceType>(); r.Specimen!.Add(item); return r; }
        public static ObservationDefinition WithStatus(this ObservationDefinition r, FhirCode value) { r.Status = value; return r; }
        public static ObservationDefinition AddSubject(this ObservationDefinition r, CodeableConcept item) { r.Subject ??= new List<CodeableConcept>(); r.Subject!.Add(item); return r; }
        public static ObservationDefinition WithText(this ObservationDefinition r, Narrative value) { r.Text = value; return r; }
        public static ObservationDefinition WithTitle(this ObservationDefinition r, FhirString value) { r.Title = value; return r; }
        public static ObservationDefinition WithUrl(this ObservationDefinition r, FhirUri value) { r.Url = value; return r; }
        public static ObservationDefinition AddUseContext(this ObservationDefinition r, UsageContext item) { r.UseContext ??= new List<UsageContext>(); r.UseContext!.Add(item); return r; }
        public static ObservationDefinition WithVersion(this ObservationDefinition r, FhirString value) { r.Version = value; return r; }
        public static ObservationDefinition WithVersionAlgorithmString(this ObservationDefinition r, FhirString value) { r.VersionAlgorithmString = value; return r; }
        public static ObservationDefinition WithVersionAlgorithmCoding(this ObservationDefinition r, Coding value) { r.VersionAlgorithmCoding = value; return r; }
    }
}
