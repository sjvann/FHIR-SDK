// <auto-generated>
#nullable enable
using System.Collections.Generic;
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
namespace FhirSDK.Resources.R5
{
    public static class ExplanationOfBenefitFluentExtensions
    {
        public static ExplanationOfBenefit WithAccident(this ExplanationOfBenefit r, BackboneElement value) { r.Accident = value; return r; }
        public static ExplanationOfBenefit AddAddItem(this ExplanationOfBenefit r, BackboneElement item) { r.AddItem ??= new List<BackboneElement>(); r.AddItem!.Add(item); return r; }
        public static ExplanationOfBenefit AddAdjudication(this ExplanationOfBenefit r, FhirString item) { r.Adjudication ??= new List<FhirString>(); r.Adjudication!.Add(item); return r; }
        public static ExplanationOfBenefit AddBenefitBalance(this ExplanationOfBenefit r, BackboneElement item) { r.BenefitBalance ??= new List<BackboneElement>(); r.BenefitBalance!.Add(item); return r; }
        public static ExplanationOfBenefit WithBenefitPeriod(this ExplanationOfBenefit r, Period value) { r.BenefitPeriod = value; return r; }
        public static ExplanationOfBenefit WithBillablePeriod(this ExplanationOfBenefit r, Period value) { r.BillablePeriod = value; return r; }
        public static ExplanationOfBenefit AddCareTeam(this ExplanationOfBenefit r, BackboneElement item) { r.CareTeam ??= new List<BackboneElement>(); r.CareTeam!.Add(item); return r; }
        public static ExplanationOfBenefit WithClaim(this ExplanationOfBenefit r, ReferenceType value) { r.Claim = value; return r; }
        public static ExplanationOfBenefit WithClaimResponse(this ExplanationOfBenefit r, ReferenceType value) { r.ClaimResponse = value; return r; }
        public static ExplanationOfBenefit AddContained(this ExplanationOfBenefit r, Resource item) { r.Contained ??= new List<Resource>(); r.Contained!.Add(item); return r; }
        public static ExplanationOfBenefit WithCreated(this ExplanationOfBenefit r, FhirDateTime value) { r.Created = value; return r; }
        public static ExplanationOfBenefit WithDecision(this ExplanationOfBenefit r, CodeableConcept value) { r.Decision = value; return r; }
        public static ExplanationOfBenefit AddDiagnosis(this ExplanationOfBenefit r, BackboneElement item) { r.Diagnosis ??= new List<BackboneElement>(); r.Diagnosis!.Add(item); return r; }
        public static ExplanationOfBenefit WithDiagnosisRelatedGroup(this ExplanationOfBenefit r, CodeableConcept value) { r.DiagnosisRelatedGroup = value; return r; }
        public static ExplanationOfBenefit WithDisposition(this ExplanationOfBenefit r, FhirString value) { r.Disposition = value; return r; }
        public static ExplanationOfBenefit AddEncounter(this ExplanationOfBenefit r, ReferenceType item) { r.Encounter ??= new List<ReferenceType>(); r.Encounter!.Add(item); return r; }
        public static ExplanationOfBenefit WithEnterer(this ExplanationOfBenefit r, ReferenceType value) { r.Enterer = value; return r; }
        public static ExplanationOfBenefit AddEvent(this ExplanationOfBenefit r, BackboneElement item) { r.Event ??= new List<BackboneElement>(); r.Event!.Add(item); return r; }
        public static ExplanationOfBenefit WithFacility(this ExplanationOfBenefit r, ReferenceType value) { r.Facility = value; return r; }
        public static ExplanationOfBenefit WithForm(this ExplanationOfBenefit r, Attachment value) { r.Form = value; return r; }
        public static ExplanationOfBenefit WithFormCode(this ExplanationOfBenefit r, CodeableConcept value) { r.FormCode = value; return r; }
        public static ExplanationOfBenefit WithFundsReserve(this ExplanationOfBenefit r, CodeableConcept value) { r.FundsReserve = value; return r; }
        public static ExplanationOfBenefit WithFundsReserveRequested(this ExplanationOfBenefit r, CodeableConcept value) { r.FundsReserveRequested = value; return r; }
        public static ExplanationOfBenefit AddIdentifier(this ExplanationOfBenefit r, Identifier item) { r.Identifier ??= new List<Identifier>(); r.Identifier!.Add(item); return r; }
        public static ExplanationOfBenefit AddInsurance(this ExplanationOfBenefit r, BackboneElement item) { r.Insurance ??= new List<BackboneElement>(); r.Insurance!.Add(item); return r; }
        public static ExplanationOfBenefit WithInsurer(this ExplanationOfBenefit r, ReferenceType value) { r.Insurer = value; return r; }
        public static ExplanationOfBenefit AddItem(this ExplanationOfBenefit r, BackboneElement item) { r.Item ??= new List<BackboneElement>(); r.Item!.Add(item); return r; }
        public static ExplanationOfBenefit WithOriginalPrescription(this ExplanationOfBenefit r, ReferenceType value) { r.OriginalPrescription = value; return r; }
        public static ExplanationOfBenefit WithOutcome(this ExplanationOfBenefit r, FhirCode value) { r.Outcome = value; return r; }
        public static ExplanationOfBenefit WithPatient(this ExplanationOfBenefit r, ReferenceType value) { r.Patient = value; return r; }
        public static ExplanationOfBenefit WithPatientPaid(this ExplanationOfBenefit r, Money value) { r.PatientPaid = value; return r; }
        public static ExplanationOfBenefit WithPayee(this ExplanationOfBenefit r, BackboneElement value) { r.Payee = value; return r; }
        public static ExplanationOfBenefit WithPayment(this ExplanationOfBenefit r, BackboneElement value) { r.Payment = value; return r; }
        public static ExplanationOfBenefit AddPreAuthRef(this ExplanationOfBenefit r, FhirString item) { r.PreAuthRef ??= new List<FhirString>(); r.PreAuthRef!.Add(item); return r; }
        public static ExplanationOfBenefit AddPreAuthRefPeriod(this ExplanationOfBenefit r, Period item) { r.PreAuthRefPeriod ??= new List<Period>(); r.PreAuthRefPeriod!.Add(item); return r; }
        public static ExplanationOfBenefit WithPrecedence(this ExplanationOfBenefit r, FhirPositiveInt value) { r.Precedence = value; return r; }
        public static ExplanationOfBenefit WithPrescription(this ExplanationOfBenefit r, ReferenceType value) { r.Prescription = value; return r; }
        public static ExplanationOfBenefit WithPriority(this ExplanationOfBenefit r, CodeableConcept value) { r.Priority = value; return r; }
        public static ExplanationOfBenefit AddProcedure(this ExplanationOfBenefit r, BackboneElement item) { r.Procedure ??= new List<BackboneElement>(); r.Procedure!.Add(item); return r; }
        public static ExplanationOfBenefit AddProcessNote(this ExplanationOfBenefit r, BackboneElement item) { r.ProcessNote ??= new List<BackboneElement>(); r.ProcessNote!.Add(item); return r; }
        public static ExplanationOfBenefit WithProvider(this ExplanationOfBenefit r, ReferenceType value) { r.Provider = value; return r; }
        public static ExplanationOfBenefit WithReferral(this ExplanationOfBenefit r, ReferenceType value) { r.Referral = value; return r; }
        public static ExplanationOfBenefit AddRelated(this ExplanationOfBenefit r, BackboneElement item) { r.Related ??= new List<BackboneElement>(); r.Related!.Add(item); return r; }
        public static ExplanationOfBenefit WithStatus(this ExplanationOfBenefit r, FhirCode value) { r.Status = value; return r; }
        public static ExplanationOfBenefit WithSubType(this ExplanationOfBenefit r, CodeableConcept value) { r.SubType = value; return r; }
        public static ExplanationOfBenefit AddSupportingInfo(this ExplanationOfBenefit r, BackboneElement item) { r.SupportingInfo ??= new List<BackboneElement>(); r.SupportingInfo!.Add(item); return r; }
        public static ExplanationOfBenefit WithText(this ExplanationOfBenefit r, Narrative value) { r.Text = value; return r; }
        public static ExplanationOfBenefit AddTotal(this ExplanationOfBenefit r, BackboneElement item) { r.Total ??= new List<BackboneElement>(); r.Total!.Add(item); return r; }
        public static ExplanationOfBenefit AddTraceNumber(this ExplanationOfBenefit r, Identifier item) { r.TraceNumber ??= new List<Identifier>(); r.TraceNumber!.Add(item); return r; }
        public static ExplanationOfBenefit WithType(this ExplanationOfBenefit r, CodeableConcept value) { r.Type = value; return r; }
        public static ExplanationOfBenefit WithUse(this ExplanationOfBenefit r, FhirCode value) { r.Use = value; return r; }
    }
}
