// <auto-generated>
#nullable enable
using System.Collections.Generic;
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
namespace FhirSDK.Resources.R5
{
    public static class TestScriptFluentExtensions
    {
        public static TestScript AddContact(this TestScript r, ContactDetail item) { r.Contact ??= new List<ContactDetail>(); r.Contact!.Add(item); return r; }
        public static TestScript AddContained(this TestScript r, Resource item) { r.Contained ??= new List<Resource>(); r.Contained!.Add(item); return r; }
        public static TestScript WithCopyright(this TestScript r, FhirMarkdown value) { r.Copyright = value; return r; }
        public static TestScript WithCopyrightLabel(this TestScript r, FhirString value) { r.CopyrightLabel = value; return r; }
        public static TestScript WithDate(this TestScript r, FhirDateTime value) { r.Date = value; return r; }
        public static TestScript WithDescription(this TestScript r, FhirMarkdown value) { r.Description = value; return r; }
        public static TestScript AddDestination(this TestScript r, BackboneElement item) { r.Destination ??= new List<BackboneElement>(); r.Destination!.Add(item); return r; }
        public static TestScript WithExperimental(this TestScript r, FhirBoolean value) { r.Experimental = value; return r; }
        public static TestScript AddFixture(this TestScript r, BackboneElement item) { r.Fixture ??= new List<BackboneElement>(); r.Fixture!.Add(item); return r; }
        public static TestScript AddIdentifier(this TestScript r, Identifier item) { r.Identifier ??= new List<Identifier>(); r.Identifier!.Add(item); return r; }
        public static TestScript AddJurisdiction(this TestScript r, CodeableConcept item) { r.Jurisdiction ??= new List<CodeableConcept>(); r.Jurisdiction!.Add(item); return r; }
        public static TestScript WithMetadata(this TestScript r, BackboneElement value) { r.Metadata = value; return r; }
        public static TestScript WithName(this TestScript r, FhirString value) { r.Name = value; return r; }
        public static TestScript AddOrigin(this TestScript r, BackboneElement item) { r.Origin ??= new List<BackboneElement>(); r.Origin!.Add(item); return r; }
        public static TestScript AddProfile(this TestScript r, FhirCanonical item) { r.Profile ??= new List<FhirCanonical>(); r.Profile!.Add(item); return r; }
        public static TestScript WithPublisher(this TestScript r, FhirString value) { r.Publisher = value; return r; }
        public static TestScript WithPurpose(this TestScript r, FhirMarkdown value) { r.Purpose = value; return r; }
        public static TestScript AddScope(this TestScript r, BackboneElement item) { r.Scope ??= new List<BackboneElement>(); r.Scope!.Add(item); return r; }
        public static TestScript WithSetup(this TestScript r, BackboneElement value) { r.Setup = value; return r; }
        public static TestScript WithStatus(this TestScript r, FhirCode value) { r.Status = value; return r; }
        public static TestScript WithTeardown(this TestScript r, BackboneElement value) { r.Teardown = value; return r; }
        public static TestScript AddTest(this TestScript r, BackboneElement item) { r.Test ??= new List<BackboneElement>(); r.Test!.Add(item); return r; }
        public static TestScript WithText(this TestScript r, Narrative value) { r.Text = value; return r; }
        public static TestScript WithTitle(this TestScript r, FhirString value) { r.Title = value; return r; }
        public static TestScript WithUrl(this TestScript r, FhirUri value) { r.Url = value; return r; }
        public static TestScript AddUseContext(this TestScript r, UsageContext item) { r.UseContext ??= new List<UsageContext>(); r.UseContext!.Add(item); return r; }
        public static TestScript AddVariable(this TestScript r, BackboneElement item) { r.Variable ??= new List<BackboneElement>(); r.Variable!.Add(item); return r; }
        public static TestScript WithVersion(this TestScript r, FhirString value) { r.Version = value; return r; }
        public static TestScript WithVersionAlgorithmString(this TestScript r, FhirString value) { r.VersionAlgorithmString = value; return r; }
        public static TestScript WithVersionAlgorithmCoding(this TestScript r, Coding value) { r.VersionAlgorithmCoding = value; return r; }
    }
}
