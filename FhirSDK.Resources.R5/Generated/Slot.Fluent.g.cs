// <auto-generated>
#nullable enable
using System.Collections.Generic;
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
namespace FhirSDK.Resources.R5
{
    public static class SlotFluentExtensions
    {
        public static Slot AddAppointmentType(this Slot r, CodeableConcept item) { r.AppointmentType ??= new List<CodeableConcept>(); r.AppointmentType!.Add(item); return r; }
        public static Slot WithComment(this Slot r, FhirString value) { r.Comment = value; return r; }
        public static Slot AddContained(this Slot r, Resource item) { r.Contained ??= new List<Resource>(); r.Contained!.Add(item); return r; }
        public static Slot WithEnd(this Slot r, FhirInstant value) { r.End = value; return r; }
        public static Slot AddIdentifier(this Slot r, Identifier item) { r.Identifier ??= new List<Identifier>(); r.Identifier!.Add(item); return r; }
        public static Slot WithOverbooked(this Slot r, FhirBoolean value) { r.Overbooked = value; return r; }
        public static Slot WithSchedule(this Slot r, ReferenceType value) { r.Schedule = value; return r; }
        public static Slot AddServiceCategory(this Slot r, CodeableConcept item) { r.ServiceCategory ??= new List<CodeableConcept>(); r.ServiceCategory!.Add(item); return r; }
        public static Slot AddServiceType(this Slot r, CodeableReference item) { r.ServiceType ??= new List<CodeableReference>(); r.ServiceType!.Add(item); return r; }
        public static Slot AddSpecialty(this Slot r, CodeableConcept item) { r.Specialty ??= new List<CodeableConcept>(); r.Specialty!.Add(item); return r; }
        public static Slot WithStart(this Slot r, FhirInstant value) { r.Start = value; return r; }
        public static Slot WithStatus(this Slot r, FhirCode value) { r.Status = value; return r; }
        public static Slot WithText(this Slot r, Narrative value) { r.Text = value; return r; }
    }
}
