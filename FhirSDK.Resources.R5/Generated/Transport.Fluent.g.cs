// <auto-generated>
#nullable enable
using System.Collections.Generic;
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
namespace FhirSDK.Resources.R5
{
    public static class TransportFluentExtensions
    {
        public static Transport WithAuthoredOn(this Transport r, FhirDateTime value) { r.AuthoredOn = value; return r; }
        public static Transport AddBasedOn(this Transport r, ReferenceType item) { r.BasedOn ??= new List<ReferenceType>(); r.BasedOn!.Add(item); return r; }
        public static Transport WithCode(this Transport r, CodeableConcept value) { r.Code = value; return r; }
        public static Transport WithCompletionTime(this Transport r, FhirDateTime value) { r.CompletionTime = value; return r; }
        public static Transport AddContained(this Transport r, Resource item) { r.Contained ??= new List<Resource>(); r.Contained!.Add(item); return r; }
        public static Transport WithCurrentLocation(this Transport r, ReferenceType value) { r.CurrentLocation = value; return r; }
        public static Transport WithDescription(this Transport r, FhirString value) { r.Description = value; return r; }
        public static Transport WithEncounter(this Transport r, ReferenceType value) { r.Encounter = value; return r; }
        public static Transport WithFocus(this Transport r, ReferenceType value) { r.Focus = value; return r; }
        public static Transport WithFor(this Transport r, ReferenceType value) { r.For = value; return r; }
        public static Transport WithGroupIdentifier(this Transport r, Identifier value) { r.GroupIdentifier = value; return r; }
        public static Transport WithHistory(this Transport r, ReferenceType value) { r.History = value; return r; }
        public static Transport AddIdentifier(this Transport r, Identifier item) { r.Identifier ??= new List<Identifier>(); r.Identifier!.Add(item); return r; }
        public static Transport AddInput(this Transport r, BackboneElement item) { r.Input ??= new List<BackboneElement>(); r.Input!.Add(item); return r; }
        public static Transport WithInstantiatesCanonical(this Transport r, FhirCanonical value) { r.InstantiatesCanonical = value; return r; }
        public static Transport WithInstantiatesUri(this Transport r, FhirUri value) { r.InstantiatesUri = value; return r; }
        public static Transport AddInsurance(this Transport r, ReferenceType item) { r.Insurance ??= new List<ReferenceType>(); r.Insurance!.Add(item); return r; }
        public static Transport WithIntent(this Transport r, FhirCode value) { r.Intent = value; return r; }
        public static Transport WithLastModified(this Transport r, FhirDateTime value) { r.LastModified = value; return r; }
        public static Transport WithLocation(this Transport r, ReferenceType value) { r.Location = value; return r; }
        public static Transport AddNote(this Transport r, Annotation item) { r.Note ??= new List<Annotation>(); r.Note!.Add(item); return r; }
        public static Transport AddOutput(this Transport r, BackboneElement item) { r.Output ??= new List<BackboneElement>(); r.Output!.Add(item); return r; }
        public static Transport WithOwner(this Transport r, ReferenceType value) { r.Owner = value; return r; }
        public static Transport AddPartOf(this Transport r, ReferenceType item) { r.PartOf ??= new List<ReferenceType>(); r.PartOf!.Add(item); return r; }
        public static Transport AddPerformerType(this Transport r, CodeableConcept item) { r.PerformerType ??= new List<CodeableConcept>(); r.PerformerType!.Add(item); return r; }
        public static Transport WithPriority(this Transport r, FhirCode value) { r.Priority = value; return r; }
        public static Transport WithReason(this Transport r, CodeableReference value) { r.Reason = value; return r; }
        public static Transport AddRelevantHistory(this Transport r, ReferenceType item) { r.RelevantHistory ??= new List<ReferenceType>(); r.RelevantHistory!.Add(item); return r; }
        public static Transport WithRequestedLocation(this Transport r, ReferenceType value) { r.RequestedLocation = value; return r; }
        public static Transport WithRequester(this Transport r, ReferenceType value) { r.Requester = value; return r; }
        public static Transport WithRestriction(this Transport r, BackboneElement value) { r.Restriction = value; return r; }
        public static Transport WithStatus(this Transport r, FhirCode value) { r.Status = value; return r; }
        public static Transport WithStatusReason(this Transport r, CodeableConcept value) { r.StatusReason = value; return r; }
        public static Transport WithText(this Transport r, Narrative value) { r.Text = value; return r; }
    }
}
