// <auto-generated>
#nullable enable
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
using System.Text.Json.Nodes;
using System.Text.Json.Serialization;
using System.Linq;
using FhirCore.Base;
using DataTypeServices.TypeFramework;
using DataTypeServices.DataTypes.MetaTypes;
namespace FhirSDK.Resources.R5
{
    /// <summary>
    /// Immunization event information
    /// </summary>
    public partial class Immunization : ResourceBase
    {
        public override string ResourceType => "Immunization";

        public Immunization() { }
        public Immunization(string json) { SetRawFrom(JsonNode.Parse(json)); }
        public Immunization(JsonNode? source) { SetRawFrom(source); }
        protected override void OnPropertyChanged(string propertyName, object? newValue) { base.OnPropertyChanged(propertyName, newValue); }

        private CodeableReference? _administeredProduct;
        [JsonPropertyName("administeredProduct")]
        public CodeableReference? AdministeredProduct { get => _administeredProduct; set { _administeredProduct = value; OnPropertyChangedByClr(nameof(AdministeredProduct), value); } }

        private List<ReferenceType>? _basedOn;
        [JsonPropertyName("basedOn")]
        public List<ReferenceType>? BasedOn { get => _basedOn; set { _basedOn = value; OnPropertyChangedByClr(nameof(BasedOn), value); } }

        private List<Resource>? _contained;
        [JsonPropertyName("contained")]
        public List<Resource>? Contained { get => _contained; set { _contained = value; OnPropertyChangedByClr(nameof(Contained), value); } }

        private Quantity? _doseQuantity;
        [JsonPropertyName("doseQuantity")]
        public Quantity? DoseQuantity { get => _doseQuantity; set { _doseQuantity = value; OnPropertyChangedByClr(nameof(DoseQuantity), value); } }

        private ReferenceType? _encounter;
        [JsonPropertyName("encounter")]
        public ReferenceType? Encounter { get => _encounter; set { _encounter = value; OnPropertyChangedByClr(nameof(Encounter), value); } }

        private FhirDate? _expirationDate;
        [JsonPropertyName("expirationDate")]
        public FhirDate? ExpirationDate { get => _expirationDate; set { _expirationDate = value; OnPropertyChangedByClr(nameof(ExpirationDate), value); } }

        private CodeableConcept? _fundingSource;
        [JsonPropertyName("fundingSource")]
        public CodeableConcept? FundingSource { get => _fundingSource; set { _fundingSource = value; OnPropertyChangedByClr(nameof(FundingSource), value); } }

        private List<Identifier>? _identifier;
        [JsonPropertyName("identifier")]
        public List<Identifier>? Identifier { get => _identifier; set { _identifier = value; OnPropertyChangedByClr(nameof(Identifier), value); } }

        private CodeableReference? _informationSource;
        [JsonPropertyName("informationSource")]
        public CodeableReference? InformationSource { get => _informationSource; set { _informationSource = value; OnPropertyChangedByClr(nameof(InformationSource), value); } }

        private FhirBoolean? _isSubpotent;
        [JsonPropertyName("isSubpotent")]
        public FhirBoolean? IsSubpotent { get => _isSubpotent; set { _isSubpotent = value; OnPropertyChangedByClr(nameof(IsSubpotent), value); } }

        private ReferenceType? _location;
        [JsonPropertyName("location")]
        public ReferenceType? Location { get => _location; set { _location = value; OnPropertyChangedByClr(nameof(Location), value); } }

        private FhirString? _lotNumber;
        [JsonPropertyName("lotNumber")]
        public FhirString? LotNumber { get => _lotNumber; set { _lotNumber = value; OnPropertyChangedByClr(nameof(LotNumber), value); } }

        private CodeableReference? _manufacturer;
        [JsonPropertyName("manufacturer")]
        public CodeableReference? Manufacturer { get => _manufacturer; set { _manufacturer = value; OnPropertyChangedByClr(nameof(Manufacturer), value); } }

        private List<Annotation>? _note;
        [JsonPropertyName("note")]
        public List<Annotation>? Note { get => _note; set { _note = value; OnPropertyChangedByClr(nameof(Note), value); } }

        private FhirDateTime? _occurrenceDateTime;
        [JsonPropertyName("occurrenceDateTime")]
        public FhirDateTime? OccurrenceDateTime { get => _occurrenceDateTime; set { _occurrenceDateTime = value; if (value != null) {{ _occurrenceString = null; OnPropertyChangedByClr(nameof(OccurrenceString), null); }}; OnPropertyChangedByClr(nameof(OccurrenceDateTime), value); } }

        private FhirString? _occurrenceString;
        [JsonPropertyName("occurrenceString")]
        public FhirString? OccurrenceString { get => _occurrenceString; set { _occurrenceString = value; if (value != null) {{ _occurrenceDateTime = null; OnPropertyChangedByClr(nameof(OccurrenceDateTime), null); }}; OnPropertyChangedByClr(nameof(OccurrenceString), value); } }

        private ReferenceType? _patient;
        [JsonPropertyName("patient")]
        public ReferenceType Patient { get => _patient ?? throw new InvalidOperationException("Patient is required"); set { _patient = value; OnPropertyChangedByClr(nameof(Patient), value); } }

        private List<Immunization_Performer>? _performer;
        [JsonPropertyName("performer")]
        public List<Immunization_Performer>? Performer { get => _performer; set { _performer = value; OnPropertyChangedByClr(nameof(Performer), value); } }

        /// <summary>
        /// Who performed event
        /// </summary>
        public partial class Immunization_Performer : BackboneElement<Immunization_Performer>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "Immunization_Performer" : "immunization_Performer";
            private ReferenceType? _actor;
        [JsonPropertyName("actor")]
        public ReferenceType Actor { get => _actor ?? throw new InvalidOperationException("Actor is required"); set { _actor = value; } }

            private CodeableConcept? _function;
        [JsonPropertyName("function")]
        public CodeableConcept? Function { get => _function; set { _function = value; } }

        }

        private FhirBoolean? _primarySource;
        [JsonPropertyName("primarySource")]
        public FhirBoolean? PrimarySource { get => _primarySource; set { _primarySource = value; OnPropertyChangedByClr(nameof(PrimarySource), value); } }

        private List<Immunization_ProgramEligibility>? _programEligibility;
        [JsonPropertyName("programEligibility")]
        public List<Immunization_ProgramEligibility>? ProgramEligibility { get => _programEligibility; set { _programEligibility = value; OnPropertyChangedByClr(nameof(ProgramEligibility), value); } }

        /// <summary>
        /// Patient eligibility for a specific vaccination program
        /// </summary>
        public partial class Immunization_ProgramEligibility : BackboneElement<Immunization_ProgramEligibility>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "Immunization_ProgramEligibility" : "immunization_ProgramEligibility";
            private CodeableConcept? _program;
        [JsonPropertyName("program")]
        public CodeableConcept Program { get => _program ?? throw new InvalidOperationException("Program is required"); set { _program = value; } }

            private CodeableConcept? _programStatus;
        [JsonPropertyName("programStatus")]
        public CodeableConcept ProgramStatus { get => _programStatus ?? throw new InvalidOperationException("ProgramStatus is required"); set { _programStatus = value; } }

        }

        private List<Immunization_ProtocolApplied>? _protocolApplied;
        [JsonPropertyName("protocolApplied")]
        public List<Immunization_ProtocolApplied>? ProtocolApplied { get => _protocolApplied; set { _protocolApplied = value; OnPropertyChangedByClr(nameof(ProtocolApplied), value); } }

        /// <summary>
        /// Protocol followed by the provider
        /// </summary>
        public partial class Immunization_ProtocolApplied : BackboneElement<Immunization_ProtocolApplied>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "Immunization_ProtocolApplied" : "immunization_ProtocolApplied";
            private ReferenceType? _authority;
        [JsonPropertyName("authority")]
        public ReferenceType? Authority { get => _authority; set { _authority = value; } }

            private FhirString? _doseNumber;
        [JsonPropertyName("doseNumber")]
        public FhirString DoseNumber { get => _doseNumber ?? throw new InvalidOperationException("DoseNumber is required"); set { _doseNumber = value; } }

            private FhirString? _series;
        [JsonPropertyName("series")]
        public FhirString? Series { get => _series; set { _series = value; } }

            private FhirString? _seriesDoses;
        [JsonPropertyName("seriesDoses")]
        public FhirString? SeriesDoses { get => _seriesDoses; set { _seriesDoses = value; } }

            private List<CodeableConcept>? _targetDisease;
        [JsonPropertyName("targetDisease")]
        public List<CodeableConcept>? TargetDisease { get => _targetDisease; set { _targetDisease = value; } }

        }

        private List<Immunization_Reaction>? _reaction;
        [JsonPropertyName("reaction")]
        public List<Immunization_Reaction>? Reaction { get => _reaction; set { _reaction = value; OnPropertyChangedByClr(nameof(Reaction), value); } }

        /// <summary>
        /// Details of a reaction that follows immunization
        /// </summary>
        public partial class Immunization_Reaction : BackboneElement<Immunization_Reaction>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "Immunization_Reaction" : "immunization_Reaction";
            private FhirDateTime? _date;
        [JsonPropertyName("date")]
        public FhirDateTime? Date { get => _date; set { _date = value; } }

            private CodeableReference? _manifestation;
        [JsonPropertyName("manifestation")]
        public CodeableReference? Manifestation { get => _manifestation; set { _manifestation = value; } }

            private FhirBoolean? _reported;
        [JsonPropertyName("reported")]
        public FhirBoolean? Reported { get => _reported; set { _reported = value; } }

        }

        private List<CodeableReference>? _reason;
        [JsonPropertyName("reason")]
        public List<CodeableReference>? Reason { get => _reason; set { _reason = value; OnPropertyChangedByClr(nameof(Reason), value); } }

        private CodeableConcept? _route;
        [JsonPropertyName("route")]
        public CodeableConcept? Route { get => _route; set { _route = value; OnPropertyChangedByClr(nameof(Route), value); } }

        private CodeableConcept? _site;
        [JsonPropertyName("site")]
        public CodeableConcept? Site { get => _site; set { _site = value; OnPropertyChangedByClr(nameof(Site), value); } }

        private FhirCode? _status;
        [JsonPropertyName("status")]
        public FhirCode Status { get => _status ?? throw new InvalidOperationException("Status is required"); set { _status = value; OnPropertyChangedByClr(nameof(Status), value); } }

        private CodeableConcept? _statusReason;
        [JsonPropertyName("statusReason")]
        public CodeableConcept? StatusReason { get => _statusReason; set { _statusReason = value; OnPropertyChangedByClr(nameof(StatusReason), value); } }

        private List<CodeableConcept>? _subpotentReason;
        [JsonPropertyName("subpotentReason")]
        public List<CodeableConcept>? SubpotentReason { get => _subpotentReason; set { _subpotentReason = value; OnPropertyChangedByClr(nameof(SubpotentReason), value); } }

        private List<ReferenceType>? _supportingInformation;
        [JsonPropertyName("supportingInformation")]
        public List<ReferenceType>? SupportingInformation { get => _supportingInformation; set { _supportingInformation = value; OnPropertyChangedByClr(nameof(SupportingInformation), value); } }

        private Narrative? _text;
        [JsonPropertyName("text")]
        public Narrative? Text { get => _text; set { _text = value; OnPropertyChangedByClr(nameof(Text), value); } }

        private CodeableConcept? _vaccineCode;
        [JsonPropertyName("vaccineCode")]
        public CodeableConcept VaccineCode { get => _vaccineCode ?? throw new InvalidOperationException("VaccineCode is required"); set { _vaccineCode = value; OnPropertyChangedByClr(nameof(VaccineCode), value); } }

    }
}
