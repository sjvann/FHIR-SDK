// <auto-generated>
#nullable enable
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
using System.Text.Json.Nodes;
using System.Text.Json.Serialization;
using System.Linq;
using FhirCore.Base;
using DataTypeServices.TypeFramework;
using DataTypeServices.DataTypes.MetaTypes;
namespace FhirSDK.Resources.R5
{
    /// <summary>
    /// Detailed information about conditions, problems or diagnoses
    /// </summary>
    public partial class Condition : ResourceBase
    {
        public override string ResourceType => "Condition";

        public Condition() { }
        public Condition(string json) { SetRawFrom(JsonNode.Parse(json)); }
        public Condition(JsonNode? source) { SetRawFrom(source); }
        protected override void OnPropertyChanged(string propertyName, object? newValue) { base.OnPropertyChanged(propertyName, newValue); }

        private FhirDateTime? _abatementDateTime;
        [JsonPropertyName("abatementDateTime")]
        public FhirDateTime? AbatementDateTime { get => _abatementDateTime; set { _abatementDateTime = value; if (value != null) {{ _abatementAge = null; OnPropertyChangedByClr(nameof(AbatementAge), null); _abatementPeriod = null; OnPropertyChangedByClr(nameof(AbatementPeriod), null); _abatementRange = null; OnPropertyChangedByClr(nameof(AbatementRange), null); _abatementString = null; OnPropertyChangedByClr(nameof(AbatementString), null); }}; OnPropertyChangedByClr(nameof(AbatementDateTime), value); } }

        private Age? _abatementAge;
        [JsonPropertyName("abatementAge")]
        public Age? AbatementAge { get => _abatementAge; set { _abatementAge = value; if (value != null) {{ _abatementDateTime = null; OnPropertyChangedByClr(nameof(AbatementDateTime), null); _abatementPeriod = null; OnPropertyChangedByClr(nameof(AbatementPeriod), null); _abatementRange = null; OnPropertyChangedByClr(nameof(AbatementRange), null); _abatementString = null; OnPropertyChangedByClr(nameof(AbatementString), null); }}; OnPropertyChangedByClr(nameof(AbatementAge), value); } }

        private Period? _abatementPeriod;
        [JsonPropertyName("abatementPeriod")]
        public Period? AbatementPeriod { get => _abatementPeriod; set { _abatementPeriod = value; if (value != null) {{ _abatementDateTime = null; OnPropertyChangedByClr(nameof(AbatementDateTime), null); _abatementAge = null; OnPropertyChangedByClr(nameof(AbatementAge), null); _abatementRange = null; OnPropertyChangedByClr(nameof(AbatementRange), null); _abatementString = null; OnPropertyChangedByClr(nameof(AbatementString), null); }}; OnPropertyChangedByClr(nameof(AbatementPeriod), value); } }

        private DataTypeServices.DataTypes.ComplexTypes.Range? _abatementRange;
        [JsonPropertyName("abatementRange")]
        public DataTypeServices.DataTypes.ComplexTypes.Range? AbatementRange { get => _abatementRange; set { _abatementRange = value; if (value != null) {{ _abatementDateTime = null; OnPropertyChangedByClr(nameof(AbatementDateTime), null); _abatementAge = null; OnPropertyChangedByClr(nameof(AbatementAge), null); _abatementPeriod = null; OnPropertyChangedByClr(nameof(AbatementPeriod), null); _abatementString = null; OnPropertyChangedByClr(nameof(AbatementString), null); }}; OnPropertyChangedByClr(nameof(AbatementRange), value); } }

        private FhirString? _abatementString;
        [JsonPropertyName("abatementString")]
        public FhirString? AbatementString { get => _abatementString; set { _abatementString = value; if (value != null) {{ _abatementDateTime = null; OnPropertyChangedByClr(nameof(AbatementDateTime), null); _abatementAge = null; OnPropertyChangedByClr(nameof(AbatementAge), null); _abatementPeriod = null; OnPropertyChangedByClr(nameof(AbatementPeriod), null); _abatementRange = null; OnPropertyChangedByClr(nameof(AbatementRange), null); }}; OnPropertyChangedByClr(nameof(AbatementString), value); } }

        private List<CodeableConcept>? _bodySite;
        [JsonPropertyName("bodySite")]
        public List<CodeableConcept>? BodySite { get => _bodySite; set { _bodySite = value; OnPropertyChangedByClr(nameof(BodySite), value); } }

        private List<CodeableConcept>? _category;
        [JsonPropertyName("category")]
        public List<CodeableConcept>? Category { get => _category; set { _category = value; OnPropertyChangedByClr(nameof(Category), value); } }

        private CodeableConcept? _clinicalStatus;
        [JsonPropertyName("clinicalStatus")]
        public CodeableConcept ClinicalStatus { get => _clinicalStatus ?? throw new InvalidOperationException("ClinicalStatus is required"); set { _clinicalStatus = value; OnPropertyChangedByClr(nameof(ClinicalStatus), value); } }

        private CodeableConcept? _code;
        [JsonPropertyName("code")]
        public CodeableConcept? Code { get => _code; set { _code = value; OnPropertyChangedByClr(nameof(Code), value); } }

        private List<Resource>? _contained;
        [JsonPropertyName("contained")]
        public List<Resource>? Contained { get => _contained; set { _contained = value; OnPropertyChangedByClr(nameof(Contained), value); } }

        private ReferenceType? _encounter;
        [JsonPropertyName("encounter")]
        public ReferenceType? Encounter { get => _encounter; set { _encounter = value; OnPropertyChangedByClr(nameof(Encounter), value); } }

        private List<CodeableReference>? _evidence;
        [JsonPropertyName("evidence")]
        public List<CodeableReference>? Evidence { get => _evidence; set { _evidence = value; OnPropertyChangedByClr(nameof(Evidence), value); } }

        private List<Identifier>? _identifier;
        [JsonPropertyName("identifier")]
        public List<Identifier>? Identifier { get => _identifier; set { _identifier = value; OnPropertyChangedByClr(nameof(Identifier), value); } }

        private List<Annotation>? _note;
        [JsonPropertyName("note")]
        public List<Annotation>? Note { get => _note; set { _note = value; OnPropertyChangedByClr(nameof(Note), value); } }

        private FhirDateTime? _onsetDateTime;
        [JsonPropertyName("onsetDateTime")]
        public FhirDateTime? OnsetDateTime { get => _onsetDateTime; set { _onsetDateTime = value; if (value != null) {{ _onsetAge = null; OnPropertyChangedByClr(nameof(OnsetAge), null); _onsetPeriod = null; OnPropertyChangedByClr(nameof(OnsetPeriod), null); _onsetRange = null; OnPropertyChangedByClr(nameof(OnsetRange), null); _onsetString = null; OnPropertyChangedByClr(nameof(OnsetString), null); }}; OnPropertyChangedByClr(nameof(OnsetDateTime), value); } }

        private Age? _onsetAge;
        [JsonPropertyName("onsetAge")]
        public Age? OnsetAge { get => _onsetAge; set { _onsetAge = value; if (value != null) {{ _onsetDateTime = null; OnPropertyChangedByClr(nameof(OnsetDateTime), null); _onsetPeriod = null; OnPropertyChangedByClr(nameof(OnsetPeriod), null); _onsetRange = null; OnPropertyChangedByClr(nameof(OnsetRange), null); _onsetString = null; OnPropertyChangedByClr(nameof(OnsetString), null); }}; OnPropertyChangedByClr(nameof(OnsetAge), value); } }

        private Period? _onsetPeriod;
        [JsonPropertyName("onsetPeriod")]
        public Period? OnsetPeriod { get => _onsetPeriod; set { _onsetPeriod = value; if (value != null) {{ _onsetDateTime = null; OnPropertyChangedByClr(nameof(OnsetDateTime), null); _onsetAge = null; OnPropertyChangedByClr(nameof(OnsetAge), null); _onsetRange = null; OnPropertyChangedByClr(nameof(OnsetRange), null); _onsetString = null; OnPropertyChangedByClr(nameof(OnsetString), null); }}; OnPropertyChangedByClr(nameof(OnsetPeriod), value); } }

        private DataTypeServices.DataTypes.ComplexTypes.Range? _onsetRange;
        [JsonPropertyName("onsetRange")]
        public DataTypeServices.DataTypes.ComplexTypes.Range? OnsetRange { get => _onsetRange; set { _onsetRange = value; if (value != null) {{ _onsetDateTime = null; OnPropertyChangedByClr(nameof(OnsetDateTime), null); _onsetAge = null; OnPropertyChangedByClr(nameof(OnsetAge), null); _onsetPeriod = null; OnPropertyChangedByClr(nameof(OnsetPeriod), null); _onsetString = null; OnPropertyChangedByClr(nameof(OnsetString), null); }}; OnPropertyChangedByClr(nameof(OnsetRange), value); } }

        private FhirString? _onsetString;
        [JsonPropertyName("onsetString")]
        public FhirString? OnsetString { get => _onsetString; set { _onsetString = value; if (value != null) {{ _onsetDateTime = null; OnPropertyChangedByClr(nameof(OnsetDateTime), null); _onsetAge = null; OnPropertyChangedByClr(nameof(OnsetAge), null); _onsetPeriod = null; OnPropertyChangedByClr(nameof(OnsetPeriod), null); _onsetRange = null; OnPropertyChangedByClr(nameof(OnsetRange), null); }}; OnPropertyChangedByClr(nameof(OnsetString), value); } }

        private List<Condition_Participant>? _participant;
        [JsonPropertyName("participant")]
        public List<Condition_Participant>? Participant { get => _participant; set { _participant = value; OnPropertyChangedByClr(nameof(Participant), value); } }

        /// <summary>
        /// Who or what participated in the activities related to the condition and how they were involved
        /// </summary>
        public partial class Condition_Participant : BackboneElement<Condition_Participant>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "Condition_Participant" : "condition_Participant";
            private ReferenceType? _actor;
        [JsonPropertyName("actor")]
        public ReferenceType Actor { get => _actor ?? throw new InvalidOperationException("Actor is required"); set { _actor = value; } }

            private CodeableConcept? _function;
        [JsonPropertyName("function")]
        public CodeableConcept? Function { get => _function; set { _function = value; } }

        }

        private FhirDateTime? _recordedDate;
        [JsonPropertyName("recordedDate")]
        public FhirDateTime? RecordedDate { get => _recordedDate; set { _recordedDate = value; OnPropertyChangedByClr(nameof(RecordedDate), value); } }

        private CodeableConcept? _severity;
        [JsonPropertyName("severity")]
        public CodeableConcept? Severity { get => _severity; set { _severity = value; OnPropertyChangedByClr(nameof(Severity), value); } }

        private List<Condition_Stage>? _stage;
        [JsonPropertyName("stage")]
        public List<Condition_Stage>? Stage { get => _stage; set { _stage = value; OnPropertyChangedByClr(nameof(Stage), value); } }

        /// <summary>
        /// Stage/grade, usually assessed formally
        /// </summary>
        public partial class Condition_Stage : BackboneElement<Condition_Stage>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "Condition_Stage" : "condition_Stage";
            private List<ReferenceType>? _assessment;
        [JsonPropertyName("assessment")]
        public List<ReferenceType>? Assessment { get => _assessment; set { _assessment = value; } }

            private CodeableConcept? _summary;
        [JsonPropertyName("summary")]
        public CodeableConcept? Summary { get => _summary; set { _summary = value; } }

            private CodeableConcept? _type;
        [JsonPropertyName("type")]
        public CodeableConcept? Type { get => _type; set { _type = value; } }

        }

        private ReferenceType? _subject;
        [JsonPropertyName("subject")]
        public ReferenceType Subject { get => _subject ?? throw new InvalidOperationException("Subject is required"); set { _subject = value; OnPropertyChangedByClr(nameof(Subject), value); } }

        private Narrative? _text;
        [JsonPropertyName("text")]
        public Narrative? Text { get => _text; set { _text = value; OnPropertyChangedByClr(nameof(Text), value); } }

        private CodeableConcept? _verificationStatus;
        [JsonPropertyName("verificationStatus")]
        public CodeableConcept? VerificationStatus { get => _verificationStatus; set { _verificationStatus = value; OnPropertyChangedByClr(nameof(VerificationStatus), value); } }

    }
}
