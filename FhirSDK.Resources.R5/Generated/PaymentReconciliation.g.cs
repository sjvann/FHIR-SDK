// <auto-generated>
#nullable enable
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
using System.Text.Json.Nodes;
using System.Text.Json.Serialization;
using System.Linq;
using FhirCore.Base;
using DataTypeServices.TypeFramework;
using DataTypeServices.DataTypes.MetaTypes;
namespace FhirSDK.Resources.R5
{
    /// <summary>
    /// PaymentReconciliation resource
    /// </summary>
    public partial class PaymentReconciliation : ResourceBase
    {
        public override string ResourceType => "PaymentReconciliation";

        public PaymentReconciliation() { }
        public PaymentReconciliation(string json) { SetRawFrom(JsonNode.Parse(json)); }
        public PaymentReconciliation(JsonNode? source) { SetRawFrom(source); }
        protected override void OnPropertyChanged(string propertyName, object? newValue) { base.OnPropertyChanged(propertyName, newValue); }

        private FhirString? _accountNumber;
        [JsonPropertyName("accountNumber")]
        public FhirString? AccountNumber { get => _accountNumber; set { _accountNumber = value; OnPropertyChangedByClr(nameof(AccountNumber), value); } }

        private List<PaymentReconciliation_Allocation>? _allocation;
        [JsonPropertyName("allocation")]
        public List<PaymentReconciliation_Allocation>? Allocation { get => _allocation; set { _allocation = value; OnPropertyChangedByClr(nameof(Allocation), value); } }

        /// <summary>
        /// Settlement particulars
        /// </summary>
        public partial class PaymentReconciliation_Allocation : BackboneElement<PaymentReconciliation_Allocation>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "PaymentReconciliation_Allocation" : "paymentReconciliation_Allocation";
            private ReferenceType? _account;
        [JsonPropertyName("account")]
        public ReferenceType? Account { get => _account; set { _account = value; } }

            private Money? _amount;
        [JsonPropertyName("amount")]
        public Money? Amount { get => _amount; set { _amount = value; } }

            private FhirDate? _date;
        [JsonPropertyName("date")]
        public FhirDate? Date { get => _date; set { _date = value; } }

            private ReferenceType? _encounter;
        [JsonPropertyName("encounter")]
        public ReferenceType? Encounter { get => _encounter; set { _encounter = value; } }

            private Identifier? _identifier;
        [JsonPropertyName("identifier")]
        public Identifier? Identifier { get => _identifier; set { _identifier = value; } }

            private ReferenceType? _payee;
        [JsonPropertyName("payee")]
        public ReferenceType? Payee { get => _payee; set { _payee = value; } }

            private Identifier? _predecessor;
        [JsonPropertyName("predecessor")]
        public Identifier? Predecessor { get => _predecessor; set { _predecessor = value; } }

            private ReferenceType? _response;
        [JsonPropertyName("response")]
        public ReferenceType? Response { get => _response; set { _response = value; } }

            private ReferenceType? _responsible;
        [JsonPropertyName("responsible")]
        public ReferenceType? Responsible { get => _responsible; set { _responsible = value; } }

            private ReferenceType? _submitter;
        [JsonPropertyName("submitter")]
        public ReferenceType? Submitter { get => _submitter; set { _submitter = value; } }

            private ReferenceType? _target;
        [JsonPropertyName("target")]
        public ReferenceType? Target { get => _target; set { _target = value; } }

            private FhirString? _targetItemString;
        [JsonPropertyName("targetItemString")]
        public FhirString? TargetItemString { get => _targetItemString; set { _targetItemString = value; if (value != null) {{ _targetItemIdentifier = null; OnPropertyChanged("targetItemIdentifier", null); _targetItempositiveInt = null; OnPropertyChanged("targetItempositiveInt", null); }}; OnPropertyChanged("targetItemString", value); } }

            private Identifier? _targetItemIdentifier;
        [JsonPropertyName("targetItemIdentifier")]
        public Identifier? TargetItemIdentifier { get => _targetItemIdentifier; set { _targetItemIdentifier = value; if (value != null) {{ _targetItemString = null; OnPropertyChanged("targetItemString", null); _targetItempositiveInt = null; OnPropertyChanged("targetItempositiveInt", null); }}; OnPropertyChanged("targetItemIdentifier", value); } }

            private FhirPositiveInt? _targetItempositiveInt;
        [JsonPropertyName("targetItempositiveInt")]
        public FhirPositiveInt? TargetItempositiveInt { get => _targetItempositiveInt; set { _targetItempositiveInt = value; if (value != null) {{ _targetItemString = null; OnPropertyChanged("targetItemString", null); _targetItemIdentifier = null; OnPropertyChanged("targetItemIdentifier", null); }}; OnPropertyChanged("targetItempositiveInt", value); } }

            private CodeableConcept? _type;
        [JsonPropertyName("type")]
        public CodeableConcept? Type { get => _type; set { _type = value; } }

        }

        private Money? _amount;
        [JsonPropertyName("amount")]
        public Money Amount { get => _amount ?? throw new InvalidOperationException("Amount is required"); set { _amount = value; OnPropertyChangedByClr(nameof(Amount), value); } }

        private FhirString? _authorization;
        [JsonPropertyName("authorization")]
        public FhirString? Authorization { get => _authorization; set { _authorization = value; OnPropertyChangedByClr(nameof(Authorization), value); } }

        private FhirString? _cardBrand;
        [JsonPropertyName("cardBrand")]
        public FhirString? CardBrand { get => _cardBrand; set { _cardBrand = value; OnPropertyChangedByClr(nameof(CardBrand), value); } }

        private List<Resource>? _contained;
        [JsonPropertyName("contained")]
        public List<Resource>? Contained { get => _contained; set { _contained = value; OnPropertyChangedByClr(nameof(Contained), value); } }

        private FhirDateTime? _created;
        [JsonPropertyName("created")]
        public FhirDateTime Created { get => _created ?? throw new InvalidOperationException("Created is required"); set { _created = value; OnPropertyChangedByClr(nameof(Created), value); } }

        private FhirDate? _date;
        [JsonPropertyName("date")]
        public FhirDate Date { get => _date ?? throw new InvalidOperationException("Date is required"); set { _date = value; OnPropertyChangedByClr(nameof(Date), value); } }

        private FhirString? _disposition;
        [JsonPropertyName("disposition")]
        public FhirString? Disposition { get => _disposition; set { _disposition = value; OnPropertyChangedByClr(nameof(Disposition), value); } }

        private ReferenceType? _enterer;
        [JsonPropertyName("enterer")]
        public ReferenceType? Enterer { get => _enterer; set { _enterer = value; OnPropertyChangedByClr(nameof(Enterer), value); } }

        private FhirDate? _expirationDate;
        [JsonPropertyName("expirationDate")]
        public FhirDate? ExpirationDate { get => _expirationDate; set { _expirationDate = value; OnPropertyChangedByClr(nameof(ExpirationDate), value); } }

        private CodeableConcept? _formCode;
        [JsonPropertyName("formCode")]
        public CodeableConcept? FormCode { get => _formCode; set { _formCode = value; OnPropertyChangedByClr(nameof(FormCode), value); } }

        private List<Identifier>? _identifier;
        [JsonPropertyName("identifier")]
        public List<Identifier>? Identifier { get => _identifier; set { _identifier = value; OnPropertyChangedByClr(nameof(Identifier), value); } }

        private CodeableConcept? _issuerType;
        [JsonPropertyName("issuerType")]
        public CodeableConcept? IssuerType { get => _issuerType; set { _issuerType = value; OnPropertyChangedByClr(nameof(IssuerType), value); } }

        private CodeableConcept? _kind;
        [JsonPropertyName("kind")]
        public CodeableConcept? Kind { get => _kind; set { _kind = value; OnPropertyChangedByClr(nameof(Kind), value); } }

        private ReferenceType? _location;
        [JsonPropertyName("location")]
        public ReferenceType? Location { get => _location; set { _location = value; OnPropertyChangedByClr(nameof(Location), value); } }

        private CodeableConcept? _method;
        [JsonPropertyName("method")]
        public CodeableConcept? Method { get => _method; set { _method = value; OnPropertyChangedByClr(nameof(Method), value); } }

        private FhirCode? _outcome;
        [JsonPropertyName("outcome")]
        public FhirCode? Outcome { get => _outcome; set { _outcome = value; OnPropertyChangedByClr(nameof(Outcome), value); } }

        private Identifier? _paymentIdentifier;
        [JsonPropertyName("paymentIdentifier")]
        public Identifier? PaymentIdentifier { get => _paymentIdentifier; set { _paymentIdentifier = value; OnPropertyChangedByClr(nameof(PaymentIdentifier), value); } }

        private ReferenceType? _paymentIssuer;
        [JsonPropertyName("paymentIssuer")]
        public ReferenceType? PaymentIssuer { get => _paymentIssuer; set { _paymentIssuer = value; OnPropertyChangedByClr(nameof(PaymentIssuer), value); } }

        private Period? _period;
        [JsonPropertyName("period")]
        public Period? Period { get => _period; set { _period = value; OnPropertyChangedByClr(nameof(Period), value); } }

        private List<PaymentReconciliation_ProcessNote>? _processNote;
        [JsonPropertyName("processNote")]
        public List<PaymentReconciliation_ProcessNote>? ProcessNote { get => _processNote; set { _processNote = value; OnPropertyChangedByClr(nameof(ProcessNote), value); } }

        /// <summary>
        /// Note concerning processing
        /// </summary>
        public partial class PaymentReconciliation_ProcessNote : BackboneElement<PaymentReconciliation_ProcessNote>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "PaymentReconciliation_ProcessNote" : "paymentReconciliation_ProcessNote";
            private FhirString? _text;
        [JsonPropertyName("text")]
        public FhirString? Text { get => _text; set { _text = value; } }

            private FhirCode? _type;
        [JsonPropertyName("type")]
        public FhirCode? Type { get => _type; set { _type = value; } }

        }

        private FhirString? _processor;
        [JsonPropertyName("processor")]
        public FhirString? Processor { get => _processor; set { _processor = value; OnPropertyChangedByClr(nameof(Processor), value); } }

        private FhirString? _referenceNumber;
        [JsonPropertyName("referenceNumber")]
        public FhirString? ReferenceNumber { get => _referenceNumber; set { _referenceNumber = value; OnPropertyChangedByClr(nameof(ReferenceNumber), value); } }

        private ReferenceType? _request;
        [JsonPropertyName("request")]
        public ReferenceType? Request { get => _request; set { _request = value; OnPropertyChangedByClr(nameof(Request), value); } }

        private ReferenceType? _requestor;
        [JsonPropertyName("requestor")]
        public ReferenceType? Requestor { get => _requestor; set { _requestor = value; OnPropertyChangedByClr(nameof(Requestor), value); } }

        private Money? _returnedAmount;
        [JsonPropertyName("returnedAmount")]
        public Money? ReturnedAmount { get => _returnedAmount; set { _returnedAmount = value; OnPropertyChangedByClr(nameof(ReturnedAmount), value); } }

        private FhirCode? _status;
        [JsonPropertyName("status")]
        public FhirCode Status { get => _status ?? throw new InvalidOperationException("Status is required"); set { _status = value; OnPropertyChangedByClr(nameof(Status), value); } }

        private Money? _tenderedAmount;
        [JsonPropertyName("tenderedAmount")]
        public Money? TenderedAmount { get => _tenderedAmount; set { _tenderedAmount = value; OnPropertyChangedByClr(nameof(TenderedAmount), value); } }

        private Narrative? _text;
        [JsonPropertyName("text")]
        public Narrative? Text { get => _text; set { _text = value; OnPropertyChangedByClr(nameof(Text), value); } }

        private CodeableConcept? _type;
        [JsonPropertyName("type")]
        public CodeableConcept Type { get => _type ?? throw new InvalidOperationException("Type is required"); set { _type = value; OnPropertyChangedByClr(nameof(Type), value); } }

    }
}
