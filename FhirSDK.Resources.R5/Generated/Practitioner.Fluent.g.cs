// <auto-generated>
#nullable enable
using System.Collections.Generic;
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
namespace FhirSDK.Resources.R5
{
    public static class PractitionerFluentExtensions
    {
        public static Practitioner WithActive(this Practitioner r, FhirBoolean value) { r.Active = value; return r; }
        public static Practitioner AddAddress(this Practitioner r, Address item) { r.Address ??= new List<Address>(); r.Address!.Add(item); return r; }
        public static Practitioner WithBirthDate(this Practitioner r, FhirDate value) { r.BirthDate = value; return r; }
        public static Practitioner AddCommunication(this Practitioner r, BackboneElement item) { r.Communication ??= new List<BackboneElement>(); r.Communication!.Add(item); return r; }
        public static Practitioner AddContained(this Practitioner r, Resource item) { r.Contained ??= new List<Resource>(); r.Contained!.Add(item); return r; }
        public static Practitioner WithDeceasedBoolean(this Practitioner r, FhirBoolean value) { r.DeceasedBoolean = value; return r; }
        public static Practitioner WithDeceasedDateTime(this Practitioner r, FhirDateTime value) { r.DeceasedDateTime = value; return r; }
        public static Practitioner WithGender(this Practitioner r, FhirCode value) { r.Gender = value; return r; }
        public static Practitioner AddIdentifier(this Practitioner r, Identifier item) { r.Identifier ??= new List<Identifier>(); r.Identifier!.Add(item); return r; }
        public static Practitioner AddName(this Practitioner r, HumanName item) { r.Name ??= new List<HumanName>(); r.Name!.Add(item); return r; }
        public static Practitioner AddPhoto(this Practitioner r, Attachment item) { r.Photo ??= new List<Attachment>(); r.Photo!.Add(item); return r; }
        public static Practitioner AddQualification(this Practitioner r, BackboneElement item) { r.Qualification ??= new List<BackboneElement>(); r.Qualification!.Add(item); return r; }
        public static Practitioner AddTelecom(this Practitioner r, ContactPoint item) { r.Telecom ??= new List<ContactPoint>(); r.Telecom!.Add(item); return r; }
        public static Practitioner WithText(this Practitioner r, Narrative value) { r.Text = value; return r; }
    }
}
