// <auto-generated>
#nullable enable
using System.Collections.Generic;
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
namespace FhirSDK.Resources.R5
{
    public static class MedicinalProductDefinitionFluentExtensions
    {
        public static MedicinalProductDefinition WithAdditionalMonitoringIndicator(this MedicinalProductDefinition r, CodeableConcept value) { r.AdditionalMonitoringIndicator = value; return r; }
        public static MedicinalProductDefinition AddAttachedDocument(this MedicinalProductDefinition r, ReferenceType item) { r.AttachedDocument ??= new List<ReferenceType>(); r.AttachedDocument!.Add(item); return r; }
        public static MedicinalProductDefinition AddCharacteristic(this MedicinalProductDefinition r, BackboneElement item) { r.Characteristic ??= new List<BackboneElement>(); r.Characteristic!.Add(item); return r; }
        public static MedicinalProductDefinition AddClassification(this MedicinalProductDefinition r, CodeableConcept item) { r.Classification ??= new List<CodeableConcept>(); r.Classification!.Add(item); return r; }
        public static MedicinalProductDefinition AddClinicalTrial(this MedicinalProductDefinition r, ReferenceType item) { r.ClinicalTrial ??= new List<ReferenceType>(); r.ClinicalTrial!.Add(item); return r; }
        public static MedicinalProductDefinition AddCode(this MedicinalProductDefinition r, Coding item) { r.Code ??= new List<Coding>(); r.Code!.Add(item); return r; }
        public static MedicinalProductDefinition WithCombinedPharmaceuticalDoseForm(this MedicinalProductDefinition r, CodeableConcept value) { r.CombinedPharmaceuticalDoseForm = value; return r; }
        public static MedicinalProductDefinition AddComprisedOf(this MedicinalProductDefinition r, ReferenceType item) { r.ComprisedOf ??= new List<ReferenceType>(); r.ComprisedOf!.Add(item); return r; }
        public static MedicinalProductDefinition AddContact(this MedicinalProductDefinition r, BackboneElement item) { r.Contact ??= new List<BackboneElement>(); r.Contact!.Add(item); return r; }
        public static MedicinalProductDefinition AddContained(this MedicinalProductDefinition r, Resource item) { r.Contained ??= new List<Resource>(); r.Contained!.Add(item); return r; }
        public static MedicinalProductDefinition AddCrossReference(this MedicinalProductDefinition r, BackboneElement item) { r.CrossReference ??= new List<BackboneElement>(); r.CrossReference!.Add(item); return r; }
        public static MedicinalProductDefinition WithDescription(this MedicinalProductDefinition r, FhirMarkdown value) { r.Description = value; return r; }
        public static MedicinalProductDefinition WithDomain(this MedicinalProductDefinition r, CodeableConcept value) { r.Domain = value; return r; }
        public static MedicinalProductDefinition AddIdentifier(this MedicinalProductDefinition r, Identifier item) { r.Identifier ??= new List<Identifier>(); r.Identifier!.Add(item); return r; }
        public static MedicinalProductDefinition AddImpurity(this MedicinalProductDefinition r, CodeableReference item) { r.Impurity ??= new List<CodeableReference>(); r.Impurity!.Add(item); return r; }
        public static MedicinalProductDefinition WithIndication(this MedicinalProductDefinition r, FhirMarkdown value) { r.Indication = value; return r; }
        public static MedicinalProductDefinition AddIngredient(this MedicinalProductDefinition r, CodeableConcept item) { r.Ingredient ??= new List<CodeableConcept>(); r.Ingredient!.Add(item); return r; }
        public static MedicinalProductDefinition WithLegalStatusOfSupply(this MedicinalProductDefinition r, CodeableConcept value) { r.LegalStatusOfSupply = value; return r; }
        public static MedicinalProductDefinition AddMarketingStatus(this MedicinalProductDefinition r, MarketingStatus item) { r.MarketingStatus ??= new List<MarketingStatus>(); r.MarketingStatus!.Add(item); return r; }
        public static MedicinalProductDefinition AddMasterFile(this MedicinalProductDefinition r, ReferenceType item) { r.MasterFile ??= new List<ReferenceType>(); r.MasterFile!.Add(item); return r; }
        public static MedicinalProductDefinition AddName(this MedicinalProductDefinition r, BackboneElement item) { r.Name ??= new List<BackboneElement>(); r.Name!.Add(item); return r; }
        public static MedicinalProductDefinition AddOperation(this MedicinalProductDefinition r, BackboneElement item) { r.Operation ??= new List<BackboneElement>(); r.Operation!.Add(item); return r; }
        public static MedicinalProductDefinition AddPackagedMedicinalProduct(this MedicinalProductDefinition r, CodeableConcept item) { r.PackagedMedicinalProduct ??= new List<CodeableConcept>(); r.PackagedMedicinalProduct!.Add(item); return r; }
        public static MedicinalProductDefinition WithPediatricUseIndicator(this MedicinalProductDefinition r, CodeableConcept value) { r.PediatricUseIndicator = value; return r; }
        public static MedicinalProductDefinition AddRoute(this MedicinalProductDefinition r, CodeableConcept item) { r.Route ??= new List<CodeableConcept>(); r.Route!.Add(item); return r; }
        public static MedicinalProductDefinition AddSpecialMeasures(this MedicinalProductDefinition r, CodeableConcept item) { r.SpecialMeasures ??= new List<CodeableConcept>(); r.SpecialMeasures!.Add(item); return r; }
        public static MedicinalProductDefinition WithStatus(this MedicinalProductDefinition r, CodeableConcept value) { r.Status = value; return r; }
        public static MedicinalProductDefinition WithStatusDate(this MedicinalProductDefinition r, FhirDateTime value) { r.StatusDate = value; return r; }
        public static MedicinalProductDefinition WithText(this MedicinalProductDefinition r, Narrative value) { r.Text = value; return r; }
        public static MedicinalProductDefinition WithType(this MedicinalProductDefinition r, CodeableConcept value) { r.Type = value; return r; }
        public static MedicinalProductDefinition WithVersion(this MedicinalProductDefinition r, FhirString value) { r.Version = value; return r; }
    }
}
