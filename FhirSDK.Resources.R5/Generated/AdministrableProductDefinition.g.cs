// <auto-generated>
#nullable enable
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
using System.Text.Json.Nodes;
using System.Text.Json.Serialization;
using System.Linq;
using FhirCore.Base;
using DataTypeServices.TypeFramework;
using DataTypeServices.DataTypes.MetaTypes;
namespace FhirSDK.Resources.R5
{
    /// <summary>
    /// A medicinal product in the final form, suitable for administration - after any mixing of multiple components
    /// </summary>
    public partial class AdministrableProductDefinition : ResourceBase
    {
        public override string ResourceType => "AdministrableProductDefinition";

        public AdministrableProductDefinition() { }
        public AdministrableProductDefinition(string json) { SetRawFrom(JsonNode.Parse(json)); }
        public AdministrableProductDefinition(JsonNode? source) { SetRawFrom(source); }
        protected override void OnPropertyChanged(string propertyName, object? newValue) { base.OnPropertyChanged(propertyName, newValue); }

        private CodeableConcept? _administrableDoseForm;
        [JsonPropertyName("administrableDoseForm")]
        public CodeableConcept? AdministrableDoseForm { get => _administrableDoseForm; set { _administrableDoseForm = value; OnPropertyChangedByClr(nameof(AdministrableDoseForm), value); } }

        private List<Resource>? _contained;
        [JsonPropertyName("contained")]
        public List<Resource>? Contained { get => _contained; set { _contained = value; OnPropertyChangedByClr(nameof(Contained), value); } }

        private FhirMarkdown? _description;
        [JsonPropertyName("description")]
        public FhirMarkdown? Description { get => _description; set { _description = value; OnPropertyChangedByClr(nameof(Description), value); } }

        private ReferenceType? _device;
        [JsonPropertyName("device")]
        public ReferenceType? Device { get => _device; set { _device = value; OnPropertyChangedByClr(nameof(Device), value); } }

        private List<ReferenceType>? _formOf;
        [JsonPropertyName("formOf")]
        public List<ReferenceType>? FormOf { get => _formOf; set { _formOf = value; OnPropertyChangedByClr(nameof(FormOf), value); } }

        private List<Identifier>? _identifier;
        [JsonPropertyName("identifier")]
        public List<Identifier>? Identifier { get => _identifier; set { _identifier = value; OnPropertyChangedByClr(nameof(Identifier), value); } }

        private List<CodeableConcept>? _ingredient;
        [JsonPropertyName("ingredient")]
        public List<CodeableConcept>? Ingredient { get => _ingredient; set { _ingredient = value; OnPropertyChangedByClr(nameof(Ingredient), value); } }

        private List<ReferenceType>? _producedFrom;
        [JsonPropertyName("producedFrom")]
        public List<ReferenceType>? ProducedFrom { get => _producedFrom; set { _producedFrom = value; OnPropertyChangedByClr(nameof(ProducedFrom), value); } }

        private List<AdministrableProductDefinition_Property>? _property;
        [JsonPropertyName("property")]
        public List<AdministrableProductDefinition_Property>? Property { get => _property; set { _property = value; OnPropertyChangedByClr(nameof(Property), value); } }

        /// <summary>
        /// Characteristics e.g. a product's onset of action
        /// </summary>
        public partial class AdministrableProductDefinition_Property : BackboneElement<AdministrableProductDefinition_Property>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "AdministrableProductDefinition_Property" : "administrableProductDefinition_Property";
            private CodeableConcept? _status;
        [JsonPropertyName("status")]
        public CodeableConcept? Status { get => _status; set { _status = value; } }

            private CodeableConcept? _type;
        [JsonPropertyName("type")]
        public CodeableConcept Type { get => _type ?? throw new InvalidOperationException("Type is required"); set { _type = value; } }

            private CodeableConcept? _valueCodeableConcept;
        [JsonPropertyName("valueCodeableConcept")]
        public CodeableConcept? ValueCodeableConcept { get => _valueCodeableConcept; set { _valueCodeableConcept = value; if (value != null) {{ _valueQuantity = null; OnPropertyChanged("valueQuantity", null); _valuedate = null; OnPropertyChanged("valuedate", null); _valueBoolean = null; OnPropertyChanged("valueBoolean", null); _valuemarkdown = null; OnPropertyChanged("valuemarkdown", null); _valueAttachment = null; OnPropertyChanged("valueAttachment", null); _valueReference = null; OnPropertyChanged("valueReference", null); }}; OnPropertyChanged("valueCodeableConcept", value); } }

            private Quantity? _valueQuantity;
        [JsonPropertyName("valueQuantity")]
        public Quantity? ValueQuantity { get => _valueQuantity; set { _valueQuantity = value; if (value != null) {{ _valueCodeableConcept = null; OnPropertyChanged("valueCodeableConcept", null); _valuedate = null; OnPropertyChanged("valuedate", null); _valueBoolean = null; OnPropertyChanged("valueBoolean", null); _valuemarkdown = null; OnPropertyChanged("valuemarkdown", null); _valueAttachment = null; OnPropertyChanged("valueAttachment", null); _valueReference = null; OnPropertyChanged("valueReference", null); }}; OnPropertyChanged("valueQuantity", value); } }

            private FhirDate? _valuedate;
        [JsonPropertyName("valuedate")]
        public FhirDate? Valuedate { get => _valuedate; set { _valuedate = value; if (value != null) {{ _valueCodeableConcept = null; OnPropertyChanged("valueCodeableConcept", null); _valueQuantity = null; OnPropertyChanged("valueQuantity", null); _valueBoolean = null; OnPropertyChanged("valueBoolean", null); _valuemarkdown = null; OnPropertyChanged("valuemarkdown", null); _valueAttachment = null; OnPropertyChanged("valueAttachment", null); _valueReference = null; OnPropertyChanged("valueReference", null); }}; OnPropertyChanged("valuedate", value); } }

            private FhirBoolean? _valueBoolean;
        [JsonPropertyName("valueBoolean")]
        public FhirBoolean? ValueBoolean { get => _valueBoolean; set { _valueBoolean = value; if (value != null) {{ _valueCodeableConcept = null; OnPropertyChanged("valueCodeableConcept", null); _valueQuantity = null; OnPropertyChanged("valueQuantity", null); _valuedate = null; OnPropertyChanged("valuedate", null); _valuemarkdown = null; OnPropertyChanged("valuemarkdown", null); _valueAttachment = null; OnPropertyChanged("valueAttachment", null); _valueReference = null; OnPropertyChanged("valueReference", null); }}; OnPropertyChanged("valueBoolean", value); } }

            private FhirMarkdown? _valuemarkdown;
        [JsonPropertyName("valuemarkdown")]
        public FhirMarkdown? Valuemarkdown { get => _valuemarkdown; set { _valuemarkdown = value; if (value != null) {{ _valueCodeableConcept = null; OnPropertyChanged("valueCodeableConcept", null); _valueQuantity = null; OnPropertyChanged("valueQuantity", null); _valuedate = null; OnPropertyChanged("valuedate", null); _valueBoolean = null; OnPropertyChanged("valueBoolean", null); _valueAttachment = null; OnPropertyChanged("valueAttachment", null); _valueReference = null; OnPropertyChanged("valueReference", null); }}; OnPropertyChanged("valuemarkdown", value); } }

            private Attachment? _valueAttachment;
        [JsonPropertyName("valueAttachment")]
        public Attachment? ValueAttachment { get => _valueAttachment; set { _valueAttachment = value; if (value != null) {{ _valueCodeableConcept = null; OnPropertyChanged("valueCodeableConcept", null); _valueQuantity = null; OnPropertyChanged("valueQuantity", null); _valuedate = null; OnPropertyChanged("valuedate", null); _valueBoolean = null; OnPropertyChanged("valueBoolean", null); _valuemarkdown = null; OnPropertyChanged("valuemarkdown", null); _valueReference = null; OnPropertyChanged("valueReference", null); }}; OnPropertyChanged("valueAttachment", value); } }

            private ReferenceType? _valueReference;
        [JsonPropertyName("valueReference")]
        public ReferenceType? ValueReference { get => _valueReference; set { _valueReference = value; if (value != null) {{ _valueCodeableConcept = null; OnPropertyChanged("valueCodeableConcept", null); _valueQuantity = null; OnPropertyChanged("valueQuantity", null); _valuedate = null; OnPropertyChanged("valuedate", null); _valueBoolean = null; OnPropertyChanged("valueBoolean", null); _valuemarkdown = null; OnPropertyChanged("valuemarkdown", null); _valueAttachment = null; OnPropertyChanged("valueAttachment", null); }}; OnPropertyChanged("valueReference", value); } }

        }

        private List<AdministrableProductDefinition_RouteOfAdministration> _routeOfAdministration = new();
        [JsonPropertyName("routeOfAdministration")]
        public List<AdministrableProductDefinition_RouteOfAdministration> RouteOfAdministration { get => _routeOfAdministration; set { _routeOfAdministration = value; OnPropertyChangedByClr(nameof(RouteOfAdministration), value); } }

        /// <summary>
        /// The path by which the product is taken into or makes contact with the body
        /// </summary>
        public partial class AdministrableProductDefinition_RouteOfAdministration : BackboneElement<AdministrableProductDefinition_RouteOfAdministration>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "AdministrableProductDefinition_RouteOfAdministration" : "administrableProductDefinition_RouteOfAdministration";
            private CodeableConcept? _code;
        [JsonPropertyName("code")]
        public CodeableConcept Code { get => _code ?? throw new InvalidOperationException("Code is required"); set { _code = value; } }

            private Quantity? _firstDose;
        [JsonPropertyName("firstDose")]
        public Quantity? FirstDose { get => _firstDose; set { _firstDose = value; } }

            private Quantity? _maxDosePerDay;
        [JsonPropertyName("maxDosePerDay")]
        public Quantity? MaxDosePerDay { get => _maxDosePerDay; set { _maxDosePerDay = value; } }

            private Ratio? _maxDosePerTreatmentPeriod;
        [JsonPropertyName("maxDosePerTreatmentPeriod")]
        public Ratio? MaxDosePerTreatmentPeriod { get => _maxDosePerTreatmentPeriod; set { _maxDosePerTreatmentPeriod = value; } }

            private Quantity? _maxSingleDose;
        [JsonPropertyName("maxSingleDose")]
        public Quantity? MaxSingleDose { get => _maxSingleDose; set { _maxSingleDose = value; } }

            private Duration? _maxTreatmentPeriod;
        [JsonPropertyName("maxTreatmentPeriod")]
        public Duration? MaxTreatmentPeriod { get => _maxTreatmentPeriod; set { _maxTreatmentPeriod = value; } }

            private List<AdministrableProductDefinition_RouteOfAdministration_TargetSpecies>? _targetSpecies;
        [JsonPropertyName("targetSpecies")]
        public List<AdministrableProductDefinition_RouteOfAdministration_TargetSpecies>? TargetSpecies { get => _targetSpecies; set { _targetSpecies = value; } }

            /// <summary>
            /// A species for which this route applies
            /// </summary>
            public partial class AdministrableProductDefinition_RouteOfAdministration_TargetSpecies : BackboneElement<AdministrableProductDefinition_RouteOfAdministration_TargetSpecies>
            {
                public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "AdministrableProductDefinition_RouteOfAdministration_TargetSpecies" : "administrableProductDefinition_RouteOfAdministration_TargetSpecies";
                private CodeableConcept? _code;
        [JsonPropertyName("code")]
        public CodeableConcept Code { get => _code ?? throw new InvalidOperationException("Code is required"); set { _code = value; } }

                private List<AdministrableProductDefinition_RouteOfAdministration_TargetSpecies_WithdrawalPeriod>? _withdrawalPeriod;
        [JsonPropertyName("withdrawalPeriod")]
        public List<AdministrableProductDefinition_RouteOfAdministration_TargetSpecies_WithdrawalPeriod>? WithdrawalPeriod { get => _withdrawalPeriod; set { _withdrawalPeriod = value; } }

                /// <summary>
                /// A species specific time during which consumption of animal product is not appropriate
                /// </summary>
                public partial class AdministrableProductDefinition_RouteOfAdministration_TargetSpecies_WithdrawalPeriod : BackboneElement<AdministrableProductDefinition_RouteOfAdministration_TargetSpecies_WithdrawalPeriod>
                {
                    public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "AdministrableProductDefinition_RouteOfAdministration_TargetSpecies_WithdrawalPeriod" : "administrableProductDefinition_RouteOfAdministration_TargetSpecies_WithdrawalPeriod";
                    private FhirString? _supportingInformation;
        [JsonPropertyName("supportingInformation")]
        public FhirString? SupportingInformation { get => _supportingInformation; set { _supportingInformation = value; } }

                    private CodeableConcept? _tissue;
        [JsonPropertyName("tissue")]
        public CodeableConcept Tissue { get => _tissue ?? throw new InvalidOperationException("Tissue is required"); set { _tissue = value; } }

                    private Quantity? _value;
        [JsonPropertyName("value")]
        public Quantity Value { get => _value ?? throw new InvalidOperationException("Value is required"); set { _value = value; } }

                }

            }

        }

        private FhirCode? _status;
        [JsonPropertyName("status")]
        public FhirCode Status { get => _status ?? throw new InvalidOperationException("Status is required"); set { _status = value; OnPropertyChangedByClr(nameof(Status), value); } }

        private Narrative? _text;
        [JsonPropertyName("text")]
        public Narrative? Text { get => _text; set { _text = value; OnPropertyChangedByClr(nameof(Text), value); } }

        private CodeableConcept? _unitOfPresentation;
        [JsonPropertyName("unitOfPresentation")]
        public CodeableConcept? UnitOfPresentation { get => _unitOfPresentation; set { _unitOfPresentation = value; OnPropertyChangedByClr(nameof(UnitOfPresentation), value); } }

    }
}
