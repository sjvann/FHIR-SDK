// <auto-generated>
#nullable enable
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
using System.Text.Json.Nodes;
using System.Text.Json.Serialization;
using System.Linq;
using FhirCore.Base;
using DataTypeServices.TypeFramework;
using DataTypeServices.DataTypes.MetaTypes;
namespace FhirSDK.Resources.R5
{
    /// <summary>
    /// A record of dispensation of a device
    /// </summary>
    public partial class DeviceDispense : ResourceBase
    {
        public override string ResourceType => "DeviceDispense";

        public DeviceDispense() { }
        public DeviceDispense(string json) { SetRawFrom(JsonNode.Parse(json)); }
        public DeviceDispense(JsonNode? source) { SetRawFrom(source); }
        protected override void OnPropertyChanged(string propertyName, object? newValue) { base.OnPropertyChanged(propertyName, newValue); }

        private List<ReferenceType>? _basedOn;
        [JsonPropertyName("basedOn")]
        public List<ReferenceType>? BasedOn { get => _basedOn; set { _basedOn = value; OnPropertyChangedByClr(nameof(BasedOn), value); } }

        private List<CodeableConcept>? _category;
        [JsonPropertyName("category")]
        public List<CodeableConcept>? Category { get => _category; set { _category = value; OnPropertyChangedByClr(nameof(Category), value); } }

        private List<Resource>? _contained;
        [JsonPropertyName("contained")]
        public List<Resource>? Contained { get => _contained; set { _contained = value; OnPropertyChangedByClr(nameof(Contained), value); } }

        private ReferenceType? _destination;
        [JsonPropertyName("destination")]
        public ReferenceType? Destination { get => _destination; set { _destination = value; OnPropertyChangedByClr(nameof(Destination), value); } }

        private CodeableReference? _device;
        [JsonPropertyName("device")]
        public CodeableReference Device { get => _device ?? throw new InvalidOperationException("Device is required"); set { _device = value; OnPropertyChangedByClr(nameof(Device), value); } }

        private ReferenceType? _encounter;
        [JsonPropertyName("encounter")]
        public ReferenceType? Encounter { get => _encounter; set { _encounter = value; OnPropertyChangedByClr(nameof(Encounter), value); } }

        private List<ReferenceType>? _eventHistory;
        [JsonPropertyName("eventHistory")]
        public List<ReferenceType>? EventHistory { get => _eventHistory; set { _eventHistory = value; OnPropertyChangedByClr(nameof(EventHistory), value); } }

        private List<Identifier>? _identifier;
        [JsonPropertyName("identifier")]
        public List<Identifier>? Identifier { get => _identifier; set { _identifier = value; OnPropertyChangedByClr(nameof(Identifier), value); } }

        private ReferenceType? _location;
        [JsonPropertyName("location")]
        public ReferenceType? Location { get => _location; set { _location = value; OnPropertyChangedByClr(nameof(Location), value); } }

        private List<Annotation>? _note;
        [JsonPropertyName("note")]
        public List<Annotation>? Note { get => _note; set { _note = value; OnPropertyChangedByClr(nameof(Note), value); } }

        private List<ReferenceType>? _partOf;
        [JsonPropertyName("partOf")]
        public List<ReferenceType>? PartOf { get => _partOf; set { _partOf = value; OnPropertyChangedByClr(nameof(PartOf), value); } }

        private List<DeviceDispense_Performer>? _performer;
        [JsonPropertyName("performer")]
        public List<DeviceDispense_Performer>? Performer { get => _performer; set { _performer = value; OnPropertyChangedByClr(nameof(Performer), value); } }

        /// <summary>
        /// Who performed event
        /// </summary>
        public partial class DeviceDispense_Performer : BackboneElement<DeviceDispense_Performer>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "DeviceDispense_Performer" : "deviceDispense_Performer";
            private ReferenceType? _actor;
        [JsonPropertyName("actor")]
        public ReferenceType Actor { get => _actor ?? throw new InvalidOperationException("Actor is required"); set { _actor = value; } }

            private CodeableConcept? _function;
        [JsonPropertyName("function")]
        public CodeableConcept? Function { get => _function; set { _function = value; } }

        }

        private FhirDateTime? _preparedDate;
        [JsonPropertyName("preparedDate")]
        public FhirDateTime? PreparedDate { get => _preparedDate; set { _preparedDate = value; OnPropertyChangedByClr(nameof(PreparedDate), value); } }

        private Quantity? _quantity;
        [JsonPropertyName("quantity")]
        public Quantity? Quantity { get => _quantity; set { _quantity = value; OnPropertyChangedByClr(nameof(Quantity), value); } }

        private ReferenceType? _receiver;
        [JsonPropertyName("receiver")]
        public ReferenceType? Receiver { get => _receiver; set { _receiver = value; OnPropertyChangedByClr(nameof(Receiver), value); } }

        private FhirCode? _status;
        [JsonPropertyName("status")]
        public FhirCode Status { get => _status ?? throw new InvalidOperationException("Status is required"); set { _status = value; OnPropertyChangedByClr(nameof(Status), value); } }

        private CodeableReference? _statusReason;
        [JsonPropertyName("statusReason")]
        public CodeableReference? StatusReason { get => _statusReason; set { _statusReason = value; OnPropertyChangedByClr(nameof(StatusReason), value); } }

        private ReferenceType? _subject;
        [JsonPropertyName("subject")]
        public ReferenceType Subject { get => _subject ?? throw new InvalidOperationException("Subject is required"); set { _subject = value; OnPropertyChangedByClr(nameof(Subject), value); } }

        private List<ReferenceType>? _supportingInformation;
        [JsonPropertyName("supportingInformation")]
        public List<ReferenceType>? SupportingInformation { get => _supportingInformation; set { _supportingInformation = value; OnPropertyChangedByClr(nameof(SupportingInformation), value); } }

        private Narrative? _text;
        [JsonPropertyName("text")]
        public Narrative? Text { get => _text; set { _text = value; OnPropertyChangedByClr(nameof(Text), value); } }

        private CodeableConcept? _type;
        [JsonPropertyName("type")]
        public CodeableConcept? Type { get => _type; set { _type = value; OnPropertyChangedByClr(nameof(Type), value); } }

        private FhirMarkdown? _usageInstruction;
        [JsonPropertyName("usageInstruction")]
        public FhirMarkdown? UsageInstruction { get => _usageInstruction; set { _usageInstruction = value; OnPropertyChangedByClr(nameof(UsageInstruction), value); } }

        private FhirDateTime? _whenHandedOver;
        [JsonPropertyName("whenHandedOver")]
        public FhirDateTime? WhenHandedOver { get => _whenHandedOver; set { _whenHandedOver = value; OnPropertyChangedByClr(nameof(WhenHandedOver), value); } }

    }
}
