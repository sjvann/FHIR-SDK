// <auto-generated>
#nullable enable
using System.Collections.Generic;
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
namespace FhirSDK.Resources.R5
{
    public static class DetectedIssueFluentExtensions
    {
        public static DetectedIssue WithAuthor(this DetectedIssue r, ReferenceType value) { r.Author = value; return r; }
        public static DetectedIssue AddCategory(this DetectedIssue r, CodeableConcept item) { r.Category ??= new List<CodeableConcept>(); r.Category!.Add(item); return r; }
        public static DetectedIssue WithCode(this DetectedIssue r, CodeableConcept value) { r.Code = value; return r; }
        public static DetectedIssue AddContained(this DetectedIssue r, Resource item) { r.Contained ??= new List<Resource>(); r.Contained!.Add(item); return r; }
        public static DetectedIssue WithDetail(this DetectedIssue r, FhirMarkdown value) { r.Detail = value; return r; }
        public static DetectedIssue WithEncounter(this DetectedIssue r, ReferenceType value) { r.Encounter = value; return r; }
        public static DetectedIssue AddEvidence(this DetectedIssue r, BackboneElement item) { r.Evidence ??= new List<BackboneElement>(); r.Evidence!.Add(item); return r; }
        public static DetectedIssue WithIdentifiedDateTime(this DetectedIssue r, FhirDateTime value) { r.IdentifiedDateTime = value; return r; }
        public static DetectedIssue WithIdentifiedPeriod(this DetectedIssue r, Period value) { r.IdentifiedPeriod = value; return r; }
        public static DetectedIssue AddIdentifier(this DetectedIssue r, Identifier item) { r.Identifier ??= new List<Identifier>(); r.Identifier!.Add(item); return r; }
        public static DetectedIssue AddImplicated(this DetectedIssue r, ReferenceType item) { r.Implicated ??= new List<ReferenceType>(); r.Implicated!.Add(item); return r; }
        public static DetectedIssue AddMitigation(this DetectedIssue r, BackboneElement item) { r.Mitigation ??= new List<BackboneElement>(); r.Mitigation!.Add(item); return r; }
        public static DetectedIssue WithReference(this DetectedIssue r, FhirUri value) { r.Reference = value; return r; }
        public static DetectedIssue WithSeverity(this DetectedIssue r, FhirCode value) { r.Severity = value; return r; }
        public static DetectedIssue WithStatus(this DetectedIssue r, FhirCode value) { r.Status = value; return r; }
        public static DetectedIssue WithSubject(this DetectedIssue r, ReferenceType value) { r.Subject = value; return r; }
        public static DetectedIssue WithText(this DetectedIssue r, Narrative value) { r.Text = value; return r; }
    }
}
