// <auto-generated>
#nullable enable
using System.Collections.Generic;
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
namespace FhirSDK.Resources.R5
{
    public static class MedicationStatementFluentExtensions
    {
        public static MedicationStatement WithAdherence(this MedicationStatement r, BackboneElement value) { r.Adherence = value; return r; }
        public static MedicationStatement AddCategory(this MedicationStatement r, CodeableConcept item) { r.Category ??= new List<CodeableConcept>(); r.Category!.Add(item); return r; }
        public static MedicationStatement AddContained(this MedicationStatement r, Resource item) { r.Contained ??= new List<Resource>(); r.Contained!.Add(item); return r; }
        public static MedicationStatement WithDateAsserted(this MedicationStatement r, FhirDateTime value) { r.DateAsserted = value; return r; }
        public static MedicationStatement AddDerivedFrom(this MedicationStatement r, ReferenceType item) { r.DerivedFrom ??= new List<ReferenceType>(); r.DerivedFrom!.Add(item); return r; }
        public static MedicationStatement AddDosage(this MedicationStatement r, Dosage item) { r.Dosage ??= new List<Dosage>(); r.Dosage!.Add(item); return r; }
        public static MedicationStatement WithEffectiveDateTime(this MedicationStatement r, FhirDateTime value) { r.EffectiveDateTime = value; return r; }
        public static MedicationStatement WithEffectivePeriod(this MedicationStatement r, Period value) { r.EffectivePeriod = value; return r; }
        public static MedicationStatement WithEffectiveTiming(this MedicationStatement r, Timing value) { r.EffectiveTiming = value; return r; }
        public static MedicationStatement WithEncounter(this MedicationStatement r, ReferenceType value) { r.Encounter = value; return r; }
        public static MedicationStatement AddIdentifier(this MedicationStatement r, Identifier item) { r.Identifier ??= new List<Identifier>(); r.Identifier!.Add(item); return r; }
        public static MedicationStatement AddInformationSource(this MedicationStatement r, ReferenceType item) { r.InformationSource ??= new List<ReferenceType>(); r.InformationSource!.Add(item); return r; }
        public static MedicationStatement WithMedication(this MedicationStatement r, CodeableReference value) { r.Medication = value; return r; }
        public static MedicationStatement AddNote(this MedicationStatement r, Annotation item) { r.Note ??= new List<Annotation>(); r.Note!.Add(item); return r; }
        public static MedicationStatement AddPartOf(this MedicationStatement r, ReferenceType item) { r.PartOf ??= new List<ReferenceType>(); r.PartOf!.Add(item); return r; }
        public static MedicationStatement AddReason(this MedicationStatement r, CodeableReference item) { r.Reason ??= new List<CodeableReference>(); r.Reason!.Add(item); return r; }
        public static MedicationStatement AddRelatedClinicalInformation(this MedicationStatement r, ReferenceType item) { r.RelatedClinicalInformation ??= new List<ReferenceType>(); r.RelatedClinicalInformation!.Add(item); return r; }
        public static MedicationStatement WithRenderedDosageInstruction(this MedicationStatement r, FhirMarkdown value) { r.RenderedDosageInstruction = value; return r; }
        public static MedicationStatement WithStatus(this MedicationStatement r, FhirCode value) { r.Status = value; return r; }
        public static MedicationStatement WithSubject(this MedicationStatement r, ReferenceType value) { r.Subject = value; return r; }
        public static MedicationStatement WithText(this MedicationStatement r, Narrative value) { r.Text = value; return r; }
    }
}
