// <auto-generated>
#nullable enable
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
using System.Text.Json.Nodes;
using System.Text.Json.Serialization;
using System.Linq;
using FhirCore.Base;
using DataTypeServices.TypeFramework;
using DataTypeServices.DataTypes.MetaTypes;
namespace FhirSDK.Resources.R5
{
    /// <summary>
    /// A homogeneous material with a definite composition
    /// </summary>
    public partial class Substance : ResourceBase
    {
        public override string ResourceType => "Substance";

        public Substance() { }
        public Substance(string json) { SetRawFrom(JsonNode.Parse(json)); }
        public Substance(JsonNode? source) { SetRawFrom(source); }
        protected override void OnPropertyChanged(string propertyName, object? newValue) { base.OnPropertyChanged(propertyName, newValue); }

        private List<CodeableConcept>? _category;
        [JsonPropertyName("category")]
        public List<CodeableConcept>? Category { get => _category; set { _category = value; OnPropertyChangedByClr(nameof(Category), value); } }

        private CodeableReference? _code;
        [JsonPropertyName("code")]
        public CodeableReference Code { get => _code ?? throw new InvalidOperationException("Code is required"); set { _code = value; OnPropertyChangedByClr(nameof(Code), value); } }

        private List<Resource>? _contained;
        [JsonPropertyName("contained")]
        public List<Resource>? Contained { get => _contained; set { _contained = value; OnPropertyChangedByClr(nameof(Contained), value); } }

        private FhirMarkdown? _description;
        [JsonPropertyName("description")]
        public FhirMarkdown? Description { get => _description; set { _description = value; OnPropertyChangedByClr(nameof(Description), value); } }

        private FhirDateTime? _expiry;
        [JsonPropertyName("expiry")]
        public FhirDateTime? Expiry { get => _expiry; set { _expiry = value; OnPropertyChangedByClr(nameof(Expiry), value); } }

        private List<Identifier>? _identifier;
        [JsonPropertyName("identifier")]
        public List<Identifier>? Identifier { get => _identifier; set { _identifier = value; OnPropertyChangedByClr(nameof(Identifier), value); } }

        private List<Substance_Ingredient>? _ingredient;
        [JsonPropertyName("ingredient")]
        public List<Substance_Ingredient>? Ingredient { get => _ingredient; set { _ingredient = value; OnPropertyChangedByClr(nameof(Ingredient), value); } }

        /// <summary>
        /// Composition information about the substance
        /// </summary>
        public partial class Substance_Ingredient : BackboneElement<Substance_Ingredient>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "Substance_Ingredient" : "substance_Ingredient";
            private Ratio? _quantity;
        [JsonPropertyName("quantity")]
        public Ratio? Quantity { get => _quantity; set { _quantity = value; } }

            private CodeableConcept? _substanceCodeableConcept;
        [JsonPropertyName("substanceCodeableConcept")]
        public CodeableConcept? SubstanceCodeableConcept { get => _substanceCodeableConcept; set { _substanceCodeableConcept = value; if (value != null) {{ _substanceReference = null; OnPropertyChanged("substanceReference", null); }}; OnPropertyChanged("substanceCodeableConcept", value); } }

            private ReferenceType? _substanceReference;
        [JsonPropertyName("substanceReference")]
        public ReferenceType? SubstanceReference { get => _substanceReference; set { _substanceReference = value; if (value != null) {{ _substanceCodeableConcept = null; OnPropertyChanged("substanceCodeableConcept", null); }}; OnPropertyChanged("substanceReference", value); } }

        }

        private FhirBoolean? _instance;
        [JsonPropertyName("instance")]
        public FhirBoolean Instance { get => _instance ?? throw new InvalidOperationException("Instance is required"); set { _instance = value; OnPropertyChangedByClr(nameof(Instance), value); } }

        private Quantity? _quantity;
        [JsonPropertyName("quantity")]
        public Quantity? Quantity { get => _quantity; set { _quantity = value; OnPropertyChangedByClr(nameof(Quantity), value); } }

        private FhirCode? _status;
        [JsonPropertyName("status")]
        public FhirCode? Status { get => _status; set { _status = value; OnPropertyChangedByClr(nameof(Status), value); } }

        private Narrative? _text;
        [JsonPropertyName("text")]
        public Narrative? Text { get => _text; set { _text = value; OnPropertyChangedByClr(nameof(Text), value); } }

    }
}
