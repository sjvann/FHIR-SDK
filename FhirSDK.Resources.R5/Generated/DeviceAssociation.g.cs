// <auto-generated>
#nullable enable
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
using System.Text.Json.Nodes;
using System.Text.Json.Serialization;
using System.Linq;
using FhirCore.Base;
using DataTypeServices.TypeFramework;
using DataTypeServices.DataTypes.MetaTypes;
namespace FhirSDK.Resources.R5
{
    /// <summary>
    /// A record of association or dissociation of a device with a patient
    /// </summary>
    public partial class DeviceAssociation : ResourceBase
    {
        public override string ResourceType => "DeviceAssociation";

        public DeviceAssociation() { }
        public DeviceAssociation(string json) { SetRawFrom(JsonNode.Parse(json)); }
        public DeviceAssociation(JsonNode? source) { SetRawFrom(source); }
        protected override void OnPropertyChanged(string propertyName, object? newValue) { base.OnPropertyChanged(propertyName, newValue); }

        private ReferenceType? _bodyStructure;
        [JsonPropertyName("bodyStructure")]
        public ReferenceType? BodyStructure { get => _bodyStructure; set { _bodyStructure = value; OnPropertyChangedByClr(nameof(BodyStructure), value); } }

        private List<CodeableConcept>? _category;
        [JsonPropertyName("category")]
        public List<CodeableConcept>? Category { get => _category; set { _category = value; OnPropertyChangedByClr(nameof(Category), value); } }

        private List<Resource>? _contained;
        [JsonPropertyName("contained")]
        public List<Resource>? Contained { get => _contained; set { _contained = value; OnPropertyChangedByClr(nameof(Contained), value); } }

        private ReferenceType? _device;
        [JsonPropertyName("device")]
        public ReferenceType Device { get => _device ?? throw new InvalidOperationException("Device is required"); set { _device = value; OnPropertyChangedByClr(nameof(Device), value); } }

        private List<Identifier>? _identifier;
        [JsonPropertyName("identifier")]
        public List<Identifier>? Identifier { get => _identifier; set { _identifier = value; OnPropertyChangedByClr(nameof(Identifier), value); } }

        private List<DeviceAssociation_Operation>? _operation;
        [JsonPropertyName("operation")]
        public List<DeviceAssociation_Operation>? Operation { get => _operation; set { _operation = value; OnPropertyChangedByClr(nameof(Operation), value); } }

        /// <summary>
        /// The details about the device when it is in use to describe its operation
        /// </summary>
        public partial class DeviceAssociation_Operation : BackboneElement<DeviceAssociation_Operation>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "DeviceAssociation_Operation" : "deviceAssociation_Operation";
            private List<ReferenceType>? _operator;
        [JsonPropertyName("operator")]
        public List<ReferenceType>? Operator { get => _operator; set { _operator = value; } }

            private Period? _period;
        [JsonPropertyName("period")]
        public Period? Period { get => _period; set { _period = value; } }

            private CodeableConcept? _status;
        [JsonPropertyName("status")]
        public CodeableConcept Status { get => _status ?? throw new InvalidOperationException("Status is required"); set { _status = value; } }

        }

        private Period? _period;
        [JsonPropertyName("period")]
        public Period? Period { get => _period; set { _period = value; OnPropertyChangedByClr(nameof(Period), value); } }

        private CodeableConcept? _status;
        [JsonPropertyName("status")]
        public CodeableConcept Status { get => _status ?? throw new InvalidOperationException("Status is required"); set { _status = value; OnPropertyChangedByClr(nameof(Status), value); } }

        private List<CodeableConcept>? _statusReason;
        [JsonPropertyName("statusReason")]
        public List<CodeableConcept>? StatusReason { get => _statusReason; set { _statusReason = value; OnPropertyChangedByClr(nameof(StatusReason), value); } }

        private ReferenceType? _subject;
        [JsonPropertyName("subject")]
        public ReferenceType? Subject { get => _subject; set { _subject = value; OnPropertyChangedByClr(nameof(Subject), value); } }

        private Narrative? _text;
        [JsonPropertyName("text")]
        public Narrative? Text { get => _text; set { _text = value; OnPropertyChangedByClr(nameof(Text), value); } }

    }
}
