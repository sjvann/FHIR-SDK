// <auto-generated>
#nullable enable
using System.Collections.Generic;
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
namespace FhirSDK.Resources.R5
{
    public static class TestPlanFluentExtensions
    {
        public static TestPlan AddCategory(this TestPlan r, CodeableConcept item) { r.Category ??= new List<CodeableConcept>(); r.Category!.Add(item); return r; }
        public static TestPlan AddContact(this TestPlan r, ContactDetail item) { r.Contact ??= new List<ContactDetail>(); r.Contact!.Add(item); return r; }
        public static TestPlan AddContained(this TestPlan r, Resource item) { r.Contained ??= new List<Resource>(); r.Contained!.Add(item); return r; }
        public static TestPlan WithCopyright(this TestPlan r, FhirMarkdown value) { r.Copyright = value; return r; }
        public static TestPlan WithCopyrightLabel(this TestPlan r, FhirString value) { r.CopyrightLabel = value; return r; }
        public static TestPlan WithDate(this TestPlan r, FhirDateTime value) { r.Date = value; return r; }
        public static TestPlan AddDependency(this TestPlan r, BackboneElement item) { r.Dependency ??= new List<BackboneElement>(); r.Dependency!.Add(item); return r; }
        public static TestPlan WithDescription(this TestPlan r, FhirMarkdown value) { r.Description = value; return r; }
        public static TestPlan WithExitCriteria(this TestPlan r, FhirMarkdown value) { r.ExitCriteria = value; return r; }
        public static TestPlan WithExperimental(this TestPlan r, FhirBoolean value) { r.Experimental = value; return r; }
        public static TestPlan AddIdentifier(this TestPlan r, Identifier item) { r.Identifier ??= new List<Identifier>(); r.Identifier!.Add(item); return r; }
        public static TestPlan AddJurisdiction(this TestPlan r, CodeableConcept item) { r.Jurisdiction ??= new List<CodeableConcept>(); r.Jurisdiction!.Add(item); return r; }
        public static TestPlan WithName(this TestPlan r, FhirString value) { r.Name = value; return r; }
        public static TestPlan WithPublisher(this TestPlan r, FhirString value) { r.Publisher = value; return r; }
        public static TestPlan WithPurpose(this TestPlan r, FhirMarkdown value) { r.Purpose = value; return r; }
        public static TestPlan AddScope(this TestPlan r, ReferenceType item) { r.Scope ??= new List<ReferenceType>(); r.Scope!.Add(item); return r; }
        public static TestPlan WithStatus(this TestPlan r, FhirCode value) { r.Status = value; return r; }
        public static TestPlan AddTestCase(this TestPlan r, BackboneElement item) { r.TestCase ??= new List<BackboneElement>(); r.TestCase!.Add(item); return r; }
        public static TestPlan WithTestTools(this TestPlan r, FhirMarkdown value) { r.TestTools = value; return r; }
        public static TestPlan WithText(this TestPlan r, Narrative value) { r.Text = value; return r; }
        public static TestPlan WithTitle(this TestPlan r, FhirString value) { r.Title = value; return r; }
        public static TestPlan WithUrl(this TestPlan r, FhirUri value) { r.Url = value; return r; }
        public static TestPlan AddUseContext(this TestPlan r, UsageContext item) { r.UseContext ??= new List<UsageContext>(); r.UseContext!.Add(item); return r; }
        public static TestPlan WithVersion(this TestPlan r, FhirString value) { r.Version = value; return r; }
        public static TestPlan WithVersionAlgorithmString(this TestPlan r, FhirString value) { r.VersionAlgorithmString = value; return r; }
        public static TestPlan WithVersionAlgorithmCoding(this TestPlan r, Coding value) { r.VersionAlgorithmCoding = value; return r; }
    }
}
