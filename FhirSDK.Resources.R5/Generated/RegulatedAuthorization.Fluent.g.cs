// <auto-generated>
#nullable enable
using System.Collections.Generic;
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
namespace FhirSDK.Resources.R5
{
    public static class RegulatedAuthorizationFluentExtensions
    {
        public static RegulatedAuthorization AddAttachedDocument(this RegulatedAuthorization r, ReferenceType item) { r.AttachedDocument ??= new List<ReferenceType>(); r.AttachedDocument!.Add(item); return r; }
        public static RegulatedAuthorization AddBasis(this RegulatedAuthorization r, CodeableConcept item) { r.Basis ??= new List<CodeableConcept>(); r.Basis!.Add(item); return r; }
        public static RegulatedAuthorization WithCase(this RegulatedAuthorization r, BackboneElement value) { r.Case = value; return r; }
        public static RegulatedAuthorization AddContained(this RegulatedAuthorization r, Resource item) { r.Contained ??= new List<Resource>(); r.Contained!.Add(item); return r; }
        public static RegulatedAuthorization WithDescription(this RegulatedAuthorization r, FhirMarkdown value) { r.Description = value; return r; }
        public static RegulatedAuthorization WithHolder(this RegulatedAuthorization r, ReferenceType value) { r.Holder = value; return r; }
        public static RegulatedAuthorization AddIdentifier(this RegulatedAuthorization r, Identifier item) { r.Identifier ??= new List<Identifier>(); r.Identifier!.Add(item); return r; }
        public static RegulatedAuthorization AddIndication(this RegulatedAuthorization r, CodeableReference item) { r.Indication ??= new List<CodeableReference>(); r.Indication!.Add(item); return r; }
        public static RegulatedAuthorization WithIntendedUse(this RegulatedAuthorization r, CodeableConcept value) { r.IntendedUse = value; return r; }
        public static RegulatedAuthorization AddRegion(this RegulatedAuthorization r, CodeableConcept item) { r.Region ??= new List<CodeableConcept>(); r.Region!.Add(item); return r; }
        public static RegulatedAuthorization WithRegulator(this RegulatedAuthorization r, ReferenceType value) { r.Regulator = value; return r; }
        public static RegulatedAuthorization WithStatus(this RegulatedAuthorization r, CodeableConcept value) { r.Status = value; return r; }
        public static RegulatedAuthorization WithStatusDate(this RegulatedAuthorization r, FhirDateTime value) { r.StatusDate = value; return r; }
        public static RegulatedAuthorization AddSubject(this RegulatedAuthorization r, ReferenceType item) { r.Subject ??= new List<ReferenceType>(); r.Subject!.Add(item); return r; }
        public static RegulatedAuthorization WithText(this RegulatedAuthorization r, Narrative value) { r.Text = value; return r; }
        public static RegulatedAuthorization WithType(this RegulatedAuthorization r, CodeableConcept value) { r.Type = value; return r; }
        public static RegulatedAuthorization WithValidityPeriod(this RegulatedAuthorization r, Period value) { r.ValidityPeriod = value; return r; }
    }
}
