// <auto-generated>
#nullable enable
using System.Collections.Generic;
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
namespace FhirSDK.Resources.R5
{
    public static class EncounterFluentExtensions
    {
        public static Encounter AddAccount(this Encounter r, ReferenceType item) { r.Account ??= new List<ReferenceType>(); r.Account!.Add(item); return r; }
        public static Encounter WithActualPeriod(this Encounter r, Period value) { r.ActualPeriod = value; return r; }
        public static Encounter WithAdmission(this Encounter r, BackboneElement value) { r.Admission = value; return r; }
        public static Encounter AddAppointment(this Encounter r, ReferenceType item) { r.Appointment ??= new List<ReferenceType>(); r.Appointment!.Add(item); return r; }
        public static Encounter AddBasedOn(this Encounter r, ReferenceType item) { r.BasedOn ??= new List<ReferenceType>(); r.BasedOn!.Add(item); return r; }
        public static Encounter AddCareTeam(this Encounter r, ReferenceType item) { r.CareTeam ??= new List<ReferenceType>(); r.CareTeam!.Add(item); return r; }
        public static Encounter AddClass(this Encounter r, CodeableConcept item) { r.Class ??= new List<CodeableConcept>(); r.Class!.Add(item); return r; }
        public static Encounter AddContained(this Encounter r, Resource item) { r.Contained ??= new List<Resource>(); r.Contained!.Add(item); return r; }
        public static Encounter AddDiagnosis(this Encounter r, BackboneElement item) { r.Diagnosis ??= new List<BackboneElement>(); r.Diagnosis!.Add(item); return r; }
        public static Encounter AddDietPreference(this Encounter r, CodeableConcept item) { r.DietPreference ??= new List<CodeableConcept>(); r.DietPreference!.Add(item); return r; }
        public static Encounter AddEpisodeOfCare(this Encounter r, ReferenceType item) { r.EpisodeOfCare ??= new List<ReferenceType>(); r.EpisodeOfCare!.Add(item); return r; }
        public static Encounter AddIdentifier(this Encounter r, Identifier item) { r.Identifier ??= new List<Identifier>(); r.Identifier!.Add(item); return r; }
        public static Encounter WithLength(this Encounter r, Duration value) { r.Length = value; return r; }
        public static Encounter AddLocation(this Encounter r, BackboneElement item) { r.Location ??= new List<BackboneElement>(); r.Location!.Add(item); return r; }
        public static Encounter AddParticipant(this Encounter r, BackboneElement item) { r.Participant ??= new List<BackboneElement>(); r.Participant!.Add(item); return r; }
        public static Encounter WithPartOf(this Encounter r, ReferenceType value) { r.PartOf = value; return r; }
        public static Encounter WithPlannedEndDate(this Encounter r, FhirDateTime value) { r.PlannedEndDate = value; return r; }
        public static Encounter WithPlannedStartDate(this Encounter r, FhirDateTime value) { r.PlannedStartDate = value; return r; }
        public static Encounter WithPriority(this Encounter r, CodeableConcept value) { r.Priority = value; return r; }
        public static Encounter AddReason(this Encounter r, BackboneElement item) { r.Reason ??= new List<BackboneElement>(); r.Reason!.Add(item); return r; }
        public static Encounter WithServiceProvider(this Encounter r, ReferenceType value) { r.ServiceProvider = value; return r; }
        public static Encounter AddServiceType(this Encounter r, CodeableReference item) { r.ServiceType ??= new List<CodeableReference>(); r.ServiceType!.Add(item); return r; }
        public static Encounter AddSpecialArrangement(this Encounter r, CodeableConcept item) { r.SpecialArrangement ??= new List<CodeableConcept>(); r.SpecialArrangement!.Add(item); return r; }
        public static Encounter AddSpecialCourtesy(this Encounter r, CodeableConcept item) { r.SpecialCourtesy ??= new List<CodeableConcept>(); r.SpecialCourtesy!.Add(item); return r; }
        public static Encounter WithStatus(this Encounter r, FhirCode value) { r.Status = value; return r; }
        public static Encounter WithSubject(this Encounter r, ReferenceType value) { r.Subject = value; return r; }
        public static Encounter WithSubjectStatus(this Encounter r, CodeableConcept value) { r.SubjectStatus = value; return r; }
        public static Encounter WithText(this Encounter r, Narrative value) { r.Text = value; return r; }
        public static Encounter AddType(this Encounter r, CodeableConcept item) { r.Type ??= new List<CodeableConcept>(); r.Type!.Add(item); return r; }
        public static Encounter AddVirtualService(this Encounter r, VirtualServiceDetail item) { r.VirtualService ??= new List<VirtualServiceDetail>(); r.VirtualService!.Add(item); return r; }
    }
}
