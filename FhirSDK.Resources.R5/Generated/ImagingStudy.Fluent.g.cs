// <auto-generated>
#nullable enable
using System.Collections.Generic;
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
namespace FhirSDK.Resources.R5
{
    public static class ImagingStudyFluentExtensions
    {
        public static ImagingStudy AddBasedOn(this ImagingStudy r, ReferenceType item) { r.BasedOn ??= new List<ReferenceType>(); r.BasedOn!.Add(item); return r; }
        public static ImagingStudy AddContained(this ImagingStudy r, Resource item) { r.Contained ??= new List<Resource>(); r.Contained!.Add(item); return r; }
        public static ImagingStudy WithDescription(this ImagingStudy r, FhirString value) { r.Description = value; return r; }
        public static ImagingStudy WithEncounter(this ImagingStudy r, ReferenceType value) { r.Encounter = value; return r; }
        public static ImagingStudy AddEndpoint(this ImagingStudy r, ReferenceType item) { r.Endpoint ??= new List<ReferenceType>(); r.Endpoint!.Add(item); return r; }
        public static ImagingStudy AddIdentifier(this ImagingStudy r, Identifier item) { r.Identifier ??= new List<Identifier>(); r.Identifier!.Add(item); return r; }
        public static ImagingStudy WithLocation(this ImagingStudy r, ReferenceType value) { r.Location = value; return r; }
        public static ImagingStudy AddModality(this ImagingStudy r, CodeableConcept item) { r.Modality ??= new List<CodeableConcept>(); r.Modality!.Add(item); return r; }
        public static ImagingStudy AddNote(this ImagingStudy r, Annotation item) { r.Note ??= new List<Annotation>(); r.Note!.Add(item); return r; }
        public static ImagingStudy WithNumberOfInstances(this ImagingStudy r, FhirUnsignedInt value) { r.NumberOfInstances = value; return r; }
        public static ImagingStudy WithNumberOfSeries(this ImagingStudy r, FhirUnsignedInt value) { r.NumberOfSeries = value; return r; }
        public static ImagingStudy AddPartOf(this ImagingStudy r, ReferenceType item) { r.PartOf ??= new List<ReferenceType>(); r.PartOf!.Add(item); return r; }
        public static ImagingStudy AddProcedure(this ImagingStudy r, CodeableReference item) { r.Procedure ??= new List<CodeableReference>(); r.Procedure!.Add(item); return r; }
        public static ImagingStudy AddReason(this ImagingStudy r, CodeableReference item) { r.Reason ??= new List<CodeableReference>(); r.Reason!.Add(item); return r; }
        public static ImagingStudy WithReferrer(this ImagingStudy r, ReferenceType value) { r.Referrer = value; return r; }
        public static ImagingStudy AddSeries(this ImagingStudy r, BackboneElement item) { r.Series ??= new List<BackboneElement>(); r.Series!.Add(item); return r; }
        public static ImagingStudy WithStarted(this ImagingStudy r, FhirDateTime value) { r.Started = value; return r; }
        public static ImagingStudy WithStatus(this ImagingStudy r, FhirCode value) { r.Status = value; return r; }
        public static ImagingStudy WithSubject(this ImagingStudy r, ReferenceType value) { r.Subject = value; return r; }
        public static ImagingStudy WithText(this ImagingStudy r, Narrative value) { r.Text = value; return r; }
    }
}
