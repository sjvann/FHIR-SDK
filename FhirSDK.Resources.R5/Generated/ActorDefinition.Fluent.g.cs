// <auto-generated>
#nullable enable
using System.Collections.Generic;
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
namespace FhirSDK.Resources.R5
{
    public static class ActorDefinitionFluentExtensions
    {
        public static ActorDefinition WithCapabilities(this ActorDefinition r, FhirCanonical value) { r.Capabilities = value; return r; }
        public static ActorDefinition AddContact(this ActorDefinition r, ContactDetail item) { r.Contact ??= new List<ContactDetail>(); r.Contact!.Add(item); return r; }
        public static ActorDefinition AddContained(this ActorDefinition r, Resource item) { r.Contained ??= new List<Resource>(); r.Contained!.Add(item); return r; }
        public static ActorDefinition WithCopyright(this ActorDefinition r, FhirMarkdown value) { r.Copyright = value; return r; }
        public static ActorDefinition WithCopyrightLabel(this ActorDefinition r, FhirString value) { r.CopyrightLabel = value; return r; }
        public static ActorDefinition WithDate(this ActorDefinition r, FhirDateTime value) { r.Date = value; return r; }
        public static ActorDefinition AddDerivedFrom(this ActorDefinition r, FhirCanonical item) { r.DerivedFrom ??= new List<FhirCanonical>(); r.DerivedFrom!.Add(item); return r; }
        public static ActorDefinition WithDescription(this ActorDefinition r, FhirMarkdown value) { r.Description = value; return r; }
        public static ActorDefinition WithDocumentation(this ActorDefinition r, FhirMarkdown value) { r.Documentation = value; return r; }
        public static ActorDefinition WithExperimental(this ActorDefinition r, FhirBoolean value) { r.Experimental = value; return r; }
        public static ActorDefinition AddIdentifier(this ActorDefinition r, Identifier item) { r.Identifier ??= new List<Identifier>(); r.Identifier!.Add(item); return r; }
        public static ActorDefinition AddJurisdiction(this ActorDefinition r, CodeableConcept item) { r.Jurisdiction ??= new List<CodeableConcept>(); r.Jurisdiction!.Add(item); return r; }
        public static ActorDefinition WithName(this ActorDefinition r, FhirString value) { r.Name = value; return r; }
        public static ActorDefinition WithPublisher(this ActorDefinition r, FhirString value) { r.Publisher = value; return r; }
        public static ActorDefinition WithPurpose(this ActorDefinition r, FhirMarkdown value) { r.Purpose = value; return r; }
        public static ActorDefinition AddReference(this ActorDefinition r, FhirUrl item) { r.Reference ??= new List<FhirUrl>(); r.Reference!.Add(item); return r; }
        public static ActorDefinition WithStatus(this ActorDefinition r, FhirCode value) { r.Status = value; return r; }
        public static ActorDefinition WithText(this ActorDefinition r, Narrative value) { r.Text = value; return r; }
        public static ActorDefinition WithTitle(this ActorDefinition r, FhirString value) { r.Title = value; return r; }
        public static ActorDefinition WithType(this ActorDefinition r, FhirCode value) { r.Type = value; return r; }
        public static ActorDefinition WithUrl(this ActorDefinition r, FhirUri value) { r.Url = value; return r; }
        public static ActorDefinition AddUseContext(this ActorDefinition r, UsageContext item) { r.UseContext ??= new List<UsageContext>(); r.UseContext!.Add(item); return r; }
        public static ActorDefinition WithVersion(this ActorDefinition r, FhirString value) { r.Version = value; return r; }
        public static ActorDefinition WithVersionAlgorithmString(this ActorDefinition r, FhirString value) { r.VersionAlgorithmString = value; return r; }
        public static ActorDefinition WithVersionAlgorithmCoding(this ActorDefinition r, Coding value) { r.VersionAlgorithmCoding = value; return r; }
    }
}
