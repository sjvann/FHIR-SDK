// <auto-generated>
#nullable enable
using System.Collections.Generic;
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
namespace FhirSDK.Resources.R5
{
    public static class SpecimenDefinitionFluentExtensions
    {
        public static SpecimenDefinition WithApprovalDate(this SpecimenDefinition r, FhirDate value) { r.ApprovalDate = value; return r; }
        public static SpecimenDefinition AddCollection(this SpecimenDefinition r, CodeableConcept item) { r.Collection ??= new List<CodeableConcept>(); r.Collection!.Add(item); return r; }
        public static SpecimenDefinition AddContact(this SpecimenDefinition r, ContactDetail item) { r.Contact ??= new List<ContactDetail>(); r.Contact!.Add(item); return r; }
        public static SpecimenDefinition AddContained(this SpecimenDefinition r, Resource item) { r.Contained ??= new List<Resource>(); r.Contained!.Add(item); return r; }
        public static SpecimenDefinition WithCopyright(this SpecimenDefinition r, FhirMarkdown value) { r.Copyright = value; return r; }
        public static SpecimenDefinition WithCopyrightLabel(this SpecimenDefinition r, FhirString value) { r.CopyrightLabel = value; return r; }
        public static SpecimenDefinition WithDate(this SpecimenDefinition r, FhirDateTime value) { r.Date = value; return r; }
        public static SpecimenDefinition AddDerivedFromCanonical(this SpecimenDefinition r, FhirCanonical item) { r.DerivedFromCanonical ??= new List<FhirCanonical>(); r.DerivedFromCanonical!.Add(item); return r; }
        public static SpecimenDefinition AddDerivedFromUri(this SpecimenDefinition r, FhirUri item) { r.DerivedFromUri ??= new List<FhirUri>(); r.DerivedFromUri!.Add(item); return r; }
        public static SpecimenDefinition WithDescription(this SpecimenDefinition r, FhirMarkdown value) { r.Description = value; return r; }
        public static SpecimenDefinition WithEffectivePeriod(this SpecimenDefinition r, Period value) { r.EffectivePeriod = value; return r; }
        public static SpecimenDefinition WithExperimental(this SpecimenDefinition r, FhirBoolean value) { r.Experimental = value; return r; }
        public static SpecimenDefinition WithIdentifier(this SpecimenDefinition r, Identifier value) { r.Identifier = value; return r; }
        public static SpecimenDefinition AddJurisdiction(this SpecimenDefinition r, CodeableConcept item) { r.Jurisdiction ??= new List<CodeableConcept>(); r.Jurisdiction!.Add(item); return r; }
        public static SpecimenDefinition WithLastReviewDate(this SpecimenDefinition r, FhirDate value) { r.LastReviewDate = value; return r; }
        public static SpecimenDefinition WithName(this SpecimenDefinition r, FhirString value) { r.Name = value; return r; }
        public static SpecimenDefinition AddPatientPreparation(this SpecimenDefinition r, CodeableConcept item) { r.PatientPreparation ??= new List<CodeableConcept>(); r.PatientPreparation!.Add(item); return r; }
        public static SpecimenDefinition WithPublisher(this SpecimenDefinition r, FhirString value) { r.Publisher = value; return r; }
        public static SpecimenDefinition WithPurpose(this SpecimenDefinition r, FhirMarkdown value) { r.Purpose = value; return r; }
        public static SpecimenDefinition WithStatus(this SpecimenDefinition r, FhirCode value) { r.Status = value; return r; }
        public static SpecimenDefinition WithSubjectCodeableConcept(this SpecimenDefinition r, CodeableConcept value) { r.SubjectCodeableConcept = value; return r; }
        public static SpecimenDefinition WithSubjectReference(this SpecimenDefinition r, ReferenceType value) { r.SubjectReference = value; return r; }
        public static SpecimenDefinition WithText(this SpecimenDefinition r, Narrative value) { r.Text = value; return r; }
        public static SpecimenDefinition WithTimeAspect(this SpecimenDefinition r, FhirString value) { r.TimeAspect = value; return r; }
        public static SpecimenDefinition WithTitle(this SpecimenDefinition r, FhirString value) { r.Title = value; return r; }
        public static SpecimenDefinition WithTypeCollected(this SpecimenDefinition r, CodeableConcept value) { r.TypeCollected = value; return r; }
        public static SpecimenDefinition AddTypeTested(this SpecimenDefinition r, BackboneElement item) { r.TypeTested ??= new List<BackboneElement>(); r.TypeTested!.Add(item); return r; }
        public static SpecimenDefinition WithUrl(this SpecimenDefinition r, FhirUri value) { r.Url = value; return r; }
        public static SpecimenDefinition AddUseContext(this SpecimenDefinition r, UsageContext item) { r.UseContext ??= new List<UsageContext>(); r.UseContext!.Add(item); return r; }
        public static SpecimenDefinition WithVersion(this SpecimenDefinition r, FhirString value) { r.Version = value; return r; }
        public static SpecimenDefinition WithVersionAlgorithmString(this SpecimenDefinition r, FhirString value) { r.VersionAlgorithmString = value; return r; }
        public static SpecimenDefinition WithVersionAlgorithmCoding(this SpecimenDefinition r, Coding value) { r.VersionAlgorithmCoding = value; return r; }
    }
}
