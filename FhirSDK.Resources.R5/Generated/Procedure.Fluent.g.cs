// <auto-generated>
#nullable enable
using System.Collections.Generic;
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
namespace FhirSDK.Resources.R5
{
    public static class ProcedureFluentExtensions
    {
        public static Procedure AddBasedOn(this Procedure r, ReferenceType item) { r.BasedOn ??= new List<ReferenceType>(); r.BasedOn!.Add(item); return r; }
        public static Procedure AddBodySite(this Procedure r, CodeableConcept item) { r.BodySite ??= new List<CodeableConcept>(); r.BodySite!.Add(item); return r; }
        public static Procedure AddCategory(this Procedure r, CodeableConcept item) { r.Category ??= new List<CodeableConcept>(); r.Category!.Add(item); return r; }
        public static Procedure WithCode(this Procedure r, CodeableConcept value) { r.Code = value; return r; }
        public static Procedure AddComplication(this Procedure r, CodeableReference item) { r.Complication ??= new List<CodeableReference>(); r.Complication!.Add(item); return r; }
        public static Procedure AddContained(this Procedure r, Resource item) { r.Contained ??= new List<Resource>(); r.Contained!.Add(item); return r; }
        public static Procedure WithEncounter(this Procedure r, ReferenceType value) { r.Encounter = value; return r; }
        public static Procedure AddFocalDevice(this Procedure r, BackboneElement item) { r.FocalDevice ??= new List<BackboneElement>(); r.FocalDevice!.Add(item); return r; }
        public static Procedure WithFocus(this Procedure r, ReferenceType value) { r.Focus = value; return r; }
        public static Procedure AddFollowUp(this Procedure r, CodeableConcept item) { r.FollowUp ??= new List<CodeableConcept>(); r.FollowUp!.Add(item); return r; }
        public static Procedure AddIdentifier(this Procedure r, Identifier item) { r.Identifier ??= new List<Identifier>(); r.Identifier!.Add(item); return r; }
        public static Procedure AddInstantiatesCanonical(this Procedure r, FhirCanonical item) { r.InstantiatesCanonical ??= new List<FhirCanonical>(); r.InstantiatesCanonical!.Add(item); return r; }
        public static Procedure AddInstantiatesUri(this Procedure r, FhirUri item) { r.InstantiatesUri ??= new List<FhirUri>(); r.InstantiatesUri!.Add(item); return r; }
        public static Procedure WithLocation(this Procedure r, ReferenceType value) { r.Location = value; return r; }
        public static Procedure AddNote(this Procedure r, Annotation item) { r.Note ??= new List<Annotation>(); r.Note!.Add(item); return r; }
        public static Procedure WithOccurrenceDateTime(this Procedure r, FhirDateTime value) { r.OccurrenceDateTime = value; return r; }
        public static Procedure WithOccurrencePeriod(this Procedure r, Period value) { r.OccurrencePeriod = value; return r; }
        public static Procedure WithOccurrenceString(this Procedure r, FhirString value) { r.OccurrenceString = value; return r; }
        public static Procedure WithOccurrenceAge(this Procedure r, Age value) { r.OccurrenceAge = value; return r; }
        public static Procedure WithOccurrenceRange(this Procedure r, DataTypeServices.DataTypes.ComplexTypes.Range value) { r.OccurrenceRange = value; return r; }
        public static Procedure WithOccurrenceTiming(this Procedure r, Timing value) { r.OccurrenceTiming = value; return r; }
        public static Procedure WithOutcome(this Procedure r, CodeableConcept value) { r.Outcome = value; return r; }
        public static Procedure AddPartOf(this Procedure r, ReferenceType item) { r.PartOf ??= new List<ReferenceType>(); r.PartOf!.Add(item); return r; }
        public static Procedure AddPerformer(this Procedure r, BackboneElement item) { r.Performer ??= new List<BackboneElement>(); r.Performer!.Add(item); return r; }
        public static Procedure AddReason(this Procedure r, CodeableReference item) { r.Reason ??= new List<CodeableReference>(); r.Reason!.Add(item); return r; }
        public static Procedure WithRecorded(this Procedure r, FhirDateTime value) { r.Recorded = value; return r; }
        public static Procedure WithRecorder(this Procedure r, ReferenceType value) { r.Recorder = value; return r; }
        public static Procedure AddReport(this Procedure r, ReferenceType item) { r.Report ??= new List<ReferenceType>(); r.Report!.Add(item); return r; }
        public static Procedure WithReportedBoolean(this Procedure r, FhirBoolean value) { r.ReportedBoolean = value; return r; }
        public static Procedure WithReportedReference(this Procedure r, ReferenceType value) { r.ReportedReference = value; return r; }
        public static Procedure WithStatus(this Procedure r, FhirCode value) { r.Status = value; return r; }
        public static Procedure WithStatusReason(this Procedure r, CodeableConcept value) { r.StatusReason = value; return r; }
        public static Procedure WithSubject(this Procedure r, ReferenceType value) { r.Subject = value; return r; }
        public static Procedure AddSupportingInfo(this Procedure r, ReferenceType item) { r.SupportingInfo ??= new List<ReferenceType>(); r.SupportingInfo!.Add(item); return r; }
        public static Procedure WithText(this Procedure r, Narrative value) { r.Text = value; return r; }
        public static Procedure AddUsed(this Procedure r, CodeableReference item) { r.Used ??= new List<CodeableReference>(); r.Used!.Add(item); return r; }
    }
}
