// <auto-generated>
#nullable enable
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
using System.Text.Json.Nodes;
using System.Text.Json.Serialization;
using System.Linq;
using FhirCore.Base;
using DataTypeServices.TypeFramework;
using DataTypeServices.DataTypes.MetaTypes;
namespace FhirSDK.Resources.R5
{
    /// <summary>
    /// Record of use of a device
    /// </summary>
    public partial class DeviceUsage : ResourceBase
    {
        public override string ResourceType => "DeviceUsage";

        public DeviceUsage() { }
        public DeviceUsage(string json) { SetRawFrom(JsonNode.Parse(json)); }
        public DeviceUsage(JsonNode? source) { SetRawFrom(source); }
        protected override void OnPropertyChanged(string propertyName, object? newValue) { base.OnPropertyChanged(propertyName, newValue); }

        private DeviceUsage_Adherence? _adherence;
        [JsonPropertyName("adherence")]
        public DeviceUsage_Adherence? Adherence { get => _adherence; set { _adherence = value; OnPropertyChangedByClr(nameof(Adherence), value); } }

        /// <summary>
        /// How device is being used
        /// </summary>
        public partial class DeviceUsage_Adherence : BackboneElement<DeviceUsage_Adherence>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "DeviceUsage_Adherence" : "deviceUsage_Adherence";
            private CodeableConcept? _code;
        [JsonPropertyName("code")]
        public CodeableConcept Code { get => _code ?? throw new InvalidOperationException("Code is required"); set { _code = value; } }

            private List<CodeableConcept> _reason = new();
        [JsonPropertyName("reason")]
        public List<CodeableConcept> Reason { get => _reason; set { _reason = value; } }

        }

        private List<ReferenceType>? _basedOn;
        [JsonPropertyName("basedOn")]
        public List<ReferenceType>? BasedOn { get => _basedOn; set { _basedOn = value; OnPropertyChangedByClr(nameof(BasedOn), value); } }

        private CodeableReference? _bodySite;
        [JsonPropertyName("bodySite")]
        public CodeableReference? BodySite { get => _bodySite; set { _bodySite = value; OnPropertyChangedByClr(nameof(BodySite), value); } }

        private List<CodeableConcept>? _category;
        [JsonPropertyName("category")]
        public List<CodeableConcept>? Category { get => _category; set { _category = value; OnPropertyChangedByClr(nameof(Category), value); } }

        private List<Resource>? _contained;
        [JsonPropertyName("contained")]
        public List<Resource>? Contained { get => _contained; set { _contained = value; OnPropertyChangedByClr(nameof(Contained), value); } }

        private ReferenceType? _context;
        [JsonPropertyName("context")]
        public ReferenceType? Context { get => _context; set { _context = value; OnPropertyChangedByClr(nameof(Context), value); } }

        private FhirDateTime? _dateAsserted;
        [JsonPropertyName("dateAsserted")]
        public FhirDateTime? DateAsserted { get => _dateAsserted; set { _dateAsserted = value; OnPropertyChangedByClr(nameof(DateAsserted), value); } }

        private List<ReferenceType>? _derivedFrom;
        [JsonPropertyName("derivedFrom")]
        public List<ReferenceType>? DerivedFrom { get => _derivedFrom; set { _derivedFrom = value; OnPropertyChangedByClr(nameof(DerivedFrom), value); } }

        private CodeableReference? _device;
        [JsonPropertyName("device")]
        public CodeableReference Device { get => _device ?? throw new InvalidOperationException("Device is required"); set { _device = value; OnPropertyChangedByClr(nameof(Device), value); } }

        private List<Identifier>? _identifier;
        [JsonPropertyName("identifier")]
        public List<Identifier>? Identifier { get => _identifier; set { _identifier = value; OnPropertyChangedByClr(nameof(Identifier), value); } }

        private ReferenceType? _informationSource;
        [JsonPropertyName("informationSource")]
        public ReferenceType? InformationSource { get => _informationSource; set { _informationSource = value; OnPropertyChangedByClr(nameof(InformationSource), value); } }

        private List<Annotation>? _note;
        [JsonPropertyName("note")]
        public List<Annotation>? Note { get => _note; set { _note = value; OnPropertyChangedByClr(nameof(Note), value); } }

        private ReferenceType? _patient;
        [JsonPropertyName("patient")]
        public ReferenceType Patient { get => _patient ?? throw new InvalidOperationException("Patient is required"); set { _patient = value; OnPropertyChangedByClr(nameof(Patient), value); } }

        private List<CodeableReference>? _reason;
        [JsonPropertyName("reason")]
        public List<CodeableReference>? Reason { get => _reason; set { _reason = value; OnPropertyChangedByClr(nameof(Reason), value); } }

        private FhirCode? _status;
        [JsonPropertyName("status")]
        public FhirCode Status { get => _status ?? throw new InvalidOperationException("Status is required"); set { _status = value; OnPropertyChangedByClr(nameof(Status), value); } }

        private Narrative? _text;
        [JsonPropertyName("text")]
        public Narrative? Text { get => _text; set { _text = value; OnPropertyChangedByClr(nameof(Text), value); } }

        private Timing? _timingTiming;
        [JsonPropertyName("timingTiming")]
        public Timing? TimingTiming { get => _timingTiming; set { _timingTiming = value; if (value != null) {{ _timingPeriod = null; OnPropertyChangedByClr(nameof(TimingPeriod), null); _timingDateTime = null; OnPropertyChangedByClr(nameof(TimingDateTime), null); }}; OnPropertyChangedByClr(nameof(TimingTiming), value); } }

        private Period? _timingPeriod;
        [JsonPropertyName("timingPeriod")]
        public Period? TimingPeriod { get => _timingPeriod; set { _timingPeriod = value; if (value != null) {{ _timingTiming = null; OnPropertyChangedByClr(nameof(TimingTiming), null); _timingDateTime = null; OnPropertyChangedByClr(nameof(TimingDateTime), null); }}; OnPropertyChangedByClr(nameof(TimingPeriod), value); } }

        private FhirDateTime? _timingDateTime;
        [JsonPropertyName("timingDateTime")]
        public FhirDateTime? TimingDateTime { get => _timingDateTime; set { _timingDateTime = value; if (value != null) {{ _timingTiming = null; OnPropertyChangedByClr(nameof(TimingTiming), null); _timingPeriod = null; OnPropertyChangedByClr(nameof(TimingPeriod), null); }}; OnPropertyChangedByClr(nameof(TimingDateTime), value); } }

        private List<CodeableConcept>? _usageReason;
        [JsonPropertyName("usageReason")]
        public List<CodeableConcept>? UsageReason { get => _usageReason; set { _usageReason = value; OnPropertyChangedByClr(nameof(UsageReason), value); } }

        private CodeableConcept? _usageStatus;
        [JsonPropertyName("usageStatus")]
        public CodeableConcept? UsageStatus { get => _usageStatus; set { _usageStatus = value; OnPropertyChangedByClr(nameof(UsageStatus), value); } }

    }
}
