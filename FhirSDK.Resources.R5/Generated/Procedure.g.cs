// <auto-generated>
#nullable enable
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
using System.Text.Json.Nodes;
using System.Text.Json.Serialization;
using System.Linq;
using FhirCore.Base;
using DataTypeServices.TypeFramework;
using DataTypeServices.DataTypes.MetaTypes;
namespace FhirSDK.Resources.R5
{
    /// <summary>
    /// An action that is being or was performed on an individual or entity
    /// </summary>
    public partial class Procedure : ResourceBase
    {
        public override string ResourceType => "Procedure";

        public Procedure() { }
        public Procedure(string json) { SetRawFrom(JsonNode.Parse(json)); }
        public Procedure(JsonNode? source) { SetRawFrom(source); }
        protected override void OnPropertyChanged(string propertyName, object? newValue) { base.OnPropertyChanged(propertyName, newValue); }

        private List<ReferenceType>? _basedOn;
        [JsonPropertyName("basedOn")]
        public List<ReferenceType>? BasedOn { get => _basedOn; set { _basedOn = value; OnPropertyChangedByClr(nameof(BasedOn), value); } }

        private List<CodeableConcept>? _bodySite;
        [JsonPropertyName("bodySite")]
        public List<CodeableConcept>? BodySite { get => _bodySite; set { _bodySite = value; OnPropertyChangedByClr(nameof(BodySite), value); } }

        private List<CodeableConcept>? _category;
        [JsonPropertyName("category")]
        public List<CodeableConcept>? Category { get => _category; set { _category = value; OnPropertyChangedByClr(nameof(Category), value); } }

        private CodeableConcept? _code;
        [JsonPropertyName("code")]
        public CodeableConcept? Code { get => _code; set { _code = value; OnPropertyChangedByClr(nameof(Code), value); } }

        private List<CodeableReference>? _complication;
        [JsonPropertyName("complication")]
        public List<CodeableReference>? Complication { get => _complication; set { _complication = value; OnPropertyChangedByClr(nameof(Complication), value); } }

        private List<Resource>? _contained;
        [JsonPropertyName("contained")]
        public List<Resource>? Contained { get => _contained; set { _contained = value; OnPropertyChangedByClr(nameof(Contained), value); } }

        private ReferenceType? _encounter;
        [JsonPropertyName("encounter")]
        public ReferenceType? Encounter { get => _encounter; set { _encounter = value; OnPropertyChangedByClr(nameof(Encounter), value); } }

        private List<Procedure_FocalDevice>? _focalDevice;
        [JsonPropertyName("focalDevice")]
        public List<Procedure_FocalDevice>? FocalDevice { get => _focalDevice; set { _focalDevice = value; OnPropertyChangedByClr(nameof(FocalDevice), value); } }

        /// <summary>
        /// Manipulated, implanted, or removed device
        /// </summary>
        public partial class Procedure_FocalDevice : BackboneElement<Procedure_FocalDevice>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "Procedure_FocalDevice" : "procedure_FocalDevice";
            private CodeableConcept? _action;
        [JsonPropertyName("action")]
        public CodeableConcept? Action { get => _action; set { _action = value; } }

            private ReferenceType? _manipulated;
        [JsonPropertyName("manipulated")]
        public ReferenceType Manipulated { get => _manipulated ?? throw new InvalidOperationException("Manipulated is required"); set { _manipulated = value; } }

        }

        private ReferenceType? _focus;
        [JsonPropertyName("focus")]
        public ReferenceType? Focus { get => _focus; set { _focus = value; OnPropertyChangedByClr(nameof(Focus), value); } }

        private List<CodeableConcept>? _followUp;
        [JsonPropertyName("followUp")]
        public List<CodeableConcept>? FollowUp { get => _followUp; set { _followUp = value; OnPropertyChangedByClr(nameof(FollowUp), value); } }

        private List<Identifier>? _identifier;
        [JsonPropertyName("identifier")]
        public List<Identifier>? Identifier { get => _identifier; set { _identifier = value; OnPropertyChangedByClr(nameof(Identifier), value); } }

        private List<FhirCanonical>? _instantiatesCanonical;
        [JsonPropertyName("instantiatesCanonical")]
        public List<FhirCanonical>? InstantiatesCanonical { get => _instantiatesCanonical; set { _instantiatesCanonical = value; OnPropertyChangedByClr(nameof(InstantiatesCanonical), value); } }

        private List<FhirUri>? _instantiatesUri;
        [JsonPropertyName("instantiatesUri")]
        public List<FhirUri>? InstantiatesUri { get => _instantiatesUri; set { _instantiatesUri = value; OnPropertyChangedByClr(nameof(InstantiatesUri), value); } }

        private ReferenceType? _location;
        [JsonPropertyName("location")]
        public ReferenceType? Location { get => _location; set { _location = value; OnPropertyChangedByClr(nameof(Location), value); } }

        private List<Annotation>? _note;
        [JsonPropertyName("note")]
        public List<Annotation>? Note { get => _note; set { _note = value; OnPropertyChangedByClr(nameof(Note), value); } }

        private FhirDateTime? _occurrenceDateTime;
        [JsonPropertyName("occurrenceDateTime")]
        public FhirDateTime? OccurrenceDateTime { get => _occurrenceDateTime; set { _occurrenceDateTime = value; if (value != null) {{ _occurrencePeriod = null; OnPropertyChangedByClr(nameof(OccurrencePeriod), null); _occurrenceString = null; OnPropertyChangedByClr(nameof(OccurrenceString), null); _occurrenceAge = null; OnPropertyChangedByClr(nameof(OccurrenceAge), null); _occurrenceRange = null; OnPropertyChangedByClr(nameof(OccurrenceRange), null); _occurrenceTiming = null; OnPropertyChangedByClr(nameof(OccurrenceTiming), null); }}; OnPropertyChangedByClr(nameof(OccurrenceDateTime), value); } }

        private Period? _occurrencePeriod;
        [JsonPropertyName("occurrencePeriod")]
        public Period? OccurrencePeriod { get => _occurrencePeriod; set { _occurrencePeriod = value; if (value != null) {{ _occurrenceDateTime = null; OnPropertyChangedByClr(nameof(OccurrenceDateTime), null); _occurrenceString = null; OnPropertyChangedByClr(nameof(OccurrenceString), null); _occurrenceAge = null; OnPropertyChangedByClr(nameof(OccurrenceAge), null); _occurrenceRange = null; OnPropertyChangedByClr(nameof(OccurrenceRange), null); _occurrenceTiming = null; OnPropertyChangedByClr(nameof(OccurrenceTiming), null); }}; OnPropertyChangedByClr(nameof(OccurrencePeriod), value); } }

        private FhirString? _occurrenceString;
        [JsonPropertyName("occurrenceString")]
        public FhirString? OccurrenceString { get => _occurrenceString; set { _occurrenceString = value; if (value != null) {{ _occurrenceDateTime = null; OnPropertyChangedByClr(nameof(OccurrenceDateTime), null); _occurrencePeriod = null; OnPropertyChangedByClr(nameof(OccurrencePeriod), null); _occurrenceAge = null; OnPropertyChangedByClr(nameof(OccurrenceAge), null); _occurrenceRange = null; OnPropertyChangedByClr(nameof(OccurrenceRange), null); _occurrenceTiming = null; OnPropertyChangedByClr(nameof(OccurrenceTiming), null); }}; OnPropertyChangedByClr(nameof(OccurrenceString), value); } }

        private Age? _occurrenceAge;
        [JsonPropertyName("occurrenceAge")]
        public Age? OccurrenceAge { get => _occurrenceAge; set { _occurrenceAge = value; if (value != null) {{ _occurrenceDateTime = null; OnPropertyChangedByClr(nameof(OccurrenceDateTime), null); _occurrencePeriod = null; OnPropertyChangedByClr(nameof(OccurrencePeriod), null); _occurrenceString = null; OnPropertyChangedByClr(nameof(OccurrenceString), null); _occurrenceRange = null; OnPropertyChangedByClr(nameof(OccurrenceRange), null); _occurrenceTiming = null; OnPropertyChangedByClr(nameof(OccurrenceTiming), null); }}; OnPropertyChangedByClr(nameof(OccurrenceAge), value); } }

        private DataTypeServices.DataTypes.ComplexTypes.Range? _occurrenceRange;
        [JsonPropertyName("occurrenceRange")]
        public DataTypeServices.DataTypes.ComplexTypes.Range? OccurrenceRange { get => _occurrenceRange; set { _occurrenceRange = value; if (value != null) {{ _occurrenceDateTime = null; OnPropertyChangedByClr(nameof(OccurrenceDateTime), null); _occurrencePeriod = null; OnPropertyChangedByClr(nameof(OccurrencePeriod), null); _occurrenceString = null; OnPropertyChangedByClr(nameof(OccurrenceString), null); _occurrenceAge = null; OnPropertyChangedByClr(nameof(OccurrenceAge), null); _occurrenceTiming = null; OnPropertyChangedByClr(nameof(OccurrenceTiming), null); }}; OnPropertyChangedByClr(nameof(OccurrenceRange), value); } }

        private Timing? _occurrenceTiming;
        [JsonPropertyName("occurrenceTiming")]
        public Timing? OccurrenceTiming { get => _occurrenceTiming; set { _occurrenceTiming = value; if (value != null) {{ _occurrenceDateTime = null; OnPropertyChangedByClr(nameof(OccurrenceDateTime), null); _occurrencePeriod = null; OnPropertyChangedByClr(nameof(OccurrencePeriod), null); _occurrenceString = null; OnPropertyChangedByClr(nameof(OccurrenceString), null); _occurrenceAge = null; OnPropertyChangedByClr(nameof(OccurrenceAge), null); _occurrenceRange = null; OnPropertyChangedByClr(nameof(OccurrenceRange), null); }}; OnPropertyChangedByClr(nameof(OccurrenceTiming), value); } }

        private CodeableConcept? _outcome;
        [JsonPropertyName("outcome")]
        public CodeableConcept? Outcome { get => _outcome; set { _outcome = value; OnPropertyChangedByClr(nameof(Outcome), value); } }

        private List<ReferenceType>? _partOf;
        [JsonPropertyName("partOf")]
        public List<ReferenceType>? PartOf { get => _partOf; set { _partOf = value; OnPropertyChangedByClr(nameof(PartOf), value); } }

        private List<Procedure_Performer>? _performer;
        [JsonPropertyName("performer")]
        public List<Procedure_Performer>? Performer { get => _performer; set { _performer = value; OnPropertyChangedByClr(nameof(Performer), value); } }

        /// <summary>
        /// Who performed the procedure and what they did
        /// </summary>
        public partial class Procedure_Performer : BackboneElement<Procedure_Performer>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "Procedure_Performer" : "procedure_Performer";
            private ReferenceType? _actor;
        [JsonPropertyName("actor")]
        public ReferenceType Actor { get => _actor ?? throw new InvalidOperationException("Actor is required"); set { _actor = value; } }

            private CodeableConcept? _function;
        [JsonPropertyName("function")]
        public CodeableConcept? Function { get => _function; set { _function = value; } }

            private ReferenceType? _onBehalfOf;
        [JsonPropertyName("onBehalfOf")]
        public ReferenceType? OnBehalfOf { get => _onBehalfOf; set { _onBehalfOf = value; } }

            private Period? _period;
        [JsonPropertyName("period")]
        public Period? Period { get => _period; set { _period = value; } }

        }

        private List<CodeableReference>? _reason;
        [JsonPropertyName("reason")]
        public List<CodeableReference>? Reason { get => _reason; set { _reason = value; OnPropertyChangedByClr(nameof(Reason), value); } }

        private FhirDateTime? _recorded;
        [JsonPropertyName("recorded")]
        public FhirDateTime? Recorded { get => _recorded; set { _recorded = value; OnPropertyChangedByClr(nameof(Recorded), value); } }

        private ReferenceType? _recorder;
        [JsonPropertyName("recorder")]
        public ReferenceType? Recorder { get => _recorder; set { _recorder = value; OnPropertyChangedByClr(nameof(Recorder), value); } }

        private List<ReferenceType>? _report;
        [JsonPropertyName("report")]
        public List<ReferenceType>? Report { get => _report; set { _report = value; OnPropertyChangedByClr(nameof(Report), value); } }

        private FhirBoolean? _reportedBoolean;
        [JsonPropertyName("reportedBoolean")]
        public FhirBoolean? ReportedBoolean { get => _reportedBoolean; set { _reportedBoolean = value; if (value != null) {{ _reportedReference = null; OnPropertyChangedByClr(nameof(ReportedReference), null); }}; OnPropertyChangedByClr(nameof(ReportedBoolean), value); } }

        private ReferenceType? _reportedReference;
        [JsonPropertyName("reportedReference")]
        public ReferenceType? ReportedReference { get => _reportedReference; set { _reportedReference = value; if (value != null) {{ _reportedBoolean = null; OnPropertyChangedByClr(nameof(ReportedBoolean), null); }}; OnPropertyChangedByClr(nameof(ReportedReference), value); } }

        private FhirCode? _status;
        [JsonPropertyName("status")]
        public FhirCode Status { get => _status ?? throw new InvalidOperationException("Status is required"); set { _status = value; OnPropertyChangedByClr(nameof(Status), value); } }

        private CodeableConcept? _statusReason;
        [JsonPropertyName("statusReason")]
        public CodeableConcept? StatusReason { get => _statusReason; set { _statusReason = value; OnPropertyChangedByClr(nameof(StatusReason), value); } }

        private ReferenceType? _subject;
        [JsonPropertyName("subject")]
        public ReferenceType Subject { get => _subject ?? throw new InvalidOperationException("Subject is required"); set { _subject = value; OnPropertyChangedByClr(nameof(Subject), value); } }

        private List<ReferenceType>? _supportingInfo;
        [JsonPropertyName("supportingInfo")]
        public List<ReferenceType>? SupportingInfo { get => _supportingInfo; set { _supportingInfo = value; OnPropertyChangedByClr(nameof(SupportingInfo), value); } }

        private Narrative? _text;
        [JsonPropertyName("text")]
        public Narrative? Text { get => _text; set { _text = value; OnPropertyChangedByClr(nameof(Text), value); } }

        private List<CodeableReference>? _used;
        [JsonPropertyName("used")]
        public List<CodeableReference>? Used { get => _used; set { _used = value; OnPropertyChangedByClr(nameof(Used), value); } }

    }
}
