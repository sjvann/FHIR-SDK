// <auto-generated>
#nullable enable
using System.Collections.Generic;
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
namespace FhirSDK.Resources.R5
{
    public static class AccountFluentExtensions
    {
        public static Account AddBalance(this Account r, BackboneElement item) { r.Balance ??= new List<BackboneElement>(); r.Balance!.Add(item); return r; }
        public static Account WithBillingStatus(this Account r, CodeableConcept value) { r.BillingStatus = value; return r; }
        public static Account WithCalculatedAt(this Account r, FhirInstant value) { r.CalculatedAt = value; return r; }
        public static Account AddContained(this Account r, Resource item) { r.Contained ??= new List<Resource>(); r.Contained!.Add(item); return r; }
        public static Account AddCoverage(this Account r, BackboneElement item) { r.Coverage ??= new List<BackboneElement>(); r.Coverage!.Add(item); return r; }
        public static Account WithCurrency(this Account r, CodeableConcept value) { r.Currency = value; return r; }
        public static Account WithDescription(this Account r, FhirMarkdown value) { r.Description = value; return r; }
        public static Account AddDiagnosis(this Account r, BackboneElement item) { r.Diagnosis ??= new List<BackboneElement>(); r.Diagnosis!.Add(item); return r; }
        public static Account AddGuarantor(this Account r, BackboneElement item) { r.Guarantor ??= new List<BackboneElement>(); r.Guarantor!.Add(item); return r; }
        public static Account AddIdentifier(this Account r, Identifier item) { r.Identifier ??= new List<Identifier>(); r.Identifier!.Add(item); return r; }
        public static Account WithName(this Account r, FhirString value) { r.Name = value; return r; }
        public static Account WithOwner(this Account r, ReferenceType value) { r.Owner = value; return r; }
        public static Account AddProcedure(this Account r, BackboneElement item) { r.Procedure ??= new List<BackboneElement>(); r.Procedure!.Add(item); return r; }
        public static Account AddRelatedAccount(this Account r, BackboneElement item) { r.RelatedAccount ??= new List<BackboneElement>(); r.RelatedAccount!.Add(item); return r; }
        public static Account WithServicePeriod(this Account r, Period value) { r.ServicePeriod = value; return r; }
        public static Account WithStatus(this Account r, FhirCode value) { r.Status = value; return r; }
        public static Account AddSubject(this Account r, ReferenceType item) { r.Subject ??= new List<ReferenceType>(); r.Subject!.Add(item); return r; }
        public static Account WithText(this Account r, Narrative value) { r.Text = value; return r; }
        public static Account WithType(this Account r, CodeableConcept value) { r.Type = value; return r; }
    }
}
