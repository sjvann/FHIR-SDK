// <auto-generated>
#nullable enable
using System.Collections.Generic;
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
namespace FhirSDK.Resources.R5
{
    public static class ObservationFluentExtensions
    {
        public static Observation AddBasedOn(this Observation r, ReferenceType item) { r.BasedOn ??= new List<ReferenceType>(); r.BasedOn!.Add(item); return r; }
        public static Observation WithBodySite(this Observation r, CodeableConcept value) { r.BodySite = value; return r; }
        public static Observation WithBodyStructure(this Observation r, ReferenceType value) { r.BodyStructure = value; return r; }
        public static Observation AddCategory(this Observation r, CodeableConcept item) { r.Category ??= new List<CodeableConcept>(); r.Category!.Add(item); return r; }
        public static Observation WithCode(this Observation r, CodeableConcept value) { r.Code = value; return r; }
        public static Observation AddComponent(this Observation r, BackboneElement item) { r.Component ??= new List<BackboneElement>(); r.Component!.Add(item); return r; }
        public static Observation AddContained(this Observation r, Resource item) { r.Contained ??= new List<Resource>(); r.Contained!.Add(item); return r; }
        public static Observation WithDataAbsentReason(this Observation r, CodeableConcept value) { r.DataAbsentReason = value; return r; }
        public static Observation AddDerivedFrom(this Observation r, ReferenceType item) { r.DerivedFrom ??= new List<ReferenceType>(); r.DerivedFrom!.Add(item); return r; }
        public static Observation WithDevice(this Observation r, ReferenceType value) { r.Device = value; return r; }
        public static Observation WithEffectiveDateTime(this Observation r, FhirDateTime value) { r.EffectiveDateTime = value; return r; }
        public static Observation WithEffectivePeriod(this Observation r, Period value) { r.EffectivePeriod = value; return r; }
        public static Observation WithEffectiveTiming(this Observation r, Timing value) { r.EffectiveTiming = value; return r; }
        public static Observation WithEffectiveInstant(this Observation r, FhirInstant value) { r.EffectiveInstant = value; return r; }
        public static Observation WithEncounter(this Observation r, ReferenceType value) { r.Encounter = value; return r; }
        public static Observation AddFocus(this Observation r, ReferenceType item) { r.Focus ??= new List<ReferenceType>(); r.Focus!.Add(item); return r; }
        public static Observation AddHasMember(this Observation r, ReferenceType item) { r.HasMember ??= new List<ReferenceType>(); r.HasMember!.Add(item); return r; }
        public static Observation AddIdentifier(this Observation r, Identifier item) { r.Identifier ??= new List<Identifier>(); r.Identifier!.Add(item); return r; }
        public static Observation WithInstantiatescanonical(this Observation r, FhirCanonical value) { r.Instantiatescanonical = value; return r; }
        public static Observation WithInstantiatesReference(this Observation r, ReferenceType value) { r.InstantiatesReference = value; return r; }
        public static Observation AddInterpretation(this Observation r, CodeableConcept item) { r.Interpretation ??= new List<CodeableConcept>(); r.Interpretation!.Add(item); return r; }
        public static Observation WithIssued(this Observation r, FhirInstant value) { r.Issued = value; return r; }
        public static Observation WithMethod(this Observation r, CodeableConcept value) { r.Method = value; return r; }
        public static Observation AddNote(this Observation r, Annotation item) { r.Note ??= new List<Annotation>(); r.Note!.Add(item); return r; }
        public static Observation AddPartOf(this Observation r, ReferenceType item) { r.PartOf ??= new List<ReferenceType>(); r.PartOf!.Add(item); return r; }
        public static Observation AddPerformer(this Observation r, ReferenceType item) { r.Performer ??= new List<ReferenceType>(); r.Performer!.Add(item); return r; }
        public static Observation AddReferenceRange(this Observation r, BackboneElement item) { r.ReferenceRange ??= new List<BackboneElement>(); r.ReferenceRange!.Add(item); return r; }
        public static Observation WithSpecimen(this Observation r, ReferenceType value) { r.Specimen = value; return r; }
        public static Observation WithStatus(this Observation r, FhirCode value) { r.Status = value; return r; }
        public static Observation WithSubject(this Observation r, ReferenceType value) { r.Subject = value; return r; }
        public static Observation WithText(this Observation r, Narrative value) { r.Text = value; return r; }
        public static Observation AddTriggeredBy(this Observation r, BackboneElement item) { r.TriggeredBy ??= new List<BackboneElement>(); r.TriggeredBy!.Add(item); return r; }
        public static Observation WithValueQuantity(this Observation r, Quantity value) { r.ValueQuantity = value; return r; }
        public static Observation WithValueCodeableConcept(this Observation r, CodeableConcept value) { r.ValueCodeableConcept = value; return r; }
        public static Observation WithValueString(this Observation r, FhirString value) { r.ValueString = value; return r; }
        public static Observation WithValueBoolean(this Observation r, FhirBoolean value) { r.ValueBoolean = value; return r; }
        public static Observation WithValueInteger(this Observation r, FhirInteger value) { r.ValueInteger = value; return r; }
        public static Observation WithValueRange(this Observation r, DataTypeServices.DataTypes.ComplexTypes.Range value) { r.ValueRange = value; return r; }
        public static Observation WithValueRatio(this Observation r, Ratio value) { r.ValueRatio = value; return r; }
        public static Observation WithValueSampledData(this Observation r, SampledData value) { r.ValueSampledData = value; return r; }
        public static Observation WithValueTime(this Observation r, FhirTime value) { r.ValueTime = value; return r; }
        public static Observation WithValueDateTime(this Observation r, FhirDateTime value) { r.ValueDateTime = value; return r; }
        public static Observation WithValuePeriod(this Observation r, Period value) { r.ValuePeriod = value; return r; }
        public static Observation WithValueAttachment(this Observation r, Attachment value) { r.ValueAttachment = value; return r; }
        public static Observation WithValueReference(this Observation r, ReferenceType value) { r.ValueReference = value; return r; }
    }
}
