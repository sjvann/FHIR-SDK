// <auto-generated>
#nullable enable
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
using System.Text.Json.Nodes;
using System.Text.Json.Serialization;
using System.Linq;
using FhirCore.Base;
using DataTypeServices.TypeFramework;
using DataTypeServices.DataTypes.MetaTypes;
namespace FhirSDK.Resources.R5
{
    /// <summary>
    /// A record of dispensation of a biologically derived product
    /// </summary>
    public partial class BiologicallyDerivedProductDispense : ResourceBase
    {
        public override string ResourceType => "BiologicallyDerivedProductDispense";

        public BiologicallyDerivedProductDispense() { }
        public BiologicallyDerivedProductDispense(string json) { SetRawFrom(JsonNode.Parse(json)); }
        public BiologicallyDerivedProductDispense(JsonNode? source) { SetRawFrom(source); }
        protected override void OnPropertyChanged(string propertyName, object? newValue) { base.OnPropertyChanged(propertyName, newValue); }

        private List<ReferenceType>? _basedOn;
        [JsonPropertyName("basedOn")]
        public List<ReferenceType>? BasedOn { get => _basedOn; set { _basedOn = value; OnPropertyChangedByClr(nameof(BasedOn), value); } }

        private List<Resource>? _contained;
        [JsonPropertyName("contained")]
        public List<Resource>? Contained { get => _contained; set { _contained = value; OnPropertyChangedByClr(nameof(Contained), value); } }

        private ReferenceType? _destination;
        [JsonPropertyName("destination")]
        public ReferenceType? Destination { get => _destination; set { _destination = value; OnPropertyChangedByClr(nameof(Destination), value); } }

        private List<Identifier>? _identifier;
        [JsonPropertyName("identifier")]
        public List<Identifier>? Identifier { get => _identifier; set { _identifier = value; OnPropertyChangedByClr(nameof(Identifier), value); } }

        private ReferenceType? _location;
        [JsonPropertyName("location")]
        public ReferenceType? Location { get => _location; set { _location = value; OnPropertyChangedByClr(nameof(Location), value); } }

        private CodeableConcept? _matchStatus;
        [JsonPropertyName("matchStatus")]
        public CodeableConcept? MatchStatus { get => _matchStatus; set { _matchStatus = value; OnPropertyChangedByClr(nameof(MatchStatus), value); } }

        private List<Annotation>? _note;
        [JsonPropertyName("note")]
        public List<Annotation>? Note { get => _note; set { _note = value; OnPropertyChangedByClr(nameof(Note), value); } }

        private CodeableConcept? _originRelationshipType;
        [JsonPropertyName("originRelationshipType")]
        public CodeableConcept? OriginRelationshipType { get => _originRelationshipType; set { _originRelationshipType = value; OnPropertyChangedByClr(nameof(OriginRelationshipType), value); } }

        private List<ReferenceType>? _partOf;
        [JsonPropertyName("partOf")]
        public List<ReferenceType>? PartOf { get => _partOf; set { _partOf = value; OnPropertyChangedByClr(nameof(PartOf), value); } }

        private ReferenceType? _patient;
        [JsonPropertyName("patient")]
        public ReferenceType Patient { get => _patient ?? throw new InvalidOperationException("Patient is required"); set { _patient = value; OnPropertyChangedByClr(nameof(Patient), value); } }

        private List<BiologicallyDerivedProductDispense_Performer>? _performer;
        [JsonPropertyName("performer")]
        public List<BiologicallyDerivedProductDispense_Performer>? Performer { get => _performer; set { _performer = value; OnPropertyChangedByClr(nameof(Performer), value); } }

        /// <summary>
        /// Indicates who or what performed an action
        /// </summary>
        public partial class BiologicallyDerivedProductDispense_Performer : BackboneElement<BiologicallyDerivedProductDispense_Performer>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "BiologicallyDerivedProductDispense_Performer" : "biologicallyDerivedProductDispense_Performer";
            private ReferenceType? _actor;
        [JsonPropertyName("actor")]
        public ReferenceType Actor { get => _actor ?? throw new InvalidOperationException("Actor is required"); set { _actor = value; } }

            private CodeableConcept? _function;
        [JsonPropertyName("function")]
        public CodeableConcept? Function { get => _function; set { _function = value; } }

        }

        private FhirDateTime? _preparedDate;
        [JsonPropertyName("preparedDate")]
        public FhirDateTime? PreparedDate { get => _preparedDate; set { _preparedDate = value; OnPropertyChangedByClr(nameof(PreparedDate), value); } }

        private ReferenceType? _product;
        [JsonPropertyName("product")]
        public ReferenceType Product { get => _product ?? throw new InvalidOperationException("Product is required"); set { _product = value; OnPropertyChangedByClr(nameof(Product), value); } }

        private Quantity? _quantity;
        [JsonPropertyName("quantity")]
        public Quantity? Quantity { get => _quantity; set { _quantity = value; OnPropertyChangedByClr(nameof(Quantity), value); } }

        private FhirCode? _status;
        [JsonPropertyName("status")]
        public FhirCode Status { get => _status ?? throw new InvalidOperationException("Status is required"); set { _status = value; OnPropertyChangedByClr(nameof(Status), value); } }

        private Narrative? _text;
        [JsonPropertyName("text")]
        public Narrative? Text { get => _text; set { _text = value; OnPropertyChangedByClr(nameof(Text), value); } }

        private FhirString? _usageInstruction;
        [JsonPropertyName("usageInstruction")]
        public FhirString? UsageInstruction { get => _usageInstruction; set { _usageInstruction = value; OnPropertyChangedByClr(nameof(UsageInstruction), value); } }

        private FhirDateTime? _whenHandedOver;
        [JsonPropertyName("whenHandedOver")]
        public FhirDateTime? WhenHandedOver { get => _whenHandedOver; set { _whenHandedOver = value; OnPropertyChangedByClr(nameof(WhenHandedOver), value); } }

    }
}
