// <auto-generated>
#nullable enable
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
using System.Text.Json.Nodes;
using System.Text.Json.Serialization;
using System.Linq;
using FhirCore.Base;
using DataTypeServices.TypeFramework;
using DataTypeServices.DataTypes.MetaTypes;
namespace FhirSDK.Resources.R5
{
    /// <summary>
    /// Pure binary content defined by a format other than FHIR
    /// </summary>
    public partial class Binary : ResourceBase
    {
        public override string ResourceType => "Binary";

        public Binary() { }
        public Binary(string json) { SetRawFrom(JsonNode.Parse(json)); }
        public Binary(JsonNode? source) { SetRawFrom(source); }
        protected override void OnPropertyChanged(string propertyName, object? newValue) { base.OnPropertyChanged(propertyName, newValue); }

        private FhirCode? _contentType;
        [JsonPropertyName("contentType")]
        public FhirCode ContentType { get => _contentType ?? throw new InvalidOperationException("ContentType is required"); set { _contentType = value; OnPropertyChangedByClr(nameof(ContentType), value); } }

        private FhirBase64Binary? _data;
        [JsonPropertyName("data")]
        public FhirBase64Binary? Data { get => _data; set { _data = value; OnPropertyChangedByClr(nameof(Data), value); } }

        private ReferenceType? _securityContext;
        [JsonPropertyName("securityContext")]
        public ReferenceType? SecurityContext { get => _securityContext; set { _securityContext = value; OnPropertyChangedByClr(nameof(SecurityContext), value); } }

    }
}
