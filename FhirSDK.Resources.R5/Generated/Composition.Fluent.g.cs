// <auto-generated>
#nullable enable
using System.Collections.Generic;
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
namespace FhirSDK.Resources.R5
{
    public static class CompositionFluentExtensions
    {
        public static Composition AddAttester(this Composition r, BackboneElement item) { r.Attester ??= new List<BackboneElement>(); r.Attester!.Add(item); return r; }
        public static Composition AddAuthor(this Composition r, ReferenceType item) { r.Author ??= new List<ReferenceType>(); r.Author!.Add(item); return r; }
        public static Composition AddCategory(this Composition r, CodeableConcept item) { r.Category ??= new List<CodeableConcept>(); r.Category!.Add(item); return r; }
        public static Composition AddContained(this Composition r, Resource item) { r.Contained ??= new List<Resource>(); r.Contained!.Add(item); return r; }
        public static Composition WithCustodian(this Composition r, ReferenceType value) { r.Custodian = value; return r; }
        public static Composition WithDate(this Composition r, FhirDateTime value) { r.Date = value; return r; }
        public static Composition WithEncounter(this Composition r, ReferenceType value) { r.Encounter = value; return r; }
        public static Composition AddEvent(this Composition r, BackboneElement item) { r.Event ??= new List<BackboneElement>(); r.Event!.Add(item); return r; }
        public static Composition AddIdentifier(this Composition r, Identifier item) { r.Identifier ??= new List<Identifier>(); r.Identifier!.Add(item); return r; }
        public static Composition WithName(this Composition r, FhirString value) { r.Name = value; return r; }
        public static Composition AddNote(this Composition r, Annotation item) { r.Note ??= new List<Annotation>(); r.Note!.Add(item); return r; }
        public static Composition AddRelatesTo(this Composition r, RelatedArtifact item) { r.RelatesTo ??= new List<RelatedArtifact>(); r.RelatesTo!.Add(item); return r; }
        public static Composition AddSection(this Composition r, BackboneElement item) { r.Section ??= new List<BackboneElement>(); r.Section!.Add(item); return r; }
        public static Composition WithStatus(this Composition r, FhirCode value) { r.Status = value; return r; }
        public static Composition AddSubject(this Composition r, ReferenceType item) { r.Subject ??= new List<ReferenceType>(); r.Subject!.Add(item); return r; }
        public static Composition WithText(this Composition r, Narrative value) { r.Text = value; return r; }
        public static Composition WithTitle(this Composition r, FhirString value) { r.Title = value; return r; }
        public static Composition WithType(this Composition r, CodeableConcept value) { r.Type = value; return r; }
        public static Composition WithUrl(this Composition r, FhirUri value) { r.Url = value; return r; }
        public static Composition AddUseContext(this Composition r, UsageContext item) { r.UseContext ??= new List<UsageContext>(); r.UseContext!.Add(item); return r; }
        public static Composition WithVersion(this Composition r, FhirString value) { r.Version = value; return r; }
    }
}
