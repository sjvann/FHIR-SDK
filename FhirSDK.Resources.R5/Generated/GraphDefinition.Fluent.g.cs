// <auto-generated>
#nullable enable
using System.Collections.Generic;
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
namespace FhirSDK.Resources.R5
{
    public static class GraphDefinitionFluentExtensions
    {
        public static GraphDefinition AddContact(this GraphDefinition r, ContactDetail item) { r.Contact ??= new List<ContactDetail>(); r.Contact!.Add(item); return r; }
        public static GraphDefinition AddContained(this GraphDefinition r, Resource item) { r.Contained ??= new List<Resource>(); r.Contained!.Add(item); return r; }
        public static GraphDefinition WithCopyright(this GraphDefinition r, FhirMarkdown value) { r.Copyright = value; return r; }
        public static GraphDefinition WithCopyrightLabel(this GraphDefinition r, FhirString value) { r.CopyrightLabel = value; return r; }
        public static GraphDefinition WithDate(this GraphDefinition r, FhirDateTime value) { r.Date = value; return r; }
        public static GraphDefinition WithDescription(this GraphDefinition r, FhirMarkdown value) { r.Description = value; return r; }
        public static GraphDefinition WithExperimental(this GraphDefinition r, FhirBoolean value) { r.Experimental = value; return r; }
        public static GraphDefinition AddIdentifier(this GraphDefinition r, Identifier item) { r.Identifier ??= new List<Identifier>(); r.Identifier!.Add(item); return r; }
        public static GraphDefinition AddJurisdiction(this GraphDefinition r, CodeableConcept item) { r.Jurisdiction ??= new List<CodeableConcept>(); r.Jurisdiction!.Add(item); return r; }
        public static GraphDefinition AddLink(this GraphDefinition r, BackboneElement item) { r.Link ??= new List<BackboneElement>(); r.Link!.Add(item); return r; }
        public static GraphDefinition WithName(this GraphDefinition r, FhirString value) { r.Name = value; return r; }
        public static GraphDefinition AddNode(this GraphDefinition r, BackboneElement item) { r.Node ??= new List<BackboneElement>(); r.Node!.Add(item); return r; }
        public static GraphDefinition WithPublisher(this GraphDefinition r, FhirString value) { r.Publisher = value; return r; }
        public static GraphDefinition WithPurpose(this GraphDefinition r, FhirMarkdown value) { r.Purpose = value; return r; }
        public static GraphDefinition WithStart(this GraphDefinition r, FhirId value) { r.Start = value; return r; }
        public static GraphDefinition WithStatus(this GraphDefinition r, FhirCode value) { r.Status = value; return r; }
        public static GraphDefinition WithText(this GraphDefinition r, Narrative value) { r.Text = value; return r; }
        public static GraphDefinition WithTitle(this GraphDefinition r, FhirString value) { r.Title = value; return r; }
        public static GraphDefinition WithUrl(this GraphDefinition r, FhirUri value) { r.Url = value; return r; }
        public static GraphDefinition AddUseContext(this GraphDefinition r, UsageContext item) { r.UseContext ??= new List<UsageContext>(); r.UseContext!.Add(item); return r; }
        public static GraphDefinition WithVersion(this GraphDefinition r, FhirString value) { r.Version = value; return r; }
        public static GraphDefinition WithVersionAlgorithmString(this GraphDefinition r, FhirString value) { r.VersionAlgorithmString = value; return r; }
        public static GraphDefinition WithVersionAlgorithmCoding(this GraphDefinition r, Coding value) { r.VersionAlgorithmCoding = value; return r; }
    }
}
