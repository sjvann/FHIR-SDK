// <auto-generated>
#nullable enable
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
using System.Text.Json.Nodes;
using System.Text.Json.Serialization;
using System.Linq;
using FhirCore.Base;
using DataTypeServices.TypeFramework;
using DataTypeServices.DataTypes.MetaTypes;
namespace FhirSDK.Resources.R5
{
    /// <summary>
    /// A resource that describes a message that is exchanged between systems
    /// </summary>
    public partial class MessageHeader : ResourceBase
    {
        public override string ResourceType => "MessageHeader";

        public MessageHeader() { }
        public MessageHeader(string json) { SetRawFrom(JsonNode.Parse(json)); }
        public MessageHeader(JsonNode? source) { SetRawFrom(source); }
        protected override void OnPropertyChanged(string propertyName, object? newValue) { base.OnPropertyChanged(propertyName, newValue); }

        private ReferenceType? _author;
        [JsonPropertyName("author")]
        public ReferenceType? Author { get => _author; set { _author = value; OnPropertyChangedByClr(nameof(Author), value); } }

        private List<Resource>? _contained;
        [JsonPropertyName("contained")]
        public List<Resource>? Contained { get => _contained; set { _contained = value; OnPropertyChangedByClr(nameof(Contained), value); } }

        private FhirCanonical? _definition;
        [JsonPropertyName("definition")]
        public FhirCanonical? Definition { get => _definition; set { _definition = value; OnPropertyChangedByClr(nameof(Definition), value); } }

        private List<MessageHeader_Destination>? _destination;
        [JsonPropertyName("destination")]
        public List<MessageHeader_Destination>? Destination { get => _destination; set { _destination = value; OnPropertyChangedByClr(nameof(Destination), value); } }

        /// <summary>
        /// Message destination application(s)
        /// </summary>
        public partial class MessageHeader_Destination : BackboneElement<MessageHeader_Destination>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "MessageHeader_Destination" : "messageHeader_Destination";
            private FhirUrl? _endpointurl;
        [JsonPropertyName("endpointurl")]
        public FhirUrl? Endpointurl { get => _endpointurl; set { _endpointurl = value; if (value != null) {{ _endpointReference = null; OnPropertyChanged("endpointReference", null); }}; OnPropertyChanged("endpointurl", value); } }

            private ReferenceType? _endpointReference;
        [JsonPropertyName("endpointReference")]
        public ReferenceType? EndpointReference { get => _endpointReference; set { _endpointReference = value; if (value != null) {{ _endpointurl = null; OnPropertyChanged("endpointurl", null); }}; OnPropertyChanged("endpointReference", value); } }

            private FhirString? _name;
        [JsonPropertyName("name")]
        public FhirString? Name { get => _name; set { _name = value; } }

            private ReferenceType? _receiver;
        [JsonPropertyName("receiver")]
        public ReferenceType? Receiver { get => _receiver; set { _receiver = value; } }

            private ReferenceType? _target;
        [JsonPropertyName("target")]
        public ReferenceType? Target { get => _target; set { _target = value; } }

        }

        private Coding? _eventCoding;
        [JsonPropertyName("eventCoding")]
        public Coding? EventCoding { get => _eventCoding; set { _eventCoding = value; if (value != null) {{ _eventcanonical = null; OnPropertyChangedByClr(nameof(Eventcanonical), null); }}; OnPropertyChangedByClr(nameof(EventCoding), value); } }

        private FhirCanonical? _eventcanonical;
        [JsonPropertyName("eventcanonical")]
        public FhirCanonical? Eventcanonical { get => _eventcanonical; set { _eventcanonical = value; if (value != null) {{ _eventCoding = null; OnPropertyChangedByClr(nameof(EventCoding), null); }}; OnPropertyChangedByClr(nameof(Eventcanonical), value); } }

        private List<ReferenceType>? _focus;
        [JsonPropertyName("focus")]
        public List<ReferenceType>? Focus { get => _focus; set { _focus = value; OnPropertyChangedByClr(nameof(Focus), value); } }

        private CodeableConcept? _reason;
        [JsonPropertyName("reason")]
        public CodeableConcept? Reason { get => _reason; set { _reason = value; OnPropertyChangedByClr(nameof(Reason), value); } }

        private MessageHeader_Response? _response;
        [JsonPropertyName("response")]
        public MessageHeader_Response? Response { get => _response; set { _response = value; OnPropertyChangedByClr(nameof(Response), value); } }

        /// <summary>
        /// If this is a reply to prior message
        /// </summary>
        public partial class MessageHeader_Response : BackboneElement<MessageHeader_Response>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "MessageHeader_Response" : "messageHeader_Response";
            private FhirCode? _code;
        [JsonPropertyName("code")]
        public FhirCode Code { get => _code ?? throw new InvalidOperationException("Code is required"); set { _code = value; } }

            private ReferenceType? _details;
        [JsonPropertyName("details")]
        public ReferenceType? Details { get => _details; set { _details = value; } }

            private Identifier? _identifier;
        [JsonPropertyName("identifier")]
        public Identifier Identifier { get => _identifier ?? throw new InvalidOperationException("Identifier is required"); set { _identifier = value; } }

        }

        private ReferenceType? _responsible;
        [JsonPropertyName("responsible")]
        public ReferenceType? Responsible { get => _responsible; set { _responsible = value; OnPropertyChangedByClr(nameof(Responsible), value); } }

        private ReferenceType? _sender;
        [JsonPropertyName("sender")]
        public ReferenceType? Sender { get => _sender; set { _sender = value; OnPropertyChangedByClr(nameof(Sender), value); } }

        private MessageHeader_Source? _source;
        [JsonPropertyName("source")]
        public MessageHeader_Source Source { get => _source ?? throw new InvalidOperationException("Source is required"); set { _source = value; OnPropertyChangedByClr(nameof(Source), value); } }

        /// <summary>
        /// Message source application
        /// </summary>
        public partial class MessageHeader_Source : BackboneElement<MessageHeader_Source>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "MessageHeader_Source" : "messageHeader_Source";
            private ContactPoint? _contact;
        [JsonPropertyName("contact")]
        public ContactPoint? Contact { get => _contact; set { _contact = value; } }

            private FhirUrl? _endpointurl;
        [JsonPropertyName("endpointurl")]
        public FhirUrl? Endpointurl { get => _endpointurl; set { _endpointurl = value; if (value != null) {{ _endpointReference = null; OnPropertyChanged("endpointReference", null); }}; OnPropertyChanged("endpointurl", value); } }

            private ReferenceType? _endpointReference;
        [JsonPropertyName("endpointReference")]
        public ReferenceType? EndpointReference { get => _endpointReference; set { _endpointReference = value; if (value != null) {{ _endpointurl = null; OnPropertyChanged("endpointurl", null); }}; OnPropertyChanged("endpointReference", value); } }

            private FhirString? _name;
        [JsonPropertyName("name")]
        public FhirString? Name { get => _name; set { _name = value; } }

            private FhirString? _software;
        [JsonPropertyName("software")]
        public FhirString? Software { get => _software; set { _software = value; } }

            private FhirString? _version;
        [JsonPropertyName("version")]
        public FhirString? Version { get => _version; set { _version = value; } }

        }

        private Narrative? _text;
        [JsonPropertyName("text")]
        public Narrative? Text { get => _text; set { _text = value; OnPropertyChangedByClr(nameof(Text), value); } }

    }
}
