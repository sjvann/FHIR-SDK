// <auto-generated>
#nullable enable
using System.Collections.Generic;
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
namespace FhirSDK.Resources.R5
{
    public static class DocumentReferenceFluentExtensions
    {
        public static DocumentReference AddAttester(this DocumentReference r, BackboneElement item) { r.Attester ??= new List<BackboneElement>(); r.Attester!.Add(item); return r; }
        public static DocumentReference AddAuthor(this DocumentReference r, ReferenceType item) { r.Author ??= new List<ReferenceType>(); r.Author!.Add(item); return r; }
        public static DocumentReference AddBasedOn(this DocumentReference r, ReferenceType item) { r.BasedOn ??= new List<ReferenceType>(); r.BasedOn!.Add(item); return r; }
        public static DocumentReference AddBodySite(this DocumentReference r, CodeableReference item) { r.BodySite ??= new List<CodeableReference>(); r.BodySite!.Add(item); return r; }
        public static DocumentReference AddCategory(this DocumentReference r, CodeableConcept item) { r.Category ??= new List<CodeableConcept>(); r.Category!.Add(item); return r; }
        public static DocumentReference AddContained(this DocumentReference r, Resource item) { r.Contained ??= new List<Resource>(); r.Contained!.Add(item); return r; }
        public static DocumentReference AddContent(this DocumentReference r, BackboneElement item) { r.Content ??= new List<BackboneElement>(); r.Content!.Add(item); return r; }
        public static DocumentReference AddContext(this DocumentReference r, ReferenceType item) { r.Context ??= new List<ReferenceType>(); r.Context!.Add(item); return r; }
        public static DocumentReference WithCustodian(this DocumentReference r, ReferenceType value) { r.Custodian = value; return r; }
        public static DocumentReference WithDate(this DocumentReference r, FhirInstant value) { r.Date = value; return r; }
        public static DocumentReference WithDescription(this DocumentReference r, FhirMarkdown value) { r.Description = value; return r; }
        public static DocumentReference WithDocStatus(this DocumentReference r, FhirCode value) { r.DocStatus = value; return r; }
        public static DocumentReference AddEvent(this DocumentReference r, CodeableReference item) { r.Event ??= new List<CodeableReference>(); r.Event!.Add(item); return r; }
        public static DocumentReference WithFacilityType(this DocumentReference r, CodeableConcept value) { r.FacilityType = value; return r; }
        public static DocumentReference AddIdentifier(this DocumentReference r, Identifier item) { r.Identifier ??= new List<Identifier>(); r.Identifier!.Add(item); return r; }
        public static DocumentReference AddModality(this DocumentReference r, CodeableConcept item) { r.Modality ??= new List<CodeableConcept>(); r.Modality!.Add(item); return r; }
        public static DocumentReference WithPeriod(this DocumentReference r, Period value) { r.Period = value; return r; }
        public static DocumentReference WithPracticeSetting(this DocumentReference r, CodeableConcept value) { r.PracticeSetting = value; return r; }
        public static DocumentReference AddRelatesTo(this DocumentReference r, BackboneElement item) { r.RelatesTo ??= new List<BackboneElement>(); r.RelatesTo!.Add(item); return r; }
        public static DocumentReference AddSecurityLabel(this DocumentReference r, CodeableConcept item) { r.SecurityLabel ??= new List<CodeableConcept>(); r.SecurityLabel!.Add(item); return r; }
        public static DocumentReference WithStatus(this DocumentReference r, FhirCode value) { r.Status = value; return r; }
        public static DocumentReference WithSubject(this DocumentReference r, ReferenceType value) { r.Subject = value; return r; }
        public static DocumentReference WithText(this DocumentReference r, Narrative value) { r.Text = value; return r; }
        public static DocumentReference WithType(this DocumentReference r, CodeableConcept value) { r.Type = value; return r; }
        public static DocumentReference WithVersion(this DocumentReference r, FhirString value) { r.Version = value; return r; }
    }
}
