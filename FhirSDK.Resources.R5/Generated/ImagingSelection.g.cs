// <auto-generated>
#nullable enable
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
using System.Text.Json.Nodes;
using System.Text.Json.Serialization;
using System.Linq;
using FhirCore.Base;
using DataTypeServices.TypeFramework;
using DataTypeServices.DataTypes.MetaTypes;
namespace FhirSDK.Resources.R5
{
    /// <summary>
    /// A selection of DICOM SOP instances and/or frames
    /// </summary>
    public partial class ImagingSelection : ResourceBase
    {
        public override string ResourceType => "ImagingSelection";

        public ImagingSelection() { }
        public ImagingSelection(string json) { SetRawFrom(JsonNode.Parse(json)); }
        public ImagingSelection(JsonNode? source) { SetRawFrom(source); }
        protected override void OnPropertyChanged(string propertyName, object? newValue) { base.OnPropertyChanged(propertyName, newValue); }

        private List<ReferenceType>? _basedOn;
        [JsonPropertyName("basedOn")]
        public List<ReferenceType>? BasedOn { get => _basedOn; set { _basedOn = value; OnPropertyChangedByClr(nameof(BasedOn), value); } }

        private CodeableReference? _bodySite;
        [JsonPropertyName("bodySite")]
        public CodeableReference? BodySite { get => _bodySite; set { _bodySite = value; OnPropertyChangedByClr(nameof(BodySite), value); } }

        private List<CodeableConcept>? _category;
        [JsonPropertyName("category")]
        public List<CodeableConcept>? Category { get => _category; set { _category = value; OnPropertyChangedByClr(nameof(Category), value); } }

        private CodeableConcept? _code;
        [JsonPropertyName("code")]
        public CodeableConcept Code { get => _code ?? throw new InvalidOperationException("Code is required"); set { _code = value; OnPropertyChangedByClr(nameof(Code), value); } }

        private List<Resource>? _contained;
        [JsonPropertyName("contained")]
        public List<Resource>? Contained { get => _contained; set { _contained = value; OnPropertyChangedByClr(nameof(Contained), value); } }

        private List<ReferenceType>? _derivedFrom;
        [JsonPropertyName("derivedFrom")]
        public List<ReferenceType>? DerivedFrom { get => _derivedFrom; set { _derivedFrom = value; OnPropertyChangedByClr(nameof(DerivedFrom), value); } }

        private List<ReferenceType>? _endpoint;
        [JsonPropertyName("endpoint")]
        public List<ReferenceType>? Endpoint { get => _endpoint; set { _endpoint = value; OnPropertyChangedByClr(nameof(Endpoint), value); } }

        private List<ReferenceType>? _focus;
        [JsonPropertyName("focus")]
        public List<ReferenceType>? Focus { get => _focus; set { _focus = value; OnPropertyChangedByClr(nameof(Focus), value); } }

        private FhirId? _frameOfReferenceUid;
        [JsonPropertyName("frameOfReferenceUid")]
        public FhirId? FrameOfReferenceUid { get => _frameOfReferenceUid; set { _frameOfReferenceUid = value; OnPropertyChangedByClr(nameof(FrameOfReferenceUid), value); } }

        private List<Identifier>? _identifier;
        [JsonPropertyName("identifier")]
        public List<Identifier>? Identifier { get => _identifier; set { _identifier = value; OnPropertyChangedByClr(nameof(Identifier), value); } }

        private List<ImagingSelection_Instance>? _instance;
        [JsonPropertyName("instance")]
        public List<ImagingSelection_Instance>? Instance { get => _instance; set { _instance = value; OnPropertyChangedByClr(nameof(Instance), value); } }

        /// <summary>
        /// The selected instances
        /// </summary>
        public partial class ImagingSelection_Instance : BackboneElement<ImagingSelection_Instance>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "ImagingSelection_Instance" : "imagingSelection_Instance";
            private List<ImagingSelection_Instance_ImageRegion2D>? _imageRegion2D;
        [JsonPropertyName("imageRegion2D")]
        public List<ImagingSelection_Instance_ImageRegion2D>? ImageRegion2D { get => _imageRegion2D; set { _imageRegion2D = value; } }

            /// <summary>
            /// A specific 2D region in a DICOM image / frame
            /// </summary>
            public partial class ImagingSelection_Instance_ImageRegion2D : BackboneElement<ImagingSelection_Instance_ImageRegion2D>
            {
                public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "ImagingSelection_Instance_ImageRegion2D" : "imagingSelection_Instance_ImageRegion2D";
                private List<FhirDecimal> _coordinate = new();
        [JsonPropertyName("coordinate")]
        public List<FhirDecimal> Coordinate { get => _coordinate; set { _coordinate = value; } }

                private FhirCode? _regionType;
        [JsonPropertyName("regionType")]
        public FhirCode RegionType { get => _regionType ?? throw new InvalidOperationException("RegionType is required"); set { _regionType = value; } }

            }

            private List<ImagingSelection_Instance_ImageRegion3D>? _imageRegion3D;
        [JsonPropertyName("imageRegion3D")]
        public List<ImagingSelection_Instance_ImageRegion3D>? ImageRegion3D { get => _imageRegion3D; set { _imageRegion3D = value; } }

            /// <summary>
            /// A specific 3D region in a DICOM frame of reference
            /// </summary>
            public partial class ImagingSelection_Instance_ImageRegion3D : BackboneElement<ImagingSelection_Instance_ImageRegion3D>
            {
                public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "ImagingSelection_Instance_ImageRegion3D" : "imagingSelection_Instance_ImageRegion3D";
                private List<FhirDecimal> _coordinate = new();
        [JsonPropertyName("coordinate")]
        public List<FhirDecimal> Coordinate { get => _coordinate; set { _coordinate = value; } }

                private FhirCode? _regionType;
        [JsonPropertyName("regionType")]
        public FhirCode RegionType { get => _regionType ?? throw new InvalidOperationException("RegionType is required"); set { _regionType = value; } }

            }

            private FhirUnsignedInt? _number;
        [JsonPropertyName("number")]
        public FhirUnsignedInt? Number { get => _number; set { _number = value; } }

            private Coding? _sopClass;
        [JsonPropertyName("sopClass")]
        public Coding? SopClass { get => _sopClass; set { _sopClass = value; } }

            private List<FhirString>? _subset;
        [JsonPropertyName("subset")]
        public List<FhirString>? Subset { get => _subset; set { _subset = value; } }

            private FhirId? _uid;
        [JsonPropertyName("uid")]
        public FhirId Uid { get => _uid ?? throw new InvalidOperationException("Uid is required"); set { _uid = value; } }

        }

        private FhirInstant? _issued;
        [JsonPropertyName("issued")]
        public FhirInstant? Issued { get => _issued; set { _issued = value; OnPropertyChangedByClr(nameof(Issued), value); } }

        private List<ImagingSelection_Performer>? _performer;
        [JsonPropertyName("performer")]
        public List<ImagingSelection_Performer>? Performer { get => _performer; set { _performer = value; OnPropertyChangedByClr(nameof(Performer), value); } }

        /// <summary>
        /// Selector of the instances (human or machine)
        /// </summary>
        public partial class ImagingSelection_Performer : BackboneElement<ImagingSelection_Performer>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "ImagingSelection_Performer" : "imagingSelection_Performer";
            private ReferenceType? _actor;
        [JsonPropertyName("actor")]
        public ReferenceType? Actor { get => _actor; set { _actor = value; } }

            private CodeableConcept? _function;
        [JsonPropertyName("function")]
        public CodeableConcept? Function { get => _function; set { _function = value; } }

        }

        private FhirUnsignedInt? _seriesNumber;
        [JsonPropertyName("seriesNumber")]
        public FhirUnsignedInt? SeriesNumber { get => _seriesNumber; set { _seriesNumber = value; OnPropertyChangedByClr(nameof(SeriesNumber), value); } }

        private FhirId? _seriesUid;
        [JsonPropertyName("seriesUid")]
        public FhirId? SeriesUid { get => _seriesUid; set { _seriesUid = value; OnPropertyChangedByClr(nameof(SeriesUid), value); } }

        private FhirCode? _status;
        [JsonPropertyName("status")]
        public FhirCode Status { get => _status ?? throw new InvalidOperationException("Status is required"); set { _status = value; OnPropertyChangedByClr(nameof(Status), value); } }

        private FhirId? _studyUid;
        [JsonPropertyName("studyUid")]
        public FhirId? StudyUid { get => _studyUid; set { _studyUid = value; OnPropertyChangedByClr(nameof(StudyUid), value); } }

        private ReferenceType? _subject;
        [JsonPropertyName("subject")]
        public ReferenceType? Subject { get => _subject; set { _subject = value; OnPropertyChangedByClr(nameof(Subject), value); } }

        private Narrative? _text;
        [JsonPropertyName("text")]
        public Narrative? Text { get => _text; set { _text = value; OnPropertyChangedByClr(nameof(Text), value); } }

    }
}
