// <auto-generated>
#nullable enable
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
using System.Text.Json.Nodes;
using System.Text.Json.Serialization;
using System.Linq;
using FhirCore.Base;
using DataTypeServices.TypeFramework;
using DataTypeServices.DataTypes.MetaTypes;
namespace FhirSDK.Resources.R5
{
    /// <summary>
    /// A person that is related to a patient, but who is not a direct target of care
    /// </summary>
    public partial class RelatedPerson : ResourceBase
    {
        public override string ResourceType => "RelatedPerson";

        public RelatedPerson() { }
        public RelatedPerson(string json) { SetRawFrom(JsonNode.Parse(json)); }
        public RelatedPerson(JsonNode? source) { SetRawFrom(source); }
        protected override void OnPropertyChanged(string propertyName, object? newValue) { base.OnPropertyChanged(propertyName, newValue); }

        private FhirBoolean? _active;
        [JsonPropertyName("active")]
        public FhirBoolean? Active { get => _active; set { _active = value; OnPropertyChangedByClr(nameof(Active), value); } }

        private List<Address>? _address;
        [JsonPropertyName("address")]
        public List<Address>? Address { get => _address; set { _address = value; OnPropertyChangedByClr(nameof(Address), value); } }

        private FhirDate? _birthDate;
        [JsonPropertyName("birthDate")]
        public FhirDate? BirthDate { get => _birthDate; set { _birthDate = value; OnPropertyChangedByClr(nameof(BirthDate), value); } }

        private List<RelatedPerson_Communication>? _communication;
        [JsonPropertyName("communication")]
        public List<RelatedPerson_Communication>? Communication { get => _communication; set { _communication = value; OnPropertyChangedByClr(nameof(Communication), value); } }

        /// <summary>
        /// A language which may be used to communicate with the related person about the patient's health
        /// </summary>
        public partial class RelatedPerson_Communication : BackboneElement<RelatedPerson_Communication>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "RelatedPerson_Communication" : "relatedPerson_Communication";
            private CodeableConcept? _language;
        [JsonPropertyName("language")]
        public CodeableConcept Language { get => _language ?? throw new InvalidOperationException("Language is required"); set { _language = value; } }

            private FhirBoolean? _preferred;
        [JsonPropertyName("preferred")]
        public FhirBoolean? Preferred { get => _preferred; set { _preferred = value; } }

        }

        private List<Resource>? _contained;
        [JsonPropertyName("contained")]
        public List<Resource>? Contained { get => _contained; set { _contained = value; OnPropertyChangedByClr(nameof(Contained), value); } }

        private FhirCode? _gender;
        [JsonPropertyName("gender")]
        public FhirCode? Gender { get => _gender; set { _gender = value; OnPropertyChangedByClr(nameof(Gender), value); } }

        private List<Identifier>? _identifier;
        [JsonPropertyName("identifier")]
        public List<Identifier>? Identifier { get => _identifier; set { _identifier = value; OnPropertyChangedByClr(nameof(Identifier), value); } }

        private List<HumanName>? _name;
        [JsonPropertyName("name")]
        public List<HumanName>? Name { get => _name; set { _name = value; OnPropertyChangedByClr(nameof(Name), value); } }

        private ReferenceType? _patient;
        [JsonPropertyName("patient")]
        public ReferenceType Patient { get => _patient ?? throw new InvalidOperationException("Patient is required"); set { _patient = value; OnPropertyChangedByClr(nameof(Patient), value); } }

        private Period? _period;
        [JsonPropertyName("period")]
        public Period? Period { get => _period; set { _period = value; OnPropertyChangedByClr(nameof(Period), value); } }

        private List<Attachment>? _photo;
        [JsonPropertyName("photo")]
        public List<Attachment>? Photo { get => _photo; set { _photo = value; OnPropertyChangedByClr(nameof(Photo), value); } }

        private List<CodeableConcept>? _relationship;
        [JsonPropertyName("relationship")]
        public List<CodeableConcept>? Relationship { get => _relationship; set { _relationship = value; OnPropertyChangedByClr(nameof(Relationship), value); } }

        private List<ContactPoint>? _telecom;
        [JsonPropertyName("telecom")]
        public List<ContactPoint>? Telecom { get => _telecom; set { _telecom = value; OnPropertyChangedByClr(nameof(Telecom), value); } }

        private Narrative? _text;
        [JsonPropertyName("text")]
        public Narrative? Text { get => _text; set { _text = value; OnPropertyChangedByClr(nameof(Text), value); } }

    }
}
