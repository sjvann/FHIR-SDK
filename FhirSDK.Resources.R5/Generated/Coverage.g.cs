// <auto-generated>
#nullable enable
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
using System.Text.Json.Nodes;
using System.Text.Json.Serialization;
using System.Linq;
using FhirCore.Base;
using DataTypeServices.TypeFramework;
using DataTypeServices.DataTypes.MetaTypes;
namespace FhirSDK.Resources.R5
{
    /// <summary>
    /// Insurance or medical plan or a payment agreement
    /// </summary>
    public partial class Coverage : ResourceBase
    {
        public override string ResourceType => "Coverage";

        public Coverage() { }
        public Coverage(string json) { SetRawFrom(JsonNode.Parse(json)); }
        public Coverage(JsonNode? source) { SetRawFrom(source); }
        protected override void OnPropertyChanged(string propertyName, object? newValue) { base.OnPropertyChanged(propertyName, newValue); }

        private ReferenceType? _beneficiary;
        [JsonPropertyName("beneficiary")]
        public ReferenceType Beneficiary { get => _beneficiary ?? throw new InvalidOperationException("Beneficiary is required"); set { _beneficiary = value; OnPropertyChangedByClr(nameof(Beneficiary), value); } }

        private List<Coverage_Class>? _class;
        [JsonPropertyName("class")]
        public List<Coverage_Class>? Class { get => _class; set { _class = value; OnPropertyChangedByClr(nameof(Class), value); } }

        /// <summary>
        /// Additional coverage classifications
        /// </summary>
        public partial class Coverage_Class : BackboneElement<Coverage_Class>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "Coverage_Class" : "coverage_Class";
            private FhirString? _name;
        [JsonPropertyName("name")]
        public FhirString? Name { get => _name; set { _name = value; } }

            private CodeableConcept? _type;
        [JsonPropertyName("type")]
        public CodeableConcept Type { get => _type ?? throw new InvalidOperationException("Type is required"); set { _type = value; } }

            private Identifier? _value;
        [JsonPropertyName("value")]
        public Identifier Value { get => _value ?? throw new InvalidOperationException("Value is required"); set { _value = value; } }

        }

        private List<Resource>? _contained;
        [JsonPropertyName("contained")]
        public List<Resource>? Contained { get => _contained; set { _contained = value; OnPropertyChangedByClr(nameof(Contained), value); } }

        private List<ReferenceType>? _contract;
        [JsonPropertyName("contract")]
        public List<ReferenceType>? Contract { get => _contract; set { _contract = value; OnPropertyChangedByClr(nameof(Contract), value); } }

        private List<Coverage_CostToBeneficiary>? _costToBeneficiary;
        [JsonPropertyName("costToBeneficiary")]
        public List<Coverage_CostToBeneficiary>? CostToBeneficiary { get => _costToBeneficiary; set { _costToBeneficiary = value; OnPropertyChangedByClr(nameof(CostToBeneficiary), value); } }

        /// <summary>
        /// Patient payments for services/products
        /// </summary>
        public partial class Coverage_CostToBeneficiary : BackboneElement<Coverage_CostToBeneficiary>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "Coverage_CostToBeneficiary" : "coverage_CostToBeneficiary";
            private CodeableConcept? _category;
        [JsonPropertyName("category")]
        public CodeableConcept? Category { get => _category; set { _category = value; } }

            private List<Coverage_CostToBeneficiary_Exception>? _exception;
        [JsonPropertyName("exception")]
        public List<Coverage_CostToBeneficiary_Exception>? Exception { get => _exception; set { _exception = value; } }

            /// <summary>
            /// Exceptions for patient payments
            /// </summary>
            public partial class Coverage_CostToBeneficiary_Exception : BackboneElement<Coverage_CostToBeneficiary_Exception>
            {
                public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "Coverage_CostToBeneficiary_Exception" : "coverage_CostToBeneficiary_Exception";
                private Period? _period;
        [JsonPropertyName("period")]
        public Period? Period { get => _period; set { _period = value; } }

                private CodeableConcept? _type;
        [JsonPropertyName("type")]
        public CodeableConcept Type { get => _type ?? throw new InvalidOperationException("Type is required"); set { _type = value; } }

            }

            private CodeableConcept? _network;
        [JsonPropertyName("network")]
        public CodeableConcept? Network { get => _network; set { _network = value; } }

            private CodeableConcept? _term;
        [JsonPropertyName("term")]
        public CodeableConcept? Term { get => _term; set { _term = value; } }

            private CodeableConcept? _type;
        [JsonPropertyName("type")]
        public CodeableConcept? Type { get => _type; set { _type = value; } }

            private CodeableConcept? _unit;
        [JsonPropertyName("unit")]
        public CodeableConcept? Unit { get => _unit; set { _unit = value; } }

            private Quantity? _valueQuantity;
        [JsonPropertyName("valueQuantity")]
        public Quantity? ValueQuantity { get => _valueQuantity; set { _valueQuantity = value; if (value != null) {{ _valueMoney = null; OnPropertyChanged("valueMoney", null); }}; OnPropertyChanged("valueQuantity", value); } }

            private Money? _valueMoney;
        [JsonPropertyName("valueMoney")]
        public Money? ValueMoney { get => _valueMoney; set { _valueMoney = value; if (value != null) {{ _valueQuantity = null; OnPropertyChanged("valueQuantity", null); }}; OnPropertyChanged("valueMoney", value); } }

        }

        private FhirString? _dependent;
        [JsonPropertyName("dependent")]
        public FhirString? Dependent { get => _dependent; set { _dependent = value; OnPropertyChangedByClr(nameof(Dependent), value); } }

        private List<Identifier>? _identifier;
        [JsonPropertyName("identifier")]
        public List<Identifier>? Identifier { get => _identifier; set { _identifier = value; OnPropertyChangedByClr(nameof(Identifier), value); } }

        private ReferenceType? _insurancePlan;
        [JsonPropertyName("insurancePlan")]
        public ReferenceType? InsurancePlan { get => _insurancePlan; set { _insurancePlan = value; OnPropertyChangedByClr(nameof(InsurancePlan), value); } }

        private ReferenceType? _insurer;
        [JsonPropertyName("insurer")]
        public ReferenceType? Insurer { get => _insurer; set { _insurer = value; OnPropertyChangedByClr(nameof(Insurer), value); } }

        private FhirCode? _kind;
        [JsonPropertyName("kind")]
        public FhirCode Kind { get => _kind ?? throw new InvalidOperationException("Kind is required"); set { _kind = value; OnPropertyChangedByClr(nameof(Kind), value); } }

        private FhirString? _network;
        [JsonPropertyName("network")]
        public FhirString? Network { get => _network; set { _network = value; OnPropertyChangedByClr(nameof(Network), value); } }

        private FhirPositiveInt? _order;
        [JsonPropertyName("order")]
        public FhirPositiveInt? Order { get => _order; set { _order = value; OnPropertyChangedByClr(nameof(Order), value); } }

        private List<Coverage_PaymentBy>? _paymentBy;
        [JsonPropertyName("paymentBy")]
        public List<Coverage_PaymentBy>? PaymentBy { get => _paymentBy; set { _paymentBy = value; OnPropertyChangedByClr(nameof(PaymentBy), value); } }

        /// <summary>
        /// Self-pay parties and responsibility
        /// </summary>
        public partial class Coverage_PaymentBy : BackboneElement<Coverage_PaymentBy>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "Coverage_PaymentBy" : "coverage_PaymentBy";
            private ReferenceType? _party;
        [JsonPropertyName("party")]
        public ReferenceType Party { get => _party ?? throw new InvalidOperationException("Party is required"); set { _party = value; } }

            private FhirString? _responsibility;
        [JsonPropertyName("responsibility")]
        public FhirString? Responsibility { get => _responsibility; set { _responsibility = value; } }

        }

        private Period? _period;
        [JsonPropertyName("period")]
        public Period? Period { get => _period; set { _period = value; OnPropertyChangedByClr(nameof(Period), value); } }

        private ReferenceType? _policyHolder;
        [JsonPropertyName("policyHolder")]
        public ReferenceType? PolicyHolder { get => _policyHolder; set { _policyHolder = value; OnPropertyChangedByClr(nameof(PolicyHolder), value); } }

        private CodeableConcept? _relationship;
        [JsonPropertyName("relationship")]
        public CodeableConcept? Relationship { get => _relationship; set { _relationship = value; OnPropertyChangedByClr(nameof(Relationship), value); } }

        private FhirCode? _status;
        [JsonPropertyName("status")]
        public FhirCode Status { get => _status ?? throw new InvalidOperationException("Status is required"); set { _status = value; OnPropertyChangedByClr(nameof(Status), value); } }

        private FhirBoolean? _subrogation;
        [JsonPropertyName("subrogation")]
        public FhirBoolean? Subrogation { get => _subrogation; set { _subrogation = value; OnPropertyChangedByClr(nameof(Subrogation), value); } }

        private ReferenceType? _subscriber;
        [JsonPropertyName("subscriber")]
        public ReferenceType? Subscriber { get => _subscriber; set { _subscriber = value; OnPropertyChangedByClr(nameof(Subscriber), value); } }

        private List<Identifier>? _subscriberId;
        [JsonPropertyName("subscriberId")]
        public List<Identifier>? SubscriberId { get => _subscriberId; set { _subscriberId = value; OnPropertyChangedByClr(nameof(SubscriberId), value); } }

        private Narrative? _text;
        [JsonPropertyName("text")]
        public Narrative? Text { get => _text; set { _text = value; OnPropertyChangedByClr(nameof(Text), value); } }

        private CodeableConcept? _type;
        [JsonPropertyName("type")]
        public CodeableConcept? Type { get => _type; set { _type = value; OnPropertyChangedByClr(nameof(Type), value); } }

    }
}
