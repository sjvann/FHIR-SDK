// <auto-generated>
#nullable enable
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
using System.Text.Json.Nodes;
using System.Text.Json.Serialization;
using System.Linq;
using FhirCore.Base;
using DataTypeServices.TypeFramework;
using DataTypeServices.DataTypes.MetaTypes;
namespace FhirSDK.Resources.R5
{
    /// <summary>
    /// A set of resources composed into a single coherent clinical statement with clinical attestation
    /// </summary>
    public partial class Composition : ResourceBase
    {
        public override string ResourceType => "Composition";

        public Composition() { }
        public Composition(string json) { SetRawFrom(JsonNode.Parse(json)); }
        public Composition(JsonNode? source) { SetRawFrom(source); }
        protected override void OnPropertyChanged(string propertyName, object? newValue) { base.OnPropertyChanged(propertyName, newValue); }

        private List<Composition_Attester>? _attester;
        [JsonPropertyName("attester")]
        public List<Composition_Attester>? Attester { get => _attester; set { _attester = value; OnPropertyChangedByClr(nameof(Attester), value); } }

        /// <summary>
        /// Attests to accuracy of composition
        /// </summary>
        public partial class Composition_Attester : BackboneElement<Composition_Attester>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "Composition_Attester" : "composition_Attester";
            private CodeableConcept? _mode;
        [JsonPropertyName("mode")]
        public CodeableConcept Mode { get => _mode ?? throw new InvalidOperationException("Mode is required"); set { _mode = value; } }

            private ReferenceType? _party;
        [JsonPropertyName("party")]
        public ReferenceType? Party { get => _party; set { _party = value; } }

            private FhirDateTime? _time;
        [JsonPropertyName("time")]
        public FhirDateTime? Time { get => _time; set { _time = value; } }

        }

        private List<ReferenceType> _author = new();
        [JsonPropertyName("author")]
        public List<ReferenceType> Author { get => _author; set { _author = value; OnPropertyChangedByClr(nameof(Author), value); } }

        private List<CodeableConcept>? _category;
        [JsonPropertyName("category")]
        public List<CodeableConcept>? Category { get => _category; set { _category = value; OnPropertyChangedByClr(nameof(Category), value); } }

        private List<Resource>? _contained;
        [JsonPropertyName("contained")]
        public List<Resource>? Contained { get => _contained; set { _contained = value; OnPropertyChangedByClr(nameof(Contained), value); } }

        private ReferenceType? _custodian;
        [JsonPropertyName("custodian")]
        public ReferenceType? Custodian { get => _custodian; set { _custodian = value; OnPropertyChangedByClr(nameof(Custodian), value); } }

        private FhirDateTime? _date;
        [JsonPropertyName("date")]
        public FhirDateTime Date { get => _date ?? throw new InvalidOperationException("Date is required"); set { _date = value; OnPropertyChangedByClr(nameof(Date), value); } }

        private ReferenceType? _encounter;
        [JsonPropertyName("encounter")]
        public ReferenceType? Encounter { get => _encounter; set { _encounter = value; OnPropertyChangedByClr(nameof(Encounter), value); } }

        private List<Composition_Event>? _event;
        [JsonPropertyName("event")]
        public List<Composition_Event>? Event { get => _event; set { _event = value; OnPropertyChangedByClr(nameof(Event), value); } }

        /// <summary>
        /// The clinical service(s) being documented
        /// </summary>
        public partial class Composition_Event : BackboneElement<Composition_Event>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "Composition_Event" : "composition_Event";
            private List<CodeableReference>? _detail;
        [JsonPropertyName("detail")]
        public List<CodeableReference>? Detail { get => _detail; set { _detail = value; } }

            private Period? _period;
        [JsonPropertyName("period")]
        public Period? Period { get => _period; set { _period = value; } }

        }

        private List<Identifier>? _identifier;
        [JsonPropertyName("identifier")]
        public List<Identifier>? Identifier { get => _identifier; set { _identifier = value; OnPropertyChangedByClr(nameof(Identifier), value); } }

        private FhirString? _name;
        [JsonPropertyName("name")]
        public FhirString? Name { get => _name; set { _name = value; OnPropertyChangedByClr(nameof(Name), value); } }

        private List<Annotation>? _note;
        [JsonPropertyName("note")]
        public List<Annotation>? Note { get => _note; set { _note = value; OnPropertyChangedByClr(nameof(Note), value); } }

        private List<RelatedArtifact>? _relatesTo;
        [JsonPropertyName("relatesTo")]
        public List<RelatedArtifact>? RelatesTo { get => _relatesTo; set { _relatesTo = value; OnPropertyChangedByClr(nameof(RelatesTo), value); } }

        private List<Composition_Section>? _section;
        [JsonPropertyName("section")]
        public List<Composition_Section>? Section { get => _section; set { _section = value; OnPropertyChangedByClr(nameof(Section), value); } }

        /// <summary>
        /// Composition is broken into sections
        /// </summary>
        public partial class Composition_Section : BackboneElement<Composition_Section>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "Composition_Section" : "composition_Section";
            private List<ReferenceType>? _author;
        [JsonPropertyName("author")]
        public List<ReferenceType>? Author { get => _author; set { _author = value; } }

            private CodeableConcept? _code;
        [JsonPropertyName("code")]
        public CodeableConcept? Code { get => _code; set { _code = value; } }

            private CodeableConcept? _emptyReason;
        [JsonPropertyName("emptyReason")]
        public CodeableConcept? EmptyReason { get => _emptyReason; set { _emptyReason = value; } }

            private List<ReferenceType>? _entry;
        [JsonPropertyName("entry")]
        public List<ReferenceType>? Entry { get => _entry; set { _entry = value; } }

            private ReferenceType? _focus;
        [JsonPropertyName("focus")]
        public ReferenceType? Focus { get => _focus; set { _focus = value; } }

            private CodeableConcept? _orderedBy;
        [JsonPropertyName("orderedBy")]
        public CodeableConcept? OrderedBy { get => _orderedBy; set { _orderedBy = value; } }

            private List<FhirString>? _section;
        [JsonPropertyName("section")]
        public List<FhirString>? Section { get => _section; set { _section = value; } }

            private Narrative? _text;
        [JsonPropertyName("text")]
        public Narrative? Text { get => _text; set { _text = value; } }

            private FhirString? _title;
        [JsonPropertyName("title")]
        public FhirString? Title { get => _title; set { _title = value; } }

        }

        private FhirCode? _status;
        [JsonPropertyName("status")]
        public FhirCode Status { get => _status ?? throw new InvalidOperationException("Status is required"); set { _status = value; OnPropertyChangedByClr(nameof(Status), value); } }

        private List<ReferenceType>? _subject;
        [JsonPropertyName("subject")]
        public List<ReferenceType>? Subject { get => _subject; set { _subject = value; OnPropertyChangedByClr(nameof(Subject), value); } }

        private Narrative? _text;
        [JsonPropertyName("text")]
        public Narrative? Text { get => _text; set { _text = value; OnPropertyChangedByClr(nameof(Text), value); } }

        private FhirString? _title;
        [JsonPropertyName("title")]
        public FhirString Title { get => _title ?? throw new InvalidOperationException("Title is required"); set { _title = value; OnPropertyChangedByClr(nameof(Title), value); } }

        private CodeableConcept? _type;
        [JsonPropertyName("type")]
        public CodeableConcept Type { get => _type ?? throw new InvalidOperationException("Type is required"); set { _type = value; OnPropertyChangedByClr(nameof(Type), value); } }

        private FhirUri? _url;
        [JsonPropertyName("url")]
        public FhirUri? Url { get => _url; set { _url = value; OnPropertyChangedByClr(nameof(Url), value); } }

        private List<UsageContext>? _useContext;
        [JsonPropertyName("useContext")]
        public List<UsageContext>? UseContext { get => _useContext; set { _useContext = value; OnPropertyChangedByClr(nameof(UseContext), value); } }

        private FhirString? _version;
        [JsonPropertyName("version")]
        public FhirString? Version { get => _version; set { _version = value; OnPropertyChangedByClr(nameof(Version), value); } }

    }
}
