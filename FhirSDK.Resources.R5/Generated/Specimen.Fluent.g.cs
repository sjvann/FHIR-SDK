// <auto-generated>
#nullable enable
using System.Collections.Generic;
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
namespace FhirSDK.Resources.R5
{
    public static class SpecimenFluentExtensions
    {
        public static Specimen WithAccessionIdentifier(this Specimen r, Identifier value) { r.AccessionIdentifier = value; return r; }
        public static Specimen WithCollection(this Specimen r, BackboneElement value) { r.Collection = value; return r; }
        public static Specimen WithCombined(this Specimen r, FhirCode value) { r.Combined = value; return r; }
        public static Specimen AddCondition(this Specimen r, CodeableConcept item) { r.Condition ??= new List<CodeableConcept>(); r.Condition!.Add(item); return r; }
        public static Specimen AddContained(this Specimen r, Resource item) { r.Contained ??= new List<Resource>(); r.Contained!.Add(item); return r; }
        public static Specimen AddContainer(this Specimen r, BackboneElement item) { r.Container ??= new List<BackboneElement>(); r.Container!.Add(item); return r; }
        public static Specimen AddFeature(this Specimen r, BackboneElement item) { r.Feature ??= new List<BackboneElement>(); r.Feature!.Add(item); return r; }
        public static Specimen AddIdentifier(this Specimen r, Identifier item) { r.Identifier ??= new List<Identifier>(); r.Identifier!.Add(item); return r; }
        public static Specimen AddNote(this Specimen r, Annotation item) { r.Note ??= new List<Annotation>(); r.Note!.Add(item); return r; }
        public static Specimen AddParent(this Specimen r, ReferenceType item) { r.Parent ??= new List<ReferenceType>(); r.Parent!.Add(item); return r; }
        public static Specimen AddProcessing(this Specimen r, BackboneElement item) { r.Processing ??= new List<BackboneElement>(); r.Processing!.Add(item); return r; }
        public static Specimen WithReceivedTime(this Specimen r, FhirDateTime value) { r.ReceivedTime = value; return r; }
        public static Specimen AddRequest(this Specimen r, ReferenceType item) { r.Request ??= new List<ReferenceType>(); r.Request!.Add(item); return r; }
        public static Specimen AddRole(this Specimen r, CodeableConcept item) { r.Role ??= new List<CodeableConcept>(); r.Role!.Add(item); return r; }
        public static Specimen WithStatus(this Specimen r, FhirCode value) { r.Status = value; return r; }
        public static Specimen WithSubject(this Specimen r, ReferenceType value) { r.Subject = value; return r; }
        public static Specimen WithText(this Specimen r, Narrative value) { r.Text = value; return r; }
        public static Specimen WithType(this Specimen r, CodeableConcept value) { r.Type = value; return r; }
    }
}
