// <auto-generated>
#nullable enable
using System.Collections.Generic;
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
namespace FhirSDK.Resources.R5
{
    public static class MeasureFluentExtensions
    {
        public static Measure WithApprovalDate(this Measure r, FhirDate value) { r.ApprovalDate = value; return r; }
        public static Measure AddAuthor(this Measure r, ContactDetail item) { r.Author ??= new List<ContactDetail>(); r.Author!.Add(item); return r; }
        public static Measure WithBasis(this Measure r, FhirCode value) { r.Basis = value; return r; }
        public static Measure WithClinicalRecommendationStatement(this Measure r, FhirMarkdown value) { r.ClinicalRecommendationStatement = value; return r; }
        public static Measure WithCompositeScoring(this Measure r, CodeableConcept value) { r.CompositeScoring = value; return r; }
        public static Measure AddContact(this Measure r, ContactDetail item) { r.Contact ??= new List<ContactDetail>(); r.Contact!.Add(item); return r; }
        public static Measure AddContained(this Measure r, Resource item) { r.Contained ??= new List<Resource>(); r.Contained!.Add(item); return r; }
        public static Measure WithCopyright(this Measure r, FhirMarkdown value) { r.Copyright = value; return r; }
        public static Measure WithCopyrightLabel(this Measure r, FhirString value) { r.CopyrightLabel = value; return r; }
        public static Measure WithDate(this Measure r, FhirDateTime value) { r.Date = value; return r; }
        public static Measure WithDescription(this Measure r, FhirMarkdown value) { r.Description = value; return r; }
        public static Measure WithDisclaimer(this Measure r, FhirMarkdown value) { r.Disclaimer = value; return r; }
        public static Measure AddEditor(this Measure r, ContactDetail item) { r.Editor ??= new List<ContactDetail>(); r.Editor!.Add(item); return r; }
        public static Measure WithEffectivePeriod(this Measure r, Period value) { r.EffectivePeriod = value; return r; }
        public static Measure AddEndorser(this Measure r, ContactDetail item) { r.Endorser ??= new List<ContactDetail>(); r.Endorser!.Add(item); return r; }
        public static Measure WithExperimental(this Measure r, FhirBoolean value) { r.Experimental = value; return r; }
        public static Measure AddGroup(this Measure r, BackboneElement item) { r.Group ??= new List<BackboneElement>(); r.Group!.Add(item); return r; }
        public static Measure WithGuidance(this Measure r, FhirMarkdown value) { r.Guidance = value; return r; }
        public static Measure AddIdentifier(this Measure r, Identifier item) { r.Identifier ??= new List<Identifier>(); r.Identifier!.Add(item); return r; }
        public static Measure WithImprovementNotation(this Measure r, CodeableConcept value) { r.ImprovementNotation = value; return r; }
        public static Measure AddJurisdiction(this Measure r, CodeableConcept item) { r.Jurisdiction ??= new List<CodeableConcept>(); r.Jurisdiction!.Add(item); return r; }
        public static Measure WithLastReviewDate(this Measure r, FhirDate value) { r.LastReviewDate = value; return r; }
        public static Measure AddLibrary(this Measure r, FhirCanonical item) { r.Library ??= new List<FhirCanonical>(); r.Library!.Add(item); return r; }
        public static Measure WithName(this Measure r, FhirString value) { r.Name = value; return r; }
        public static Measure WithPublisher(this Measure r, FhirString value) { r.Publisher = value; return r; }
        public static Measure WithPurpose(this Measure r, FhirMarkdown value) { r.Purpose = value; return r; }
        public static Measure WithRateAggregation(this Measure r, FhirMarkdown value) { r.RateAggregation = value; return r; }
        public static Measure WithRationale(this Measure r, FhirMarkdown value) { r.Rationale = value; return r; }
        public static Measure AddRelatedArtifact(this Measure r, RelatedArtifact item) { r.RelatedArtifact ??= new List<RelatedArtifact>(); r.RelatedArtifact!.Add(item); return r; }
        public static Measure AddReviewer(this Measure r, ContactDetail item) { r.Reviewer ??= new List<ContactDetail>(); r.Reviewer!.Add(item); return r; }
        public static Measure WithRiskAdjustment(this Measure r, FhirMarkdown value) { r.RiskAdjustment = value; return r; }
        public static Measure WithScoring(this Measure r, CodeableConcept value) { r.Scoring = value; return r; }
        public static Measure WithScoringUnit(this Measure r, CodeableConcept value) { r.ScoringUnit = value; return r; }
        public static Measure WithStatus(this Measure r, FhirCode value) { r.Status = value; return r; }
        public static Measure WithSubjectCodeableConcept(this Measure r, CodeableConcept value) { r.SubjectCodeableConcept = value; return r; }
        public static Measure WithSubjectReference(this Measure r, ReferenceType value) { r.SubjectReference = value; return r; }
        public static Measure WithSubtitle(this Measure r, FhirString value) { r.Subtitle = value; return r; }
        public static Measure AddSupplementalData(this Measure r, BackboneElement item) { r.SupplementalData ??= new List<BackboneElement>(); r.SupplementalData!.Add(item); return r; }
        public static Measure AddTerm(this Measure r, BackboneElement item) { r.Term ??= new List<BackboneElement>(); r.Term!.Add(item); return r; }
        public static Measure WithText(this Measure r, Narrative value) { r.Text = value; return r; }
        public static Measure WithTitle(this Measure r, FhirString value) { r.Title = value; return r; }
        public static Measure AddTopic(this Measure r, CodeableConcept item) { r.Topic ??= new List<CodeableConcept>(); r.Topic!.Add(item); return r; }
        public static Measure AddType(this Measure r, CodeableConcept item) { r.Type ??= new List<CodeableConcept>(); r.Type!.Add(item); return r; }
        public static Measure WithUrl(this Measure r, FhirUri value) { r.Url = value; return r; }
        public static Measure WithUsage(this Measure r, FhirMarkdown value) { r.Usage = value; return r; }
        public static Measure AddUseContext(this Measure r, UsageContext item) { r.UseContext ??= new List<UsageContext>(); r.UseContext!.Add(item); return r; }
        public static Measure WithVersion(this Measure r, FhirString value) { r.Version = value; return r; }
        public static Measure WithVersionAlgorithmString(this Measure r, FhirString value) { r.VersionAlgorithmString = value; return r; }
        public static Measure WithVersionAlgorithmCoding(this Measure r, Coding value) { r.VersionAlgorithmCoding = value; return r; }
    }
}
