// <auto-generated>
#nullable enable
using System.Collections.Generic;
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
namespace FhirSDK.Resources.R5
{
    public static class SubstanceSourceMaterialFluentExtensions
    {
        public static SubstanceSourceMaterial AddContained(this SubstanceSourceMaterial r, Resource item) { r.Contained ??= new List<Resource>(); r.Contained!.Add(item); return r; }
        public static SubstanceSourceMaterial AddCountryOfOrigin(this SubstanceSourceMaterial r, CodeableConcept item) { r.CountryOfOrigin ??= new List<CodeableConcept>(); r.CountryOfOrigin!.Add(item); return r; }
        public static SubstanceSourceMaterial WithDevelopmentStage(this SubstanceSourceMaterial r, CodeableConcept value) { r.DevelopmentStage = value; return r; }
        public static SubstanceSourceMaterial AddFractionDescription(this SubstanceSourceMaterial r, BackboneElement item) { r.FractionDescription ??= new List<BackboneElement>(); r.FractionDescription!.Add(item); return r; }
        public static SubstanceSourceMaterial AddGeographicalLocation(this SubstanceSourceMaterial r, FhirString item) { r.GeographicalLocation ??= new List<FhirString>(); r.GeographicalLocation!.Add(item); return r; }
        public static SubstanceSourceMaterial WithOrganism(this SubstanceSourceMaterial r, BackboneElement value) { r.Organism = value; return r; }
        public static SubstanceSourceMaterial WithOrganismId(this SubstanceSourceMaterial r, Identifier value) { r.OrganismId = value; return r; }
        public static SubstanceSourceMaterial WithOrganismName(this SubstanceSourceMaterial r, FhirString value) { r.OrganismName = value; return r; }
        public static SubstanceSourceMaterial AddParentSubstanceId(this SubstanceSourceMaterial r, Identifier item) { r.ParentSubstanceId ??= new List<Identifier>(); r.ParentSubstanceId!.Add(item); return r; }
        public static SubstanceSourceMaterial AddParentSubstanceName(this SubstanceSourceMaterial r, FhirString item) { r.ParentSubstanceName ??= new List<FhirString>(); r.ParentSubstanceName!.Add(item); return r; }
        public static SubstanceSourceMaterial AddPartDescription(this SubstanceSourceMaterial r, BackboneElement item) { r.PartDescription ??= new List<BackboneElement>(); r.PartDescription!.Add(item); return r; }
        public static SubstanceSourceMaterial WithSourceMaterialClass(this SubstanceSourceMaterial r, CodeableConcept value) { r.SourceMaterialClass = value; return r; }
        public static SubstanceSourceMaterial WithSourceMaterialState(this SubstanceSourceMaterial r, CodeableConcept value) { r.SourceMaterialState = value; return r; }
        public static SubstanceSourceMaterial WithSourceMaterialType(this SubstanceSourceMaterial r, CodeableConcept value) { r.SourceMaterialType = value; return r; }
        public static SubstanceSourceMaterial WithText(this SubstanceSourceMaterial r, Narrative value) { r.Text = value; return r; }
    }
}
