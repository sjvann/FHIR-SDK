// <auto-generated>
#nullable enable
using System.Collections.Generic;
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
namespace FhirSDK.Resources.R5
{
    public static class InventoryItemFluentExtensions
    {
        public static InventoryItem AddAssociation(this InventoryItem r, BackboneElement item) { r.Association ??= new List<BackboneElement>(); r.Association!.Add(item); return r; }
        public static InventoryItem WithBaseUnit(this InventoryItem r, CodeableConcept value) { r.BaseUnit = value; return r; }
        public static InventoryItem AddCategory(this InventoryItem r, CodeableConcept item) { r.Category ??= new List<CodeableConcept>(); r.Category!.Add(item); return r; }
        public static InventoryItem AddCharacteristic(this InventoryItem r, BackboneElement item) { r.Characteristic ??= new List<BackboneElement>(); r.Characteristic!.Add(item); return r; }
        public static InventoryItem AddCode(this InventoryItem r, CodeableConcept item) { r.Code ??= new List<CodeableConcept>(); r.Code!.Add(item); return r; }
        public static InventoryItem AddContained(this InventoryItem r, Resource item) { r.Contained ??= new List<Resource>(); r.Contained!.Add(item); return r; }
        public static InventoryItem WithDescription(this InventoryItem r, BackboneElement value) { r.Description = value; return r; }
        public static InventoryItem AddIdentifier(this InventoryItem r, Identifier item) { r.Identifier ??= new List<Identifier>(); r.Identifier!.Add(item); return r; }
        public static InventoryItem WithInstance(this InventoryItem r, BackboneElement value) { r.Instance = value; return r; }
        public static InventoryItem AddInventoryStatus(this InventoryItem r, CodeableConcept item) { r.InventoryStatus ??= new List<CodeableConcept>(); r.InventoryStatus!.Add(item); return r; }
        public static InventoryItem AddName(this InventoryItem r, BackboneElement item) { r.Name ??= new List<BackboneElement>(); r.Name!.Add(item); return r; }
        public static InventoryItem WithNetContent(this InventoryItem r, Quantity value) { r.NetContent = value; return r; }
        public static InventoryItem WithProductReference(this InventoryItem r, ReferenceType value) { r.ProductReference = value; return r; }
        public static InventoryItem AddResponsibleOrganization(this InventoryItem r, BackboneElement item) { r.ResponsibleOrganization ??= new List<BackboneElement>(); r.ResponsibleOrganization!.Add(item); return r; }
        public static InventoryItem WithStatus(this InventoryItem r, FhirCode value) { r.Status = value; return r; }
        public static InventoryItem WithText(this InventoryItem r, Narrative value) { r.Text = value; return r; }
    }
}
