// <auto-generated>
#nullable enable
using System.Collections.Generic;
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
namespace FhirSDK.Resources.R5
{
    public static class TestReportFluentExtensions
    {
        public static TestReport AddContained(this TestReport r, Resource item) { r.Contained ??= new List<Resource>(); r.Contained!.Add(item); return r; }
        public static TestReport WithIdentifier(this TestReport r, Identifier value) { r.Identifier = value; return r; }
        public static TestReport WithIssued(this TestReport r, FhirDateTime value) { r.Issued = value; return r; }
        public static TestReport WithName(this TestReport r, FhirString value) { r.Name = value; return r; }
        public static TestReport AddParticipant(this TestReport r, BackboneElement item) { r.Participant ??= new List<BackboneElement>(); r.Participant!.Add(item); return r; }
        public static TestReport WithResult(this TestReport r, FhirCode value) { r.Result = value; return r; }
        public static TestReport WithScore(this TestReport r, FhirDecimal value) { r.Score = value; return r; }
        public static TestReport WithSetup(this TestReport r, BackboneElement value) { r.Setup = value; return r; }
        public static TestReport WithStatus(this TestReport r, FhirCode value) { r.Status = value; return r; }
        public static TestReport WithTeardown(this TestReport r, BackboneElement value) { r.Teardown = value; return r; }
        public static TestReport AddTest(this TestReport r, BackboneElement item) { r.Test ??= new List<BackboneElement>(); r.Test!.Add(item); return r; }
        public static TestReport WithTester(this TestReport r, FhirString value) { r.Tester = value; return r; }
        public static TestReport WithTestScript(this TestReport r, FhirCanonical value) { r.TestScript = value; return r; }
        public static TestReport WithText(this TestReport r, Narrative value) { r.Text = value; return r; }
    }
}
