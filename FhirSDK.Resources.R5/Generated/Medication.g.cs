// <auto-generated>
#nullable enable
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
using System.Text.Json.Nodes;
using System.Text.Json.Serialization;
using System.Linq;
using FhirCore.Base;
using DataTypeServices.TypeFramework;
using DataTypeServices.DataTypes.MetaTypes;
namespace FhirSDK.Resources.R5
{
    /// <summary>
    /// Definition of a Medication
    /// </summary>
    public partial class Medication : ResourceBase
    {
        public override string ResourceType => "Medication";

        public Medication() { }
        public Medication(string json) { SetRawFrom(JsonNode.Parse(json)); }
        public Medication(JsonNode? source) { SetRawFrom(source); }
        protected override void OnPropertyChanged(string propertyName, object? newValue) { base.OnPropertyChanged(propertyName, newValue); }

        private Medication_Batch? _batch;
        [JsonPropertyName("batch")]
        public Medication_Batch? Batch { get => _batch; set { _batch = value; OnPropertyChangedByClr(nameof(Batch), value); } }

        /// <summary>
        /// Details about packaged medications
        /// </summary>
        public partial class Medication_Batch : BackboneElement<Medication_Batch>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "Medication_Batch" : "medication_Batch";
            private FhirDateTime? _expirationDate;
        [JsonPropertyName("expirationDate")]
        public FhirDateTime? ExpirationDate { get => _expirationDate; set { _expirationDate = value; } }

            private FhirString? _lotNumber;
        [JsonPropertyName("lotNumber")]
        public FhirString? LotNumber { get => _lotNumber; set { _lotNumber = value; } }

        }

        private CodeableConcept? _code;
        [JsonPropertyName("code")]
        public CodeableConcept? Code { get => _code; set { _code = value; OnPropertyChangedByClr(nameof(Code), value); } }

        private List<Resource>? _contained;
        [JsonPropertyName("contained")]
        public List<Resource>? Contained { get => _contained; set { _contained = value; OnPropertyChangedByClr(nameof(Contained), value); } }

        private ReferenceType? _definition;
        [JsonPropertyName("definition")]
        public ReferenceType? Definition { get => _definition; set { _definition = value; OnPropertyChangedByClr(nameof(Definition), value); } }

        private CodeableConcept? _doseForm;
        [JsonPropertyName("doseForm")]
        public CodeableConcept? DoseForm { get => _doseForm; set { _doseForm = value; OnPropertyChangedByClr(nameof(DoseForm), value); } }

        private List<Identifier>? _identifier;
        [JsonPropertyName("identifier")]
        public List<Identifier>? Identifier { get => _identifier; set { _identifier = value; OnPropertyChangedByClr(nameof(Identifier), value); } }

        private List<Medication_Ingredient>? _ingredient;
        [JsonPropertyName("ingredient")]
        public List<Medication_Ingredient>? Ingredient { get => _ingredient; set { _ingredient = value; OnPropertyChangedByClr(nameof(Ingredient), value); } }

        /// <summary>
        /// Active or inactive ingredient
        /// </summary>
        public partial class Medication_Ingredient : BackboneElement<Medication_Ingredient>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "Medication_Ingredient" : "medication_Ingredient";
            private FhirBoolean? _isActive;
        [JsonPropertyName("isActive")]
        public FhirBoolean? IsActive { get => _isActive; set { _isActive = value; } }

            private CodeableReference? _item;
        [JsonPropertyName("item")]
        public CodeableReference Item { get => _item ?? throw new InvalidOperationException("Item is required"); set { _item = value; } }

            private Ratio? _strengthRatio;
        [JsonPropertyName("strengthRatio")]
        public Ratio? StrengthRatio { get => _strengthRatio; set { _strengthRatio = value; if (value != null) {{ _strengthCodeableConcept = null; OnPropertyChanged("strengthCodeableConcept", null); _strengthQuantity = null; OnPropertyChanged("strengthQuantity", null); }}; OnPropertyChanged("strengthRatio", value); } }

            private CodeableConcept? _strengthCodeableConcept;
        [JsonPropertyName("strengthCodeableConcept")]
        public CodeableConcept? StrengthCodeableConcept { get => _strengthCodeableConcept; set { _strengthCodeableConcept = value; if (value != null) {{ _strengthRatio = null; OnPropertyChanged("strengthRatio", null); _strengthQuantity = null; OnPropertyChanged("strengthQuantity", null); }}; OnPropertyChanged("strengthCodeableConcept", value); } }

            private Quantity? _strengthQuantity;
        [JsonPropertyName("strengthQuantity")]
        public Quantity? StrengthQuantity { get => _strengthQuantity; set { _strengthQuantity = value; if (value != null) {{ _strengthRatio = null; OnPropertyChanged("strengthRatio", null); _strengthCodeableConcept = null; OnPropertyChanged("strengthCodeableConcept", null); }}; OnPropertyChanged("strengthQuantity", value); } }

        }

        private ReferenceType? _marketingAuthorizationHolder;
        [JsonPropertyName("marketingAuthorizationHolder")]
        public ReferenceType? MarketingAuthorizationHolder { get => _marketingAuthorizationHolder; set { _marketingAuthorizationHolder = value; OnPropertyChangedByClr(nameof(MarketingAuthorizationHolder), value); } }

        private FhirCode? _status;
        [JsonPropertyName("status")]
        public FhirCode? Status { get => _status; set { _status = value; OnPropertyChangedByClr(nameof(Status), value); } }

        private Narrative? _text;
        [JsonPropertyName("text")]
        public Narrative? Text { get => _text; set { _text = value; OnPropertyChangedByClr(nameof(Text), value); } }

        private Quantity? _totalVolume;
        [JsonPropertyName("totalVolume")]
        public Quantity? TotalVolume { get => _totalVolume; set { _totalVolume = value; OnPropertyChangedByClr(nameof(TotalVolume), value); } }

    }
}
