// <auto-generated>
#nullable enable
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
using System.Text.Json.Nodes;
using System.Text.Json.Serialization;
using System.Linq;
using FhirCore.Base;
using DataTypeServices.TypeFramework;
using DataTypeServices.DataTypes.MetaTypes;
namespace FhirSDK.Resources.R5
{
    /// <summary>
    /// A reply to an appointment request for a patient and/or practitioner(s), such as a confirmation or rejection
    /// </summary>
    public partial class AppointmentResponse : ResourceBase
    {
        public override string ResourceType => "AppointmentResponse";

        public AppointmentResponse() { }
        public AppointmentResponse(string json) { SetRawFrom(JsonNode.Parse(json)); }
        public AppointmentResponse(JsonNode? source) { SetRawFrom(source); }
        protected override void OnPropertyChanged(string propertyName, object? newValue) { base.OnPropertyChanged(propertyName, newValue); }

        private ReferenceType? _actor;
        [JsonPropertyName("actor")]
        public ReferenceType? Actor { get => _actor; set { _actor = value; OnPropertyChangedByClr(nameof(Actor), value); } }

        private ReferenceType? _appointment;
        [JsonPropertyName("appointment")]
        public ReferenceType Appointment { get => _appointment ?? throw new InvalidOperationException("Appointment is required"); set { _appointment = value; OnPropertyChangedByClr(nameof(Appointment), value); } }

        private FhirMarkdown? _comment;
        [JsonPropertyName("comment")]
        public FhirMarkdown? Comment { get => _comment; set { _comment = value; OnPropertyChangedByClr(nameof(Comment), value); } }

        private List<Resource>? _contained;
        [JsonPropertyName("contained")]
        public List<Resource>? Contained { get => _contained; set { _contained = value; OnPropertyChangedByClr(nameof(Contained), value); } }

        private FhirInstant? _end;
        [JsonPropertyName("end")]
        public FhirInstant? End { get => _end; set { _end = value; OnPropertyChangedByClr(nameof(End), value); } }

        private List<Identifier>? _identifier;
        [JsonPropertyName("identifier")]
        public List<Identifier>? Identifier { get => _identifier; set { _identifier = value; OnPropertyChangedByClr(nameof(Identifier), value); } }

        private FhirDate? _occurrenceDate;
        [JsonPropertyName("occurrenceDate")]
        public FhirDate? OccurrenceDate { get => _occurrenceDate; set { _occurrenceDate = value; OnPropertyChangedByClr(nameof(OccurrenceDate), value); } }

        private FhirCode? _participantStatus;
        [JsonPropertyName("participantStatus")]
        public FhirCode ParticipantStatus { get => _participantStatus ?? throw new InvalidOperationException("ParticipantStatus is required"); set { _participantStatus = value; OnPropertyChangedByClr(nameof(ParticipantStatus), value); } }

        private List<CodeableConcept>? _participantType;
        [JsonPropertyName("participantType")]
        public List<CodeableConcept>? ParticipantType { get => _participantType; set { _participantType = value; OnPropertyChangedByClr(nameof(ParticipantType), value); } }

        private FhirBoolean? _proposedNewTime;
        [JsonPropertyName("proposedNewTime")]
        public FhirBoolean? ProposedNewTime { get => _proposedNewTime; set { _proposedNewTime = value; OnPropertyChangedByClr(nameof(ProposedNewTime), value); } }

        private FhirPositiveInt? _recurrenceId;
        [JsonPropertyName("recurrenceId")]
        public FhirPositiveInt? RecurrenceId { get => _recurrenceId; set { _recurrenceId = value; OnPropertyChangedByClr(nameof(RecurrenceId), value); } }

        private FhirBoolean? _recurring;
        [JsonPropertyName("recurring")]
        public FhirBoolean? Recurring { get => _recurring; set { _recurring = value; OnPropertyChangedByClr(nameof(Recurring), value); } }

        private FhirInstant? _start;
        [JsonPropertyName("start")]
        public FhirInstant? Start { get => _start; set { _start = value; OnPropertyChangedByClr(nameof(Start), value); } }

        private Narrative? _text;
        [JsonPropertyName("text")]
        public Narrative? Text { get => _text; set { _text = value; OnPropertyChangedByClr(nameof(Text), value); } }

    }
}
