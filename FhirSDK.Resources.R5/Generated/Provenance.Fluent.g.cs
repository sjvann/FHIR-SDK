// <auto-generated>
#nullable enable
using System.Collections.Generic;
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
namespace FhirSDK.Resources.R5
{
    public static class ProvenanceFluentExtensions
    {
        public static Provenance WithActivity(this Provenance r, CodeableConcept value) { r.Activity = value; return r; }
        public static Provenance AddAgent(this Provenance r, BackboneElement item) { r.Agent ??= new List<BackboneElement>(); r.Agent!.Add(item); return r; }
        public static Provenance AddAuthorization(this Provenance r, CodeableReference item) { r.Authorization ??= new List<CodeableReference>(); r.Authorization!.Add(item); return r; }
        public static Provenance AddBasedOn(this Provenance r, ReferenceType item) { r.BasedOn ??= new List<ReferenceType>(); r.BasedOn!.Add(item); return r; }
        public static Provenance AddContained(this Provenance r, Resource item) { r.Contained ??= new List<Resource>(); r.Contained!.Add(item); return r; }
        public static Provenance WithEncounter(this Provenance r, ReferenceType value) { r.Encounter = value; return r; }
        public static Provenance AddEntity(this Provenance r, BackboneElement item) { r.Entity ??= new List<BackboneElement>(); r.Entity!.Add(item); return r; }
        public static Provenance WithLocation(this Provenance r, ReferenceType value) { r.Location = value; return r; }
        public static Provenance WithOccurredPeriod(this Provenance r, Period value) { r.OccurredPeriod = value; return r; }
        public static Provenance WithOccurredDateTime(this Provenance r, FhirDateTime value) { r.OccurredDateTime = value; return r; }
        public static Provenance WithPatient(this Provenance r, ReferenceType value) { r.Patient = value; return r; }
        public static Provenance AddPolicy(this Provenance r, FhirUri item) { r.Policy ??= new List<FhirUri>(); r.Policy!.Add(item); return r; }
        public static Provenance WithRecorded(this Provenance r, FhirInstant value) { r.Recorded = value; return r; }
        public static Provenance AddSignature(this Provenance r, Signature item) { r.Signature ??= new List<Signature>(); r.Signature!.Add(item); return r; }
        public static Provenance AddTarget(this Provenance r, ReferenceType item) { r.Target ??= new List<ReferenceType>(); r.Target!.Add(item); return r; }
        public static Provenance WithText(this Provenance r, Narrative value) { r.Text = value; return r; }
    }
}
