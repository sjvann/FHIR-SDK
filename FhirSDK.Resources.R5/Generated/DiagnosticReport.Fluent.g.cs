// <auto-generated>
#nullable enable
using System.Collections.Generic;
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
namespace FhirSDK.Resources.R5
{
    public static class DiagnosticReportFluentExtensions
    {
        public static DiagnosticReport AddBasedOn(this DiagnosticReport r, ReferenceType item) { r.BasedOn ??= new List<ReferenceType>(); r.BasedOn!.Add(item); return r; }
        public static DiagnosticReport AddCategory(this DiagnosticReport r, CodeableConcept item) { r.Category ??= new List<CodeableConcept>(); r.Category!.Add(item); return r; }
        public static DiagnosticReport WithCode(this DiagnosticReport r, CodeableConcept value) { r.Code = value; return r; }
        public static DiagnosticReport WithComposition(this DiagnosticReport r, ReferenceType value) { r.Composition = value; return r; }
        public static DiagnosticReport WithConclusion(this DiagnosticReport r, FhirMarkdown value) { r.Conclusion = value; return r; }
        public static DiagnosticReport AddConclusionCode(this DiagnosticReport r, CodeableConcept item) { r.ConclusionCode ??= new List<CodeableConcept>(); r.ConclusionCode!.Add(item); return r; }
        public static DiagnosticReport AddContained(this DiagnosticReport r, Resource item) { r.Contained ??= new List<Resource>(); r.Contained!.Add(item); return r; }
        public static DiagnosticReport WithEffectiveDateTime(this DiagnosticReport r, FhirDateTime value) { r.EffectiveDateTime = value; return r; }
        public static DiagnosticReport WithEffectivePeriod(this DiagnosticReport r, Period value) { r.EffectivePeriod = value; return r; }
        public static DiagnosticReport WithEncounter(this DiagnosticReport r, ReferenceType value) { r.Encounter = value; return r; }
        public static DiagnosticReport AddIdentifier(this DiagnosticReport r, Identifier item) { r.Identifier ??= new List<Identifier>(); r.Identifier!.Add(item); return r; }
        public static DiagnosticReport WithIssued(this DiagnosticReport r, FhirInstant value) { r.Issued = value; return r; }
        public static DiagnosticReport AddMedia(this DiagnosticReport r, BackboneElement item) { r.Media ??= new List<BackboneElement>(); r.Media!.Add(item); return r; }
        public static DiagnosticReport AddNote(this DiagnosticReport r, Annotation item) { r.Note ??= new List<Annotation>(); r.Note!.Add(item); return r; }
        public static DiagnosticReport AddPerformer(this DiagnosticReport r, ReferenceType item) { r.Performer ??= new List<ReferenceType>(); r.Performer!.Add(item); return r; }
        public static DiagnosticReport AddPresentedForm(this DiagnosticReport r, Attachment item) { r.PresentedForm ??= new List<Attachment>(); r.PresentedForm!.Add(item); return r; }
        public static DiagnosticReport AddResult(this DiagnosticReport r, ReferenceType item) { r.Result ??= new List<ReferenceType>(); r.Result!.Add(item); return r; }
        public static DiagnosticReport AddResultsInterpreter(this DiagnosticReport r, ReferenceType item) { r.ResultsInterpreter ??= new List<ReferenceType>(); r.ResultsInterpreter!.Add(item); return r; }
        public static DiagnosticReport AddSpecimen(this DiagnosticReport r, ReferenceType item) { r.Specimen ??= new List<ReferenceType>(); r.Specimen!.Add(item); return r; }
        public static DiagnosticReport WithStatus(this DiagnosticReport r, FhirCode value) { r.Status = value; return r; }
        public static DiagnosticReport AddStudy(this DiagnosticReport r, ReferenceType item) { r.Study ??= new List<ReferenceType>(); r.Study!.Add(item); return r; }
        public static DiagnosticReport WithSubject(this DiagnosticReport r, ReferenceType value) { r.Subject = value; return r; }
        public static DiagnosticReport AddSupportingInfo(this DiagnosticReport r, BackboneElement item) { r.SupportingInfo ??= new List<BackboneElement>(); r.SupportingInfo!.Add(item); return r; }
        public static DiagnosticReport WithText(this DiagnosticReport r, Narrative value) { r.Text = value; return r; }
    }
}
