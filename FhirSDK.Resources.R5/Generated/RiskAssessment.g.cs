// <auto-generated>
#nullable enable
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
using System.Text.Json.Nodes;
using System.Text.Json.Serialization;
using System.Linq;
using FhirCore.Base;
using DataTypeServices.TypeFramework;
using DataTypeServices.DataTypes.MetaTypes;
namespace FhirSDK.Resources.R5
{
    /// <summary>
    /// Potential outcomes for a subject with likelihood
    /// </summary>
    public partial class RiskAssessment : ResourceBase
    {
        public override string ResourceType => "RiskAssessment";

        public RiskAssessment() { }
        public RiskAssessment(string json) { SetRawFrom(JsonNode.Parse(json)); }
        public RiskAssessment(JsonNode? source) { SetRawFrom(source); }
        protected override void OnPropertyChanged(string propertyName, object? newValue) { base.OnPropertyChanged(propertyName, newValue); }

        private ReferenceType? _basedOn;
        [JsonPropertyName("basedOn")]
        public ReferenceType? BasedOn { get => _basedOn; set { _basedOn = value; OnPropertyChangedByClr(nameof(BasedOn), value); } }

        private List<ReferenceType>? _basis;
        [JsonPropertyName("basis")]
        public List<ReferenceType>? Basis { get => _basis; set { _basis = value; OnPropertyChangedByClr(nameof(Basis), value); } }

        private CodeableConcept? _code;
        [JsonPropertyName("code")]
        public CodeableConcept? Code { get => _code; set { _code = value; OnPropertyChangedByClr(nameof(Code), value); } }

        private ReferenceType? _condition;
        [JsonPropertyName("condition")]
        public ReferenceType? Condition { get => _condition; set { _condition = value; OnPropertyChangedByClr(nameof(Condition), value); } }

        private List<Resource>? _contained;
        [JsonPropertyName("contained")]
        public List<Resource>? Contained { get => _contained; set { _contained = value; OnPropertyChangedByClr(nameof(Contained), value); } }

        private ReferenceType? _encounter;
        [JsonPropertyName("encounter")]
        public ReferenceType? Encounter { get => _encounter; set { _encounter = value; OnPropertyChangedByClr(nameof(Encounter), value); } }

        private List<Identifier>? _identifier;
        [JsonPropertyName("identifier")]
        public List<Identifier>? Identifier { get => _identifier; set { _identifier = value; OnPropertyChangedByClr(nameof(Identifier), value); } }

        private CodeableConcept? _method;
        [JsonPropertyName("method")]
        public CodeableConcept? Method { get => _method; set { _method = value; OnPropertyChangedByClr(nameof(Method), value); } }

        private FhirString? _mitigation;
        [JsonPropertyName("mitigation")]
        public FhirString? Mitigation { get => _mitigation; set { _mitigation = value; OnPropertyChangedByClr(nameof(Mitigation), value); } }

        private List<Annotation>? _note;
        [JsonPropertyName("note")]
        public List<Annotation>? Note { get => _note; set { _note = value; OnPropertyChangedByClr(nameof(Note), value); } }

        private FhirDateTime? _occurrenceDateTime;
        [JsonPropertyName("occurrenceDateTime")]
        public FhirDateTime? OccurrenceDateTime { get => _occurrenceDateTime; set { _occurrenceDateTime = value; if (value != null) {{ _occurrencePeriod = null; OnPropertyChangedByClr(nameof(OccurrencePeriod), null); }}; OnPropertyChangedByClr(nameof(OccurrenceDateTime), value); } }

        private Period? _occurrencePeriod;
        [JsonPropertyName("occurrencePeriod")]
        public Period? OccurrencePeriod { get => _occurrencePeriod; set { _occurrencePeriod = value; if (value != null) {{ _occurrenceDateTime = null; OnPropertyChangedByClr(nameof(OccurrenceDateTime), null); }}; OnPropertyChangedByClr(nameof(OccurrencePeriod), value); } }

        private ReferenceType? _parent;
        [JsonPropertyName("parent")]
        public ReferenceType? Parent { get => _parent; set { _parent = value; OnPropertyChangedByClr(nameof(Parent), value); } }

        private ReferenceType? _performer;
        [JsonPropertyName("performer")]
        public ReferenceType? Performer { get => _performer; set { _performer = value; OnPropertyChangedByClr(nameof(Performer), value); } }

        private List<RiskAssessment_Prediction>? _prediction;
        [JsonPropertyName("prediction")]
        public List<RiskAssessment_Prediction>? Prediction { get => _prediction; set { _prediction = value; OnPropertyChangedByClr(nameof(Prediction), value); } }

        /// <summary>
        /// Outcome predicted
        /// </summary>
        public partial class RiskAssessment_Prediction : BackboneElement<RiskAssessment_Prediction>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "RiskAssessment_Prediction" : "riskAssessment_Prediction";
            private CodeableConcept? _outcome;
        [JsonPropertyName("outcome")]
        public CodeableConcept? Outcome { get => _outcome; set { _outcome = value; } }

            private FhirDecimal? _probabilityDecimal;
        [JsonPropertyName("probabilityDecimal")]
        public FhirDecimal? ProbabilityDecimal { get => _probabilityDecimal; set { _probabilityDecimal = value; if (value != null) {{ _probabilityRange = null; OnPropertyChanged("probabilityRange", null); }}; OnPropertyChanged("probabilityDecimal", value); } }

            private DataTypeServices.DataTypes.ComplexTypes.Range? _probabilityRange;
        [JsonPropertyName("probabilityRange")]
        public DataTypeServices.DataTypes.ComplexTypes.Range? ProbabilityRange { get => _probabilityRange; set { _probabilityRange = value; if (value != null) {{ _probabilityDecimal = null; OnPropertyChanged("probabilityDecimal", null); }}; OnPropertyChanged("probabilityRange", value); } }

            private CodeableConcept? _qualitativeRisk;
        [JsonPropertyName("qualitativeRisk")]
        public CodeableConcept? QualitativeRisk { get => _qualitativeRisk; set { _qualitativeRisk = value; } }

            private FhirString? _rationale;
        [JsonPropertyName("rationale")]
        public FhirString? Rationale { get => _rationale; set { _rationale = value; } }

            private FhirDecimal? _relativeRisk;
        [JsonPropertyName("relativeRisk")]
        public FhirDecimal? RelativeRisk { get => _relativeRisk; set { _relativeRisk = value; } }

            private Period? _whenPeriod;
        [JsonPropertyName("whenPeriod")]
        public Period? WhenPeriod { get => _whenPeriod; set { _whenPeriod = value; if (value != null) {{ _whenRange = null; OnPropertyChanged("whenRange", null); }}; OnPropertyChanged("whenPeriod", value); } }

            private DataTypeServices.DataTypes.ComplexTypes.Range? _whenRange;
        [JsonPropertyName("whenRange")]
        public DataTypeServices.DataTypes.ComplexTypes.Range? WhenRange { get => _whenRange; set { _whenRange = value; if (value != null) {{ _whenPeriod = null; OnPropertyChanged("whenPeriod", null); }}; OnPropertyChanged("whenRange", value); } }

        }

        private List<CodeableReference>? _reason;
        [JsonPropertyName("reason")]
        public List<CodeableReference>? Reason { get => _reason; set { _reason = value; OnPropertyChangedByClr(nameof(Reason), value); } }

        private FhirCode? _status;
        [JsonPropertyName("status")]
        public FhirCode Status { get => _status ?? throw new InvalidOperationException("Status is required"); set { _status = value; OnPropertyChangedByClr(nameof(Status), value); } }

        private ReferenceType? _subject;
        [JsonPropertyName("subject")]
        public ReferenceType Subject { get => _subject ?? throw new InvalidOperationException("Subject is required"); set { _subject = value; OnPropertyChangedByClr(nameof(Subject), value); } }

        private Narrative? _text;
        [JsonPropertyName("text")]
        public Narrative? Text { get => _text; set { _text = value; OnPropertyChangedByClr(nameof(Text), value); } }

    }
}
