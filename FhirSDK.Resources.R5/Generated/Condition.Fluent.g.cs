// <auto-generated>
#nullable enable
using System.Collections.Generic;
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
namespace FhirSDK.Resources.R5
{
    public static class ConditionFluentExtensions
    {
        public static Condition WithAbatementDateTime(this Condition r, FhirDateTime value) { r.AbatementDateTime = value; return r; }
        public static Condition WithAbatementAge(this Condition r, Age value) { r.AbatementAge = value; return r; }
        public static Condition WithAbatementPeriod(this Condition r, Period value) { r.AbatementPeriod = value; return r; }
        public static Condition WithAbatementRange(this Condition r, DataTypeServices.DataTypes.ComplexTypes.Range value) { r.AbatementRange = value; return r; }
        public static Condition WithAbatementString(this Condition r, FhirString value) { r.AbatementString = value; return r; }
        public static Condition AddBodySite(this Condition r, CodeableConcept item) { r.BodySite ??= new List<CodeableConcept>(); r.BodySite!.Add(item); return r; }
        public static Condition AddCategory(this Condition r, CodeableConcept item) { r.Category ??= new List<CodeableConcept>(); r.Category!.Add(item); return r; }
        public static Condition WithClinicalStatus(this Condition r, CodeableConcept value) { r.ClinicalStatus = value; return r; }
        public static Condition WithCode(this Condition r, CodeableConcept value) { r.Code = value; return r; }
        public static Condition AddContained(this Condition r, Resource item) { r.Contained ??= new List<Resource>(); r.Contained!.Add(item); return r; }
        public static Condition WithEncounter(this Condition r, ReferenceType value) { r.Encounter = value; return r; }
        public static Condition AddEvidence(this Condition r, CodeableReference item) { r.Evidence ??= new List<CodeableReference>(); r.Evidence!.Add(item); return r; }
        public static Condition AddIdentifier(this Condition r, Identifier item) { r.Identifier ??= new List<Identifier>(); r.Identifier!.Add(item); return r; }
        public static Condition AddNote(this Condition r, Annotation item) { r.Note ??= new List<Annotation>(); r.Note!.Add(item); return r; }
        public static Condition WithOnsetDateTime(this Condition r, FhirDateTime value) { r.OnsetDateTime = value; return r; }
        public static Condition WithOnsetAge(this Condition r, Age value) { r.OnsetAge = value; return r; }
        public static Condition WithOnsetPeriod(this Condition r, Period value) { r.OnsetPeriod = value; return r; }
        public static Condition WithOnsetRange(this Condition r, DataTypeServices.DataTypes.ComplexTypes.Range value) { r.OnsetRange = value; return r; }
        public static Condition WithOnsetString(this Condition r, FhirString value) { r.OnsetString = value; return r; }
        public static Condition AddParticipant(this Condition r, BackboneElement item) { r.Participant ??= new List<BackboneElement>(); r.Participant!.Add(item); return r; }
        public static Condition WithRecordedDate(this Condition r, FhirDateTime value) { r.RecordedDate = value; return r; }
        public static Condition WithSeverity(this Condition r, CodeableConcept value) { r.Severity = value; return r; }
        public static Condition AddStage(this Condition r, BackboneElement item) { r.Stage ??= new List<BackboneElement>(); r.Stage!.Add(item); return r; }
        public static Condition WithSubject(this Condition r, ReferenceType value) { r.Subject = value; return r; }
        public static Condition WithText(this Condition r, Narrative value) { r.Text = value; return r; }
        public static Condition WithVerificationStatus(this Condition r, CodeableConcept value) { r.VerificationStatus = value; return r; }
    }
}
