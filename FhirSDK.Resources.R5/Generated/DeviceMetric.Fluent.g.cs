// <auto-generated>
#nullable enable
using System.Collections.Generic;
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
namespace FhirSDK.Resources.R5
{
    public static class DeviceMetricFluentExtensions
    {
        public static DeviceMetric AddCalibration(this DeviceMetric r, BackboneElement item) { r.Calibration ??= new List<BackboneElement>(); r.Calibration!.Add(item); return r; }
        public static DeviceMetric WithCategory(this DeviceMetric r, FhirCode value) { r.Category = value; return r; }
        public static DeviceMetric WithColor(this DeviceMetric r, FhirCode value) { r.Color = value; return r; }
        public static DeviceMetric AddContained(this DeviceMetric r, Resource item) { r.Contained ??= new List<Resource>(); r.Contained!.Add(item); return r; }
        public static DeviceMetric WithDevice(this DeviceMetric r, ReferenceType value) { r.Device = value; return r; }
        public static DeviceMetric AddIdentifier(this DeviceMetric r, Identifier item) { r.Identifier ??= new List<Identifier>(); r.Identifier!.Add(item); return r; }
        public static DeviceMetric WithMeasurementFrequency(this DeviceMetric r, Quantity value) { r.MeasurementFrequency = value; return r; }
        public static DeviceMetric WithOperationalStatus(this DeviceMetric r, FhirCode value) { r.OperationalStatus = value; return r; }
        public static DeviceMetric WithText(this DeviceMetric r, Narrative value) { r.Text = value; return r; }
        public static DeviceMetric WithType(this DeviceMetric r, CodeableConcept value) { r.Type = value; return r; }
        public static DeviceMetric WithUnit(this DeviceMetric r, CodeableConcept value) { r.Unit = value; return r; }
    }
}
