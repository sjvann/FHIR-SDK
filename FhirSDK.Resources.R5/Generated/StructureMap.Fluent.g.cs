// <auto-generated>
#nullable enable
using System.Collections.Generic;
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
namespace FhirSDK.Resources.R5
{
    public static class StructureMapFluentExtensions
    {
        public static StructureMap AddConst(this StructureMap r, BackboneElement item) { r.Const ??= new List<BackboneElement>(); r.Const!.Add(item); return r; }
        public static StructureMap AddContact(this StructureMap r, ContactDetail item) { r.Contact ??= new List<ContactDetail>(); r.Contact!.Add(item); return r; }
        public static StructureMap AddContained(this StructureMap r, Resource item) { r.Contained ??= new List<Resource>(); r.Contained!.Add(item); return r; }
        public static StructureMap WithCopyright(this StructureMap r, FhirMarkdown value) { r.Copyright = value; return r; }
        public static StructureMap WithCopyrightLabel(this StructureMap r, FhirString value) { r.CopyrightLabel = value; return r; }
        public static StructureMap WithDate(this StructureMap r, FhirDateTime value) { r.Date = value; return r; }
        public static StructureMap WithDescription(this StructureMap r, FhirMarkdown value) { r.Description = value; return r; }
        public static StructureMap WithExperimental(this StructureMap r, FhirBoolean value) { r.Experimental = value; return r; }
        public static StructureMap AddGroup(this StructureMap r, BackboneElement item) { r.Group ??= new List<BackboneElement>(); r.Group!.Add(item); return r; }
        public static StructureMap AddIdentifier(this StructureMap r, Identifier item) { r.Identifier ??= new List<Identifier>(); r.Identifier!.Add(item); return r; }
        public static StructureMap AddImport(this StructureMap r, FhirCanonical item) { r.Import ??= new List<FhirCanonical>(); r.Import!.Add(item); return r; }
        public static StructureMap AddJurisdiction(this StructureMap r, CodeableConcept item) { r.Jurisdiction ??= new List<CodeableConcept>(); r.Jurisdiction!.Add(item); return r; }
        public static StructureMap WithName(this StructureMap r, FhirString value) { r.Name = value; return r; }
        public static StructureMap WithPublisher(this StructureMap r, FhirString value) { r.Publisher = value; return r; }
        public static StructureMap WithPurpose(this StructureMap r, FhirMarkdown value) { r.Purpose = value; return r; }
        public static StructureMap WithStatus(this StructureMap r, FhirCode value) { r.Status = value; return r; }
        public static StructureMap AddStructure(this StructureMap r, BackboneElement item) { r.Structure ??= new List<BackboneElement>(); r.Structure!.Add(item); return r; }
        public static StructureMap WithText(this StructureMap r, Narrative value) { r.Text = value; return r; }
        public static StructureMap WithTitle(this StructureMap r, FhirString value) { r.Title = value; return r; }
        public static StructureMap WithUrl(this StructureMap r, FhirUri value) { r.Url = value; return r; }
        public static StructureMap AddUseContext(this StructureMap r, UsageContext item) { r.UseContext ??= new List<UsageContext>(); r.UseContext!.Add(item); return r; }
        public static StructureMap WithVersion(this StructureMap r, FhirString value) { r.Version = value; return r; }
        public static StructureMap WithVersionAlgorithmString(this StructureMap r, FhirString value) { r.VersionAlgorithmString = value; return r; }
        public static StructureMap WithVersionAlgorithmCoding(this StructureMap r, Coding value) { r.VersionAlgorithmCoding = value; return r; }
    }
}
