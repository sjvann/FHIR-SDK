// <auto-generated>
#nullable enable
using System.Collections.Generic;
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
namespace FhirSDK.Resources.R5
{
    public static class PlanDefinitionFluentExtensions
    {
        public static PlanDefinition AddAction(this PlanDefinition r, BackboneElement item) { r.Action ??= new List<BackboneElement>(); r.Action!.Add(item); return r; }
        public static PlanDefinition AddActor(this PlanDefinition r, BackboneElement item) { r.Actor ??= new List<BackboneElement>(); r.Actor!.Add(item); return r; }
        public static PlanDefinition WithApprovalDate(this PlanDefinition r, FhirDate value) { r.ApprovalDate = value; return r; }
        public static PlanDefinition WithAsNeededBoolean(this PlanDefinition r, FhirBoolean value) { r.AsNeededBoolean = value; return r; }
        public static PlanDefinition WithAsNeededCodeableConcept(this PlanDefinition r, CodeableConcept value) { r.AsNeededCodeableConcept = value; return r; }
        public static PlanDefinition AddAuthor(this PlanDefinition r, ContactDetail item) { r.Author ??= new List<ContactDetail>(); r.Author!.Add(item); return r; }
        public static PlanDefinition AddContact(this PlanDefinition r, ContactDetail item) { r.Contact ??= new List<ContactDetail>(); r.Contact!.Add(item); return r; }
        public static PlanDefinition AddContained(this PlanDefinition r, Resource item) { r.Contained ??= new List<Resource>(); r.Contained!.Add(item); return r; }
        public static PlanDefinition WithCopyright(this PlanDefinition r, FhirMarkdown value) { r.Copyright = value; return r; }
        public static PlanDefinition WithCopyrightLabel(this PlanDefinition r, FhirString value) { r.CopyrightLabel = value; return r; }
        public static PlanDefinition WithDate(this PlanDefinition r, FhirDateTime value) { r.Date = value; return r; }
        public static PlanDefinition WithDescription(this PlanDefinition r, FhirMarkdown value) { r.Description = value; return r; }
        public static PlanDefinition AddEditor(this PlanDefinition r, ContactDetail item) { r.Editor ??= new List<ContactDetail>(); r.Editor!.Add(item); return r; }
        public static PlanDefinition WithEffectivePeriod(this PlanDefinition r, Period value) { r.EffectivePeriod = value; return r; }
        public static PlanDefinition AddEndorser(this PlanDefinition r, ContactDetail item) { r.Endorser ??= new List<ContactDetail>(); r.Endorser!.Add(item); return r; }
        public static PlanDefinition WithExperimental(this PlanDefinition r, FhirBoolean value) { r.Experimental = value; return r; }
        public static PlanDefinition AddGoal(this PlanDefinition r, BackboneElement item) { r.Goal ??= new List<BackboneElement>(); r.Goal!.Add(item); return r; }
        public static PlanDefinition AddIdentifier(this PlanDefinition r, Identifier item) { r.Identifier ??= new List<Identifier>(); r.Identifier!.Add(item); return r; }
        public static PlanDefinition AddJurisdiction(this PlanDefinition r, CodeableConcept item) { r.Jurisdiction ??= new List<CodeableConcept>(); r.Jurisdiction!.Add(item); return r; }
        public static PlanDefinition WithLastReviewDate(this PlanDefinition r, FhirDate value) { r.LastReviewDate = value; return r; }
        public static PlanDefinition AddLibrary(this PlanDefinition r, FhirCanonical item) { r.Library ??= new List<FhirCanonical>(); r.Library!.Add(item); return r; }
        public static PlanDefinition WithName(this PlanDefinition r, FhirString value) { r.Name = value; return r; }
        public static PlanDefinition WithPublisher(this PlanDefinition r, FhirString value) { r.Publisher = value; return r; }
        public static PlanDefinition WithPurpose(this PlanDefinition r, FhirMarkdown value) { r.Purpose = value; return r; }
        public static PlanDefinition AddRelatedArtifact(this PlanDefinition r, RelatedArtifact item) { r.RelatedArtifact ??= new List<RelatedArtifact>(); r.RelatedArtifact!.Add(item); return r; }
        public static PlanDefinition AddReviewer(this PlanDefinition r, ContactDetail item) { r.Reviewer ??= new List<ContactDetail>(); r.Reviewer!.Add(item); return r; }
        public static PlanDefinition WithStatus(this PlanDefinition r, FhirCode value) { r.Status = value; return r; }
        public static PlanDefinition WithSubjectCodeableConcept(this PlanDefinition r, CodeableConcept value) { r.SubjectCodeableConcept = value; return r; }
        public static PlanDefinition WithSubjectReference(this PlanDefinition r, ReferenceType value) { r.SubjectReference = value; return r; }
        public static PlanDefinition WithSubjectcanonical(this PlanDefinition r, FhirCanonical value) { r.Subjectcanonical = value; return r; }
        public static PlanDefinition WithSubtitle(this PlanDefinition r, FhirString value) { r.Subtitle = value; return r; }
        public static PlanDefinition WithText(this PlanDefinition r, Narrative value) { r.Text = value; return r; }
        public static PlanDefinition WithTitle(this PlanDefinition r, FhirString value) { r.Title = value; return r; }
        public static PlanDefinition AddTopic(this PlanDefinition r, CodeableConcept item) { r.Topic ??= new List<CodeableConcept>(); r.Topic!.Add(item); return r; }
        public static PlanDefinition WithType(this PlanDefinition r, CodeableConcept value) { r.Type = value; return r; }
        public static PlanDefinition WithUrl(this PlanDefinition r, FhirUri value) { r.Url = value; return r; }
        public static PlanDefinition WithUsage(this PlanDefinition r, FhirMarkdown value) { r.Usage = value; return r; }
        public static PlanDefinition AddUseContext(this PlanDefinition r, UsageContext item) { r.UseContext ??= new List<UsageContext>(); r.UseContext!.Add(item); return r; }
        public static PlanDefinition WithVersion(this PlanDefinition r, FhirString value) { r.Version = value; return r; }
        public static PlanDefinition WithVersionAlgorithmString(this PlanDefinition r, FhirString value) { r.VersionAlgorithmString = value; return r; }
        public static PlanDefinition WithVersionAlgorithmCoding(this PlanDefinition r, Coding value) { r.VersionAlgorithmCoding = value; return r; }
    }
}
