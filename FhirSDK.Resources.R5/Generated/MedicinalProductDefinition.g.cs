// <auto-generated>
#nullable enable
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
using System.Text.Json.Nodes;
using System.Text.Json.Serialization;
using System.Linq;
using FhirCore.Base;
using DataTypeServices.TypeFramework;
using DataTypeServices.DataTypes.MetaTypes;
namespace FhirSDK.Resources.R5
{
    /// <summary>
    /// Detailed definition of a medicinal product
    /// </summary>
    public partial class MedicinalProductDefinition : ResourceBase
    {
        public override string ResourceType => "MedicinalProductDefinition";

        public MedicinalProductDefinition() { }
        public MedicinalProductDefinition(string json) { SetRawFrom(JsonNode.Parse(json)); }
        public MedicinalProductDefinition(JsonNode? source) { SetRawFrom(source); }
        protected override void OnPropertyChanged(string propertyName, object? newValue) { base.OnPropertyChanged(propertyName, newValue); }

        private CodeableConcept? _additionalMonitoringIndicator;
        [JsonPropertyName("additionalMonitoringIndicator")]
        public CodeableConcept? AdditionalMonitoringIndicator { get => _additionalMonitoringIndicator; set { _additionalMonitoringIndicator = value; OnPropertyChangedByClr(nameof(AdditionalMonitoringIndicator), value); } }

        private List<ReferenceType>? _attachedDocument;
        [JsonPropertyName("attachedDocument")]
        public List<ReferenceType>? AttachedDocument { get => _attachedDocument; set { _attachedDocument = value; OnPropertyChangedByClr(nameof(AttachedDocument), value); } }

        private List<MedicinalProductDefinition_Characteristic>? _characteristic;
        [JsonPropertyName("characteristic")]
        public List<MedicinalProductDefinition_Characteristic>? Characteristic { get => _characteristic; set { _characteristic = value; OnPropertyChangedByClr(nameof(Characteristic), value); } }

        /// <summary>
        /// Key product features such as "sugar free", "modified release"
        /// </summary>
        public partial class MedicinalProductDefinition_Characteristic : BackboneElement<MedicinalProductDefinition_Characteristic>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "MedicinalProductDefinition_Characteristic" : "medicinalProductDefinition_Characteristic";
            private CodeableConcept? _type;
        [JsonPropertyName("type")]
        public CodeableConcept Type { get => _type ?? throw new InvalidOperationException("Type is required"); set { _type = value; } }

            private CodeableConcept? _valueCodeableConcept;
        [JsonPropertyName("valueCodeableConcept")]
        public CodeableConcept? ValueCodeableConcept { get => _valueCodeableConcept; set { _valueCodeableConcept = value; if (value != null) {{ _valuemarkdown = null; OnPropertyChanged("valuemarkdown", null); _valueQuantity = null; OnPropertyChanged("valueQuantity", null); _valueInteger = null; OnPropertyChanged("valueInteger", null); _valuedate = null; OnPropertyChanged("valuedate", null); _valueBoolean = null; OnPropertyChanged("valueBoolean", null); _valueAttachment = null; OnPropertyChanged("valueAttachment", null); }}; OnPropertyChanged("valueCodeableConcept", value); } }

            private FhirMarkdown? _valuemarkdown;
        [JsonPropertyName("valuemarkdown")]
        public FhirMarkdown? Valuemarkdown { get => _valuemarkdown; set { _valuemarkdown = value; if (value != null) {{ _valueCodeableConcept = null; OnPropertyChanged("valueCodeableConcept", null); _valueQuantity = null; OnPropertyChanged("valueQuantity", null); _valueInteger = null; OnPropertyChanged("valueInteger", null); _valuedate = null; OnPropertyChanged("valuedate", null); _valueBoolean = null; OnPropertyChanged("valueBoolean", null); _valueAttachment = null; OnPropertyChanged("valueAttachment", null); }}; OnPropertyChanged("valuemarkdown", value); } }

            private Quantity? _valueQuantity;
        [JsonPropertyName("valueQuantity")]
        public Quantity? ValueQuantity { get => _valueQuantity; set { _valueQuantity = value; if (value != null) {{ _valueCodeableConcept = null; OnPropertyChanged("valueCodeableConcept", null); _valuemarkdown = null; OnPropertyChanged("valuemarkdown", null); _valueInteger = null; OnPropertyChanged("valueInteger", null); _valuedate = null; OnPropertyChanged("valuedate", null); _valueBoolean = null; OnPropertyChanged("valueBoolean", null); _valueAttachment = null; OnPropertyChanged("valueAttachment", null); }}; OnPropertyChanged("valueQuantity", value); } }

            private FhirInteger? _valueInteger;
        [JsonPropertyName("valueInteger")]
        public FhirInteger? ValueInteger { get => _valueInteger; set { _valueInteger = value; if (value != null) {{ _valueCodeableConcept = null; OnPropertyChanged("valueCodeableConcept", null); _valuemarkdown = null; OnPropertyChanged("valuemarkdown", null); _valueQuantity = null; OnPropertyChanged("valueQuantity", null); _valuedate = null; OnPropertyChanged("valuedate", null); _valueBoolean = null; OnPropertyChanged("valueBoolean", null); _valueAttachment = null; OnPropertyChanged("valueAttachment", null); }}; OnPropertyChanged("valueInteger", value); } }

            private FhirDate? _valuedate;
        [JsonPropertyName("valuedate")]
        public FhirDate? Valuedate { get => _valuedate; set { _valuedate = value; if (value != null) {{ _valueCodeableConcept = null; OnPropertyChanged("valueCodeableConcept", null); _valuemarkdown = null; OnPropertyChanged("valuemarkdown", null); _valueQuantity = null; OnPropertyChanged("valueQuantity", null); _valueInteger = null; OnPropertyChanged("valueInteger", null); _valueBoolean = null; OnPropertyChanged("valueBoolean", null); _valueAttachment = null; OnPropertyChanged("valueAttachment", null); }}; OnPropertyChanged("valuedate", value); } }

            private FhirBoolean? _valueBoolean;
        [JsonPropertyName("valueBoolean")]
        public FhirBoolean? ValueBoolean { get => _valueBoolean; set { _valueBoolean = value; if (value != null) {{ _valueCodeableConcept = null; OnPropertyChanged("valueCodeableConcept", null); _valuemarkdown = null; OnPropertyChanged("valuemarkdown", null); _valueQuantity = null; OnPropertyChanged("valueQuantity", null); _valueInteger = null; OnPropertyChanged("valueInteger", null); _valuedate = null; OnPropertyChanged("valuedate", null); _valueAttachment = null; OnPropertyChanged("valueAttachment", null); }}; OnPropertyChanged("valueBoolean", value); } }

            private Attachment? _valueAttachment;
        [JsonPropertyName("valueAttachment")]
        public Attachment? ValueAttachment { get => _valueAttachment; set { _valueAttachment = value; if (value != null) {{ _valueCodeableConcept = null; OnPropertyChanged("valueCodeableConcept", null); _valuemarkdown = null; OnPropertyChanged("valuemarkdown", null); _valueQuantity = null; OnPropertyChanged("valueQuantity", null); _valueInteger = null; OnPropertyChanged("valueInteger", null); _valuedate = null; OnPropertyChanged("valuedate", null); _valueBoolean = null; OnPropertyChanged("valueBoolean", null); }}; OnPropertyChanged("valueAttachment", value); } }

        }

        private List<CodeableConcept>? _classification;
        [JsonPropertyName("classification")]
        public List<CodeableConcept>? Classification { get => _classification; set { _classification = value; OnPropertyChangedByClr(nameof(Classification), value); } }

        private List<ReferenceType>? _clinicalTrial;
        [JsonPropertyName("clinicalTrial")]
        public List<ReferenceType>? ClinicalTrial { get => _clinicalTrial; set { _clinicalTrial = value; OnPropertyChangedByClr(nameof(ClinicalTrial), value); } }

        private List<Coding>? _code;
        [JsonPropertyName("code")]
        public List<Coding>? Code { get => _code; set { _code = value; OnPropertyChangedByClr(nameof(Code), value); } }

        private CodeableConcept? _combinedPharmaceuticalDoseForm;
        [JsonPropertyName("combinedPharmaceuticalDoseForm")]
        public CodeableConcept? CombinedPharmaceuticalDoseForm { get => _combinedPharmaceuticalDoseForm; set { _combinedPharmaceuticalDoseForm = value; OnPropertyChangedByClr(nameof(CombinedPharmaceuticalDoseForm), value); } }

        private List<ReferenceType>? _comprisedOf;
        [JsonPropertyName("comprisedOf")]
        public List<ReferenceType>? ComprisedOf { get => _comprisedOf; set { _comprisedOf = value; OnPropertyChangedByClr(nameof(ComprisedOf), value); } }

        private List<MedicinalProductDefinition_Contact>? _contact;
        [JsonPropertyName("contact")]
        public List<MedicinalProductDefinition_Contact>? Contact { get => _contact; set { _contact = value; OnPropertyChangedByClr(nameof(Contact), value); } }

        /// <summary>
        /// A product specific contact, person (in a role), or an organization
        /// </summary>
        public partial class MedicinalProductDefinition_Contact : BackboneElement<MedicinalProductDefinition_Contact>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "MedicinalProductDefinition_Contact" : "medicinalProductDefinition_Contact";
            private ReferenceType? _contact;
        [JsonPropertyName("contact")]
        public ReferenceType Contact { get => _contact ?? throw new InvalidOperationException("Contact is required"); set { _contact = value; } }

            private CodeableConcept? _type;
        [JsonPropertyName("type")]
        public CodeableConcept? Type { get => _type; set { _type = value; } }

        }

        private List<Resource>? _contained;
        [JsonPropertyName("contained")]
        public List<Resource>? Contained { get => _contained; set { _contained = value; OnPropertyChangedByClr(nameof(Contained), value); } }

        private List<MedicinalProductDefinition_CrossReference>? _crossReference;
        [JsonPropertyName("crossReference")]
        public List<MedicinalProductDefinition_CrossReference>? CrossReference { get => _crossReference; set { _crossReference = value; OnPropertyChangedByClr(nameof(CrossReference), value); } }

        /// <summary>
        /// Reference to another product, e.g. for linking authorised to investigational product
        /// </summary>
        public partial class MedicinalProductDefinition_CrossReference : BackboneElement<MedicinalProductDefinition_CrossReference>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "MedicinalProductDefinition_CrossReference" : "medicinalProductDefinition_CrossReference";
            private CodeableReference? _product;
        [JsonPropertyName("product")]
        public CodeableReference Product { get => _product ?? throw new InvalidOperationException("Product is required"); set { _product = value; } }

            private CodeableConcept? _type;
        [JsonPropertyName("type")]
        public CodeableConcept? Type { get => _type; set { _type = value; } }

        }

        private FhirMarkdown? _description;
        [JsonPropertyName("description")]
        public FhirMarkdown? Description { get => _description; set { _description = value; OnPropertyChangedByClr(nameof(Description), value); } }

        private CodeableConcept? _domain;
        [JsonPropertyName("domain")]
        public CodeableConcept? Domain { get => _domain; set { _domain = value; OnPropertyChangedByClr(nameof(Domain), value); } }

        private List<Identifier>? _identifier;
        [JsonPropertyName("identifier")]
        public List<Identifier>? Identifier { get => _identifier; set { _identifier = value; OnPropertyChangedByClr(nameof(Identifier), value); } }

        private List<CodeableReference>? _impurity;
        [JsonPropertyName("impurity")]
        public List<CodeableReference>? Impurity { get => _impurity; set { _impurity = value; OnPropertyChangedByClr(nameof(Impurity), value); } }

        private FhirMarkdown? _indication;
        [JsonPropertyName("indication")]
        public FhirMarkdown? Indication { get => _indication; set { _indication = value; OnPropertyChangedByClr(nameof(Indication), value); } }

        private List<CodeableConcept>? _ingredient;
        [JsonPropertyName("ingredient")]
        public List<CodeableConcept>? Ingredient { get => _ingredient; set { _ingredient = value; OnPropertyChangedByClr(nameof(Ingredient), value); } }

        private CodeableConcept? _legalStatusOfSupply;
        [JsonPropertyName("legalStatusOfSupply")]
        public CodeableConcept? LegalStatusOfSupply { get => _legalStatusOfSupply; set { _legalStatusOfSupply = value; OnPropertyChangedByClr(nameof(LegalStatusOfSupply), value); } }

        private List<MarketingStatus>? _marketingStatus;
        [JsonPropertyName("marketingStatus")]
        public List<MarketingStatus>? MarketingStatus { get => _marketingStatus; set { _marketingStatus = value; OnPropertyChangedByClr(nameof(MarketingStatus), value); } }

        private List<ReferenceType>? _masterFile;
        [JsonPropertyName("masterFile")]
        public List<ReferenceType>? MasterFile { get => _masterFile; set { _masterFile = value; OnPropertyChangedByClr(nameof(MasterFile), value); } }

        private List<MedicinalProductDefinition_Name> _name = new();
        [JsonPropertyName("name")]
        public List<MedicinalProductDefinition_Name> Name { get => _name; set { _name = value; OnPropertyChangedByClr(nameof(Name), value); } }

        /// <summary>
        /// The product's name, including full name and possibly coded parts
        /// </summary>
        public partial class MedicinalProductDefinition_Name : BackboneElement<MedicinalProductDefinition_Name>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "MedicinalProductDefinition_Name" : "medicinalProductDefinition_Name";
            private List<MedicinalProductDefinition_Name_Part>? _part;
        [JsonPropertyName("part")]
        public List<MedicinalProductDefinition_Name_Part>? Part { get => _part; set { _part = value; } }

            /// <summary>
            /// Coding words or phrases of the name
            /// </summary>
            public partial class MedicinalProductDefinition_Name_Part : BackboneElement<MedicinalProductDefinition_Name_Part>
            {
                public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "MedicinalProductDefinition_Name_Part" : "medicinalProductDefinition_Name_Part";
                private FhirString? _part;
        [JsonPropertyName("part")]
        public FhirString Part { get => _part ?? throw new InvalidOperationException("Part is required"); set { _part = value; } }

                private CodeableConcept? _type;
        [JsonPropertyName("type")]
        public CodeableConcept Type { get => _type ?? throw new InvalidOperationException("Type is required"); set { _type = value; } }

            }

            private FhirString? _productName;
        [JsonPropertyName("productName")]
        public FhirString ProductName { get => _productName ?? throw new InvalidOperationException("ProductName is required"); set { _productName = value; } }

            private CodeableConcept? _type;
        [JsonPropertyName("type")]
        public CodeableConcept? Type { get => _type; set { _type = value; } }

            private List<MedicinalProductDefinition_Name_Usage>? _usage;
        [JsonPropertyName("usage")]
        public List<MedicinalProductDefinition_Name_Usage>? Usage { get => _usage; set { _usage = value; } }

            /// <summary>
            /// Country and jurisdiction where the name applies
            /// </summary>
            public partial class MedicinalProductDefinition_Name_Usage : BackboneElement<MedicinalProductDefinition_Name_Usage>
            {
                public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "MedicinalProductDefinition_Name_Usage" : "medicinalProductDefinition_Name_Usage";
                private CodeableConcept? _country;
        [JsonPropertyName("country")]
        public CodeableConcept Country { get => _country ?? throw new InvalidOperationException("Country is required"); set { _country = value; } }

                private CodeableConcept? _jurisdiction;
        [JsonPropertyName("jurisdiction")]
        public CodeableConcept? Jurisdiction { get => _jurisdiction; set { _jurisdiction = value; } }

                private CodeableConcept? _language;
        [JsonPropertyName("language")]
        public CodeableConcept Language { get => _language ?? throw new InvalidOperationException("Language is required"); set { _language = value; } }

            }

        }

        private List<MedicinalProductDefinition_Operation>? _operation;
        [JsonPropertyName("operation")]
        public List<MedicinalProductDefinition_Operation>? Operation { get => _operation; set { _operation = value; OnPropertyChangedByClr(nameof(Operation), value); } }

        /// <summary>
        /// A manufacturing or administrative process for the medicinal product
        /// </summary>
        public partial class MedicinalProductDefinition_Operation : BackboneElement<MedicinalProductDefinition_Operation>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "MedicinalProductDefinition_Operation" : "medicinalProductDefinition_Operation";
            private CodeableConcept? _confidentialityIndicator;
        [JsonPropertyName("confidentialityIndicator")]
        public CodeableConcept? ConfidentialityIndicator { get => _confidentialityIndicator; set { _confidentialityIndicator = value; } }

            private Period? _effectiveDate;
        [JsonPropertyName("effectiveDate")]
        public Period? EffectiveDate { get => _effectiveDate; set { _effectiveDate = value; } }

            private List<ReferenceType>? _organization;
        [JsonPropertyName("organization")]
        public List<ReferenceType>? Organization { get => _organization; set { _organization = value; } }

            private CodeableReference? _type;
        [JsonPropertyName("type")]
        public CodeableReference? Type { get => _type; set { _type = value; } }

        }

        private List<CodeableConcept>? _packagedMedicinalProduct;
        [JsonPropertyName("packagedMedicinalProduct")]
        public List<CodeableConcept>? PackagedMedicinalProduct { get => _packagedMedicinalProduct; set { _packagedMedicinalProduct = value; OnPropertyChangedByClr(nameof(PackagedMedicinalProduct), value); } }

        private CodeableConcept? _pediatricUseIndicator;
        [JsonPropertyName("pediatricUseIndicator")]
        public CodeableConcept? PediatricUseIndicator { get => _pediatricUseIndicator; set { _pediatricUseIndicator = value; OnPropertyChangedByClr(nameof(PediatricUseIndicator), value); } }

        private List<CodeableConcept>? _route;
        [JsonPropertyName("route")]
        public List<CodeableConcept>? Route { get => _route; set { _route = value; OnPropertyChangedByClr(nameof(Route), value); } }

        private List<CodeableConcept>? _specialMeasures;
        [JsonPropertyName("specialMeasures")]
        public List<CodeableConcept>? SpecialMeasures { get => _specialMeasures; set { _specialMeasures = value; OnPropertyChangedByClr(nameof(SpecialMeasures), value); } }

        private CodeableConcept? _status;
        [JsonPropertyName("status")]
        public CodeableConcept? Status { get => _status; set { _status = value; OnPropertyChangedByClr(nameof(Status), value); } }

        private FhirDateTime? _statusDate;
        [JsonPropertyName("statusDate")]
        public FhirDateTime? StatusDate { get => _statusDate; set { _statusDate = value; OnPropertyChangedByClr(nameof(StatusDate), value); } }

        private Narrative? _text;
        [JsonPropertyName("text")]
        public Narrative? Text { get => _text; set { _text = value; OnPropertyChangedByClr(nameof(Text), value); } }

        private CodeableConcept? _type;
        [JsonPropertyName("type")]
        public CodeableConcept? Type { get => _type; set { _type = value; OnPropertyChangedByClr(nameof(Type), value); } }

        private FhirString? _version;
        [JsonPropertyName("version")]
        public FhirString? Version { get => _version; set { _version = value; OnPropertyChangedByClr(nameof(Version), value); } }

    }
}
