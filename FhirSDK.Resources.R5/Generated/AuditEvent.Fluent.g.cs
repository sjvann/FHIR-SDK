// <auto-generated>
#nullable enable
using System.Collections.Generic;
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
namespace FhirSDK.Resources.R5
{
    public static class AuditEventFluentExtensions
    {
        public static AuditEvent WithAction(this AuditEvent r, FhirCode value) { r.Action = value; return r; }
        public static AuditEvent AddAgent(this AuditEvent r, BackboneElement item) { r.Agent ??= new List<BackboneElement>(); r.Agent!.Add(item); return r; }
        public static AuditEvent AddAuthorization(this AuditEvent r, CodeableConcept item) { r.Authorization ??= new List<CodeableConcept>(); r.Authorization!.Add(item); return r; }
        public static AuditEvent AddBasedOn(this AuditEvent r, ReferenceType item) { r.BasedOn ??= new List<ReferenceType>(); r.BasedOn!.Add(item); return r; }
        public static AuditEvent AddCategory(this AuditEvent r, CodeableConcept item) { r.Category ??= new List<CodeableConcept>(); r.Category!.Add(item); return r; }
        public static AuditEvent WithCode(this AuditEvent r, CodeableConcept value) { r.Code = value; return r; }
        public static AuditEvent AddContained(this AuditEvent r, Resource item) { r.Contained ??= new List<Resource>(); r.Contained!.Add(item); return r; }
        public static AuditEvent WithEncounter(this AuditEvent r, ReferenceType value) { r.Encounter = value; return r; }
        public static AuditEvent AddEntity(this AuditEvent r, BackboneElement item) { r.Entity ??= new List<BackboneElement>(); r.Entity!.Add(item); return r; }
        public static AuditEvent WithOccurredPeriod(this AuditEvent r, Period value) { r.OccurredPeriod = value; return r; }
        public static AuditEvent WithOccurredDateTime(this AuditEvent r, FhirDateTime value) { r.OccurredDateTime = value; return r; }
        public static AuditEvent WithOutcome(this AuditEvent r, BackboneElement value) { r.Outcome = value; return r; }
        public static AuditEvent WithPatient(this AuditEvent r, ReferenceType value) { r.Patient = value; return r; }
        public static AuditEvent WithRecorded(this AuditEvent r, FhirInstant value) { r.Recorded = value; return r; }
        public static AuditEvent WithSeverity(this AuditEvent r, FhirCode value) { r.Severity = value; return r; }
        public static AuditEvent WithSource(this AuditEvent r, BackboneElement value) { r.Source = value; return r; }
        public static AuditEvent WithText(this AuditEvent r, Narrative value) { r.Text = value; return r; }
    }
}
