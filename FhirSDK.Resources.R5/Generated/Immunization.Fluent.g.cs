// <auto-generated>
#nullable enable
using System.Collections.Generic;
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
namespace FhirSDK.Resources.R5
{
    public static class ImmunizationFluentExtensions
    {
        public static Immunization WithAdministeredProduct(this Immunization r, CodeableReference value) { r.AdministeredProduct = value; return r; }
        public static Immunization AddBasedOn(this Immunization r, ReferenceType item) { r.BasedOn ??= new List<ReferenceType>(); r.BasedOn!.Add(item); return r; }
        public static Immunization AddContained(this Immunization r, Resource item) { r.Contained ??= new List<Resource>(); r.Contained!.Add(item); return r; }
        public static Immunization WithDoseQuantity(this Immunization r, Quantity value) { r.DoseQuantity = value; return r; }
        public static Immunization WithEncounter(this Immunization r, ReferenceType value) { r.Encounter = value; return r; }
        public static Immunization WithExpirationDate(this Immunization r, FhirDate value) { r.ExpirationDate = value; return r; }
        public static Immunization WithFundingSource(this Immunization r, CodeableConcept value) { r.FundingSource = value; return r; }
        public static Immunization AddIdentifier(this Immunization r, Identifier item) { r.Identifier ??= new List<Identifier>(); r.Identifier!.Add(item); return r; }
        public static Immunization WithInformationSource(this Immunization r, CodeableReference value) { r.InformationSource = value; return r; }
        public static Immunization WithIsSubpotent(this Immunization r, FhirBoolean value) { r.IsSubpotent = value; return r; }
        public static Immunization WithLocation(this Immunization r, ReferenceType value) { r.Location = value; return r; }
        public static Immunization WithLotNumber(this Immunization r, FhirString value) { r.LotNumber = value; return r; }
        public static Immunization WithManufacturer(this Immunization r, CodeableReference value) { r.Manufacturer = value; return r; }
        public static Immunization AddNote(this Immunization r, Annotation item) { r.Note ??= new List<Annotation>(); r.Note!.Add(item); return r; }
        public static Immunization WithOccurrenceDateTime(this Immunization r, FhirDateTime value) { r.OccurrenceDateTime = value; return r; }
        public static Immunization WithOccurrenceString(this Immunization r, FhirString value) { r.OccurrenceString = value; return r; }
        public static Immunization WithPatient(this Immunization r, ReferenceType value) { r.Patient = value; return r; }
        public static Immunization AddPerformer(this Immunization r, BackboneElement item) { r.Performer ??= new List<BackboneElement>(); r.Performer!.Add(item); return r; }
        public static Immunization WithPrimarySource(this Immunization r, FhirBoolean value) { r.PrimarySource = value; return r; }
        public static Immunization AddProgramEligibility(this Immunization r, BackboneElement item) { r.ProgramEligibility ??= new List<BackboneElement>(); r.ProgramEligibility!.Add(item); return r; }
        public static Immunization AddProtocolApplied(this Immunization r, BackboneElement item) { r.ProtocolApplied ??= new List<BackboneElement>(); r.ProtocolApplied!.Add(item); return r; }
        public static Immunization AddReaction(this Immunization r, BackboneElement item) { r.Reaction ??= new List<BackboneElement>(); r.Reaction!.Add(item); return r; }
        public static Immunization AddReason(this Immunization r, CodeableReference item) { r.Reason ??= new List<CodeableReference>(); r.Reason!.Add(item); return r; }
        public static Immunization WithRoute(this Immunization r, CodeableConcept value) { r.Route = value; return r; }
        public static Immunization WithSite(this Immunization r, CodeableConcept value) { r.Site = value; return r; }
        public static Immunization WithStatus(this Immunization r, FhirCode value) { r.Status = value; return r; }
        public static Immunization WithStatusReason(this Immunization r, CodeableConcept value) { r.StatusReason = value; return r; }
        public static Immunization AddSubpotentReason(this Immunization r, CodeableConcept item) { r.SubpotentReason ??= new List<CodeableConcept>(); r.SubpotentReason!.Add(item); return r; }
        public static Immunization AddSupportingInformation(this Immunization r, ReferenceType item) { r.SupportingInformation ??= new List<ReferenceType>(); r.SupportingInformation!.Add(item); return r; }
        public static Immunization WithText(this Immunization r, Narrative value) { r.Text = value; return r; }
        public static Immunization WithVaccineCode(this Immunization r, CodeableConcept value) { r.VaccineCode = value; return r; }
    }
}
