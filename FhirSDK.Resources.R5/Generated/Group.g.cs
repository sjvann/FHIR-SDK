// <auto-generated>
#nullable enable
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
using System.Text.Json.Nodes;
using System.Text.Json.Serialization;
using System.Linq;
using FhirCore.Base;
using DataTypeServices.TypeFramework;
using DataTypeServices.DataTypes.MetaTypes;
namespace FhirSDK.Resources.R5
{
    /// <summary>
    /// Group of multiple entities
    /// </summary>
    public partial class Group : ResourceBase
    {
        public override string ResourceType => "Group";

        public Group() { }
        public Group(string json) { SetRawFrom(JsonNode.Parse(json)); }
        public Group(JsonNode? source) { SetRawFrom(source); }
        protected override void OnPropertyChanged(string propertyName, object? newValue) { base.OnPropertyChanged(propertyName, newValue); }

        private FhirBoolean? _active;
        [JsonPropertyName("active")]
        public FhirBoolean? Active { get => _active; set { _active = value; OnPropertyChangedByClr(nameof(Active), value); } }

        private List<Group_Characteristic>? _characteristic;
        [JsonPropertyName("characteristic")]
        public List<Group_Characteristic>? Characteristic { get => _characteristic; set { _characteristic = value; OnPropertyChangedByClr(nameof(Characteristic), value); } }

        /// <summary>
        /// Include / Exclude group members by Trait
        /// </summary>
        public partial class Group_Characteristic : BackboneElement<Group_Characteristic>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "Group_Characteristic" : "group_Characteristic";
            private CodeableConcept? _code;
        [JsonPropertyName("code")]
        public CodeableConcept Code { get => _code ?? throw new InvalidOperationException("Code is required"); set { _code = value; } }

            private FhirBoolean? _exclude;
        [JsonPropertyName("exclude")]
        public FhirBoolean Exclude { get => _exclude ?? throw new InvalidOperationException("Exclude is required"); set { _exclude = value; } }

            private Period? _period;
        [JsonPropertyName("period")]
        public Period? Period { get => _period; set { _period = value; } }

            private CodeableConcept? _valueCodeableConcept;
        [JsonPropertyName("valueCodeableConcept")]
        public CodeableConcept? ValueCodeableConcept { get => _valueCodeableConcept; set { _valueCodeableConcept = value; if (value != null) {{ _valueBoolean = null; OnPropertyChanged("valueBoolean", null); _valueQuantity = null; OnPropertyChanged("valueQuantity", null); _valueRange = null; OnPropertyChanged("valueRange", null); _valueReference = null; OnPropertyChanged("valueReference", null); }}; OnPropertyChanged("valueCodeableConcept", value); } }

            private FhirBoolean? _valueBoolean;
        [JsonPropertyName("valueBoolean")]
        public FhirBoolean? ValueBoolean { get => _valueBoolean; set { _valueBoolean = value; if (value != null) {{ _valueCodeableConcept = null; OnPropertyChanged("valueCodeableConcept", null); _valueQuantity = null; OnPropertyChanged("valueQuantity", null); _valueRange = null; OnPropertyChanged("valueRange", null); _valueReference = null; OnPropertyChanged("valueReference", null); }}; OnPropertyChanged("valueBoolean", value); } }

            private Quantity? _valueQuantity;
        [JsonPropertyName("valueQuantity")]
        public Quantity? ValueQuantity { get => _valueQuantity; set { _valueQuantity = value; if (value != null) {{ _valueCodeableConcept = null; OnPropertyChanged("valueCodeableConcept", null); _valueBoolean = null; OnPropertyChanged("valueBoolean", null); _valueRange = null; OnPropertyChanged("valueRange", null); _valueReference = null; OnPropertyChanged("valueReference", null); }}; OnPropertyChanged("valueQuantity", value); } }

            private DataTypeServices.DataTypes.ComplexTypes.Range? _valueRange;
        [JsonPropertyName("valueRange")]
        public DataTypeServices.DataTypes.ComplexTypes.Range? ValueRange { get => _valueRange; set { _valueRange = value; if (value != null) {{ _valueCodeableConcept = null; OnPropertyChanged("valueCodeableConcept", null); _valueBoolean = null; OnPropertyChanged("valueBoolean", null); _valueQuantity = null; OnPropertyChanged("valueQuantity", null); _valueReference = null; OnPropertyChanged("valueReference", null); }}; OnPropertyChanged("valueRange", value); } }

            private ReferenceType? _valueReference;
        [JsonPropertyName("valueReference")]
        public ReferenceType? ValueReference { get => _valueReference; set { _valueReference = value; if (value != null) {{ _valueCodeableConcept = null; OnPropertyChanged("valueCodeableConcept", null); _valueBoolean = null; OnPropertyChanged("valueBoolean", null); _valueQuantity = null; OnPropertyChanged("valueQuantity", null); _valueRange = null; OnPropertyChanged("valueRange", null); }}; OnPropertyChanged("valueReference", value); } }

        }

        private CodeableConcept? _code;
        [JsonPropertyName("code")]
        public CodeableConcept? Code { get => _code; set { _code = value; OnPropertyChangedByClr(nameof(Code), value); } }

        private List<Resource>? _contained;
        [JsonPropertyName("contained")]
        public List<Resource>? Contained { get => _contained; set { _contained = value; OnPropertyChangedByClr(nameof(Contained), value); } }

        private FhirMarkdown? _description;
        [JsonPropertyName("description")]
        public FhirMarkdown? Description { get => _description; set { _description = value; OnPropertyChangedByClr(nameof(Description), value); } }

        private List<Identifier>? _identifier;
        [JsonPropertyName("identifier")]
        public List<Identifier>? Identifier { get => _identifier; set { _identifier = value; OnPropertyChangedByClr(nameof(Identifier), value); } }

        private ReferenceType? _managingEntity;
        [JsonPropertyName("managingEntity")]
        public ReferenceType? ManagingEntity { get => _managingEntity; set { _managingEntity = value; OnPropertyChangedByClr(nameof(ManagingEntity), value); } }

        private List<Group_Member>? _member;
        [JsonPropertyName("member")]
        public List<Group_Member>? Member { get => _member; set { _member = value; OnPropertyChangedByClr(nameof(Member), value); } }

        /// <summary>
        /// Who or what is in group
        /// </summary>
        public partial class Group_Member : BackboneElement<Group_Member>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "Group_Member" : "group_Member";
            private ReferenceType? _entity;
        [JsonPropertyName("entity")]
        public ReferenceType Entity { get => _entity ?? throw new InvalidOperationException("Entity is required"); set { _entity = value; } }

            private FhirBoolean? _inactive;
        [JsonPropertyName("inactive")]
        public FhirBoolean? Inactive { get => _inactive; set { _inactive = value; } }

            private Period? _period;
        [JsonPropertyName("period")]
        public Period? Period { get => _period; set { _period = value; } }

        }

        private FhirCode? _membership;
        [JsonPropertyName("membership")]
        public FhirCode Membership { get => _membership ?? throw new InvalidOperationException("Membership is required"); set { _membership = value; OnPropertyChangedByClr(nameof(Membership), value); } }

        private FhirString? _name;
        [JsonPropertyName("name")]
        public FhirString? Name { get => _name; set { _name = value; OnPropertyChangedByClr(nameof(Name), value); } }

        private FhirUnsignedInt? _quantity;
        [JsonPropertyName("quantity")]
        public FhirUnsignedInt? Quantity { get => _quantity; set { _quantity = value; OnPropertyChangedByClr(nameof(Quantity), value); } }

        private Narrative? _text;
        [JsonPropertyName("text")]
        public Narrative? Text { get => _text; set { _text = value; OnPropertyChangedByClr(nameof(Text), value); } }

        private FhirCode? _type;
        [JsonPropertyName("type")]
        public FhirCode Type { get => _type ?? throw new InvalidOperationException("Type is required"); set { _type = value; OnPropertyChangedByClr(nameof(Type), value); } }

    }
}
