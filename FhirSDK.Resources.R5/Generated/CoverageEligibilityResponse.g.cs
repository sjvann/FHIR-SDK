// <auto-generated>
#nullable enable
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
using System.Text.Json.Nodes;
using System.Text.Json.Serialization;
using System.Linq;
using FhirCore.Base;
using DataTypeServices.TypeFramework;
using DataTypeServices.DataTypes.MetaTypes;
namespace FhirSDK.Resources.R5
{
    /// <summary>
    /// CoverageEligibilityResponse resource
    /// </summary>
    public partial class CoverageEligibilityResponse : ResourceBase
    {
        public override string ResourceType => "CoverageEligibilityResponse";

        public CoverageEligibilityResponse() { }
        public CoverageEligibilityResponse(string json) { SetRawFrom(JsonNode.Parse(json)); }
        public CoverageEligibilityResponse(JsonNode? source) { SetRawFrom(source); }
        protected override void OnPropertyChanged(string propertyName, object? newValue) { base.OnPropertyChanged(propertyName, newValue); }

        private List<Resource>? _contained;
        [JsonPropertyName("contained")]
        public List<Resource>? Contained { get => _contained; set { _contained = value; OnPropertyChangedByClr(nameof(Contained), value); } }

        private FhirDateTime? _created;
        [JsonPropertyName("created")]
        public FhirDateTime Created { get => _created ?? throw new InvalidOperationException("Created is required"); set { _created = value; OnPropertyChangedByClr(nameof(Created), value); } }

        private FhirString? _disposition;
        [JsonPropertyName("disposition")]
        public FhirString? Disposition { get => _disposition; set { _disposition = value; OnPropertyChangedByClr(nameof(Disposition), value); } }

        private List<CoverageEligibilityResponse_Error>? _error;
        [JsonPropertyName("error")]
        public List<CoverageEligibilityResponse_Error>? Error { get => _error; set { _error = value; OnPropertyChangedByClr(nameof(Error), value); } }

        /// <summary>
        /// Processing errors
        /// </summary>
        public partial class CoverageEligibilityResponse_Error : BackboneElement<CoverageEligibilityResponse_Error>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "CoverageEligibilityResponse_Error" : "coverageEligibilityResponse_Error";
            private CodeableConcept? _code;
        [JsonPropertyName("code")]
        public CodeableConcept Code { get => _code ?? throw new InvalidOperationException("Code is required"); set { _code = value; } }

            private List<FhirString>? _expression;
        [JsonPropertyName("expression")]
        public List<FhirString>? Expression { get => _expression; set { _expression = value; } }

        }

        private List<CoverageEligibilityResponse_Event>? _event;
        [JsonPropertyName("event")]
        public List<CoverageEligibilityResponse_Event>? Event { get => _event; set { _event = value; OnPropertyChangedByClr(nameof(Event), value); } }

        /// <summary>
        /// Event information
        /// </summary>
        public partial class CoverageEligibilityResponse_Event : BackboneElement<CoverageEligibilityResponse_Event>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "CoverageEligibilityResponse_Event" : "coverageEligibilityResponse_Event";
            private CodeableConcept? _type;
        [JsonPropertyName("type")]
        public CodeableConcept Type { get => _type ?? throw new InvalidOperationException("Type is required"); set { _type = value; } }

            private FhirDateTime? _whenDateTime;
        [JsonPropertyName("whenDateTime")]
        public FhirDateTime? WhenDateTime { get => _whenDateTime; set { _whenDateTime = value; if (value != null) {{ _whenPeriod = null; OnPropertyChanged("whenPeriod", null); }}; OnPropertyChanged("whenDateTime", value); } }

            private Period? _whenPeriod;
        [JsonPropertyName("whenPeriod")]
        public Period? WhenPeriod { get => _whenPeriod; set { _whenPeriod = value; if (value != null) {{ _whenDateTime = null; OnPropertyChanged("whenDateTime", null); }}; OnPropertyChanged("whenPeriod", value); } }

        }

        private CodeableConcept? _form;
        [JsonPropertyName("form")]
        public CodeableConcept? Form { get => _form; set { _form = value; OnPropertyChangedByClr(nameof(Form), value); } }

        private List<Identifier>? _identifier;
        [JsonPropertyName("identifier")]
        public List<Identifier>? Identifier { get => _identifier; set { _identifier = value; OnPropertyChangedByClr(nameof(Identifier), value); } }

        private List<CoverageEligibilityResponse_Insurance>? _insurance;
        [JsonPropertyName("insurance")]
        public List<CoverageEligibilityResponse_Insurance>? Insurance { get => _insurance; set { _insurance = value; OnPropertyChangedByClr(nameof(Insurance), value); } }

        /// <summary>
        /// Patient insurance information
        /// </summary>
        public partial class CoverageEligibilityResponse_Insurance : BackboneElement<CoverageEligibilityResponse_Insurance>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "CoverageEligibilityResponse_Insurance" : "coverageEligibilityResponse_Insurance";
            private Period? _benefitPeriod;
        [JsonPropertyName("benefitPeriod")]
        public Period? BenefitPeriod { get => _benefitPeriod; set { _benefitPeriod = value; } }

            private ReferenceType? _coverage;
        [JsonPropertyName("coverage")]
        public ReferenceType Coverage { get => _coverage ?? throw new InvalidOperationException("Coverage is required"); set { _coverage = value; } }

            private FhirBoolean? _inforce;
        [JsonPropertyName("inforce")]
        public FhirBoolean? Inforce { get => _inforce; set { _inforce = value; } }

            private List<CoverageEligibilityResponse_Insurance_Item>? _item;
        [JsonPropertyName("item")]
        public List<CoverageEligibilityResponse_Insurance_Item>? Item { get => _item; set { _item = value; } }

            /// <summary>
            /// Benefits and authorization details
            /// </summary>
            public partial class CoverageEligibilityResponse_Insurance_Item : BackboneElement<CoverageEligibilityResponse_Insurance_Item>
            {
                public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "CoverageEligibilityResponse_Insurance_Item" : "coverageEligibilityResponse_Insurance_Item";
                private FhirBoolean? _authorizationRequired;
        [JsonPropertyName("authorizationRequired")]
        public FhirBoolean? AuthorizationRequired { get => _authorizationRequired; set { _authorizationRequired = value; } }

                private List<CodeableConcept>? _authorizationSupporting;
        [JsonPropertyName("authorizationSupporting")]
        public List<CodeableConcept>? AuthorizationSupporting { get => _authorizationSupporting; set { _authorizationSupporting = value; } }

                private FhirUri? _authorizationUrl;
        [JsonPropertyName("authorizationUrl")]
        public FhirUri? AuthorizationUrl { get => _authorizationUrl; set { _authorizationUrl = value; } }

                private List<CoverageEligibilityResponse_Insurance_Item_Benefit>? _benefit;
        [JsonPropertyName("benefit")]
        public List<CoverageEligibilityResponse_Insurance_Item_Benefit>? Benefit { get => _benefit; set { _benefit = value; } }

                /// <summary>
                /// Benefit Summary
                /// </summary>
                public partial class CoverageEligibilityResponse_Insurance_Item_Benefit : BackboneElement<CoverageEligibilityResponse_Insurance_Item_Benefit>
                {
                    public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "CoverageEligibilityResponse_Insurance_Item_Benefit" : "coverageEligibilityResponse_Insurance_Item_Benefit";
                    private FhirUnsignedInt? _allowedunsignedInt;
        [JsonPropertyName("allowedunsignedInt")]
        public FhirUnsignedInt? AllowedunsignedInt { get => _allowedunsignedInt; set { _allowedunsignedInt = value; if (value != null) {{ }}; OnPropertyChanged("allowedunsignedInt", value); } }

                    private FhirString? _allowedString;
        [JsonPropertyName("allowedString")]
        public FhirString? AllowedString { get => _allowedString; set { _allowedString = value; if (value != null) {{ _allowedunsignedInt = null; OnPropertyChanged("allowedunsignedInt", null); }}; OnPropertyChanged("allowedString", value); } }

                    private Money? _allowedMoney;
        [JsonPropertyName("allowedMoney")]
        public Money? AllowedMoney { get => _allowedMoney; set { _allowedMoney = value; if (value != null) {{ _allowedunsignedInt = null; OnPropertyChanged("allowedunsignedInt", null); _allowedString = null; OnPropertyChanged("allowedString", null); }}; OnPropertyChanged("allowedMoney", value); } }

                    private CodeableConcept? _type;
        [JsonPropertyName("type")]
        public CodeableConcept Type { get => _type ?? throw new InvalidOperationException("Type is required"); set { _type = value; } }

                    private FhirUnsignedInt? _usedunsignedInt;
        [JsonPropertyName("usedunsignedInt")]
        public FhirUnsignedInt? UsedunsignedInt { get => _usedunsignedInt; set { _usedunsignedInt = value; if (value != null) {{ }}; OnPropertyChanged("usedunsignedInt", value); } }

                    private FhirString? _usedString;
        [JsonPropertyName("usedString")]
        public FhirString? UsedString { get => _usedString; set { _usedString = value; if (value != null) {{ _usedunsignedInt = null; OnPropertyChanged("usedunsignedInt", null); }}; OnPropertyChanged("usedString", value); } }

                    private Money? _usedMoney;
        [JsonPropertyName("usedMoney")]
        public Money? UsedMoney { get => _usedMoney; set { _usedMoney = value; if (value != null) {{ _usedunsignedInt = null; OnPropertyChanged("usedunsignedInt", null); _usedString = null; OnPropertyChanged("usedString", null); }}; OnPropertyChanged("usedMoney", value); } }

                }

                private CodeableConcept? _category;
        [JsonPropertyName("category")]
        public CodeableConcept? Category { get => _category; set { _category = value; } }

                private FhirString? _description;
        [JsonPropertyName("description")]
        public FhirString? Description { get => _description; set { _description = value; } }

                private FhirBoolean? _excluded;
        [JsonPropertyName("excluded")]
        public FhirBoolean? Excluded { get => _excluded; set { _excluded = value; } }

                private List<CodeableConcept>? _modifier;
        [JsonPropertyName("modifier")]
        public List<CodeableConcept>? Modifier { get => _modifier; set { _modifier = value; } }

                private FhirString? _name;
        [JsonPropertyName("name")]
        public FhirString? Name { get => _name; set { _name = value; } }

                private CodeableConcept? _network;
        [JsonPropertyName("network")]
        public CodeableConcept? Network { get => _network; set { _network = value; } }

                private CodeableConcept? _productOrService;
        [JsonPropertyName("productOrService")]
        public CodeableConcept? ProductOrService { get => _productOrService; set { _productOrService = value; } }

                private ReferenceType? _provider;
        [JsonPropertyName("provider")]
        public ReferenceType? Provider { get => _provider; set { _provider = value; } }

                private CodeableConcept? _term;
        [JsonPropertyName("term")]
        public CodeableConcept? Term { get => _term; set { _term = value; } }

                private CodeableConcept? _unit;
        [JsonPropertyName("unit")]
        public CodeableConcept? Unit { get => _unit; set { _unit = value; } }

            }

        }

        private ReferenceType? _insurer;
        [JsonPropertyName("insurer")]
        public ReferenceType Insurer { get => _insurer ?? throw new InvalidOperationException("Insurer is required"); set { _insurer = value; OnPropertyChangedByClr(nameof(Insurer), value); } }

        private FhirCode? _outcome;
        [JsonPropertyName("outcome")]
        public FhirCode Outcome { get => _outcome ?? throw new InvalidOperationException("Outcome is required"); set { _outcome = value; OnPropertyChangedByClr(nameof(Outcome), value); } }

        private ReferenceType? _patient;
        [JsonPropertyName("patient")]
        public ReferenceType Patient { get => _patient ?? throw new InvalidOperationException("Patient is required"); set { _patient = value; OnPropertyChangedByClr(nameof(Patient), value); } }

        private FhirString? _preAuthRef;
        [JsonPropertyName("preAuthRef")]
        public FhirString? PreAuthRef { get => _preAuthRef; set { _preAuthRef = value; OnPropertyChangedByClr(nameof(PreAuthRef), value); } }

        private List<FhirCode> _purpose = new();
        [JsonPropertyName("purpose")]
        public List<FhirCode> Purpose { get => _purpose; set { _purpose = value; OnPropertyChangedByClr(nameof(Purpose), value); } }

        private ReferenceType? _request;
        [JsonPropertyName("request")]
        public ReferenceType Request { get => _request ?? throw new InvalidOperationException("Request is required"); set { _request = value; OnPropertyChangedByClr(nameof(Request), value); } }

        private ReferenceType? _requestor;
        [JsonPropertyName("requestor")]
        public ReferenceType? Requestor { get => _requestor; set { _requestor = value; OnPropertyChangedByClr(nameof(Requestor), value); } }

        private FhirDate? _serviceddate;
        [JsonPropertyName("serviceddate")]
        public FhirDate? Serviceddate { get => _serviceddate; set { _serviceddate = value; if (value != null) {{ _servicedPeriod = null; OnPropertyChangedByClr(nameof(ServicedPeriod), null); }}; OnPropertyChangedByClr(nameof(Serviceddate), value); } }

        private Period? _servicedPeriod;
        [JsonPropertyName("servicedPeriod")]
        public Period? ServicedPeriod { get => _servicedPeriod; set { _servicedPeriod = value; if (value != null) {{ _serviceddate = null; OnPropertyChangedByClr(nameof(Serviceddate), null); }}; OnPropertyChangedByClr(nameof(ServicedPeriod), value); } }

        private FhirCode? _status;
        [JsonPropertyName("status")]
        public FhirCode Status { get => _status ?? throw new InvalidOperationException("Status is required"); set { _status = value; OnPropertyChangedByClr(nameof(Status), value); } }

        private Narrative? _text;
        [JsonPropertyName("text")]
        public Narrative? Text { get => _text; set { _text = value; OnPropertyChangedByClr(nameof(Text), value); } }

    }
}
