// <auto-generated>
#nullable enable
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
using System.Text.Json.Nodes;
using System.Text.Json.Serialization;
using System.Linq;
using FhirCore.Base;
using DataTypeServices.TypeFramework;
using DataTypeServices.DataTypes.MetaTypes;
namespace FhirSDK.Resources.R5
{
    /// <summary>
    /// A reference to a document
    /// </summary>
    public partial class DocumentReference : ResourceBase
    {
        public override string ResourceType => "DocumentReference";

        public DocumentReference() { }
        public DocumentReference(string json) { SetRawFrom(JsonNode.Parse(json)); }
        public DocumentReference(JsonNode? source) { SetRawFrom(source); }
        protected override void OnPropertyChanged(string propertyName, object? newValue) { base.OnPropertyChanged(propertyName, newValue); }

        private List<DocumentReference_Attester>? _attester;
        [JsonPropertyName("attester")]
        public List<DocumentReference_Attester>? Attester { get => _attester; set { _attester = value; OnPropertyChangedByClr(nameof(Attester), value); } }

        /// <summary>
        /// Attests to accuracy of the document
        /// </summary>
        public partial class DocumentReference_Attester : BackboneElement<DocumentReference_Attester>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "DocumentReference_Attester" : "documentReference_Attester";
            private CodeableConcept? _mode;
        [JsonPropertyName("mode")]
        public CodeableConcept Mode { get => _mode ?? throw new InvalidOperationException("Mode is required"); set { _mode = value; } }

            private ReferenceType? _party;
        [JsonPropertyName("party")]
        public ReferenceType? Party { get => _party; set { _party = value; } }

            private FhirDateTime? _time;
        [JsonPropertyName("time")]
        public FhirDateTime? Time { get => _time; set { _time = value; } }

        }

        private List<ReferenceType>? _author;
        [JsonPropertyName("author")]
        public List<ReferenceType>? Author { get => _author; set { _author = value; OnPropertyChangedByClr(nameof(Author), value); } }

        private List<ReferenceType>? _basedOn;
        [JsonPropertyName("basedOn")]
        public List<ReferenceType>? BasedOn { get => _basedOn; set { _basedOn = value; OnPropertyChangedByClr(nameof(BasedOn), value); } }

        private List<CodeableReference>? _bodySite;
        [JsonPropertyName("bodySite")]
        public List<CodeableReference>? BodySite { get => _bodySite; set { _bodySite = value; OnPropertyChangedByClr(nameof(BodySite), value); } }

        private List<CodeableConcept>? _category;
        [JsonPropertyName("category")]
        public List<CodeableConcept>? Category { get => _category; set { _category = value; OnPropertyChangedByClr(nameof(Category), value); } }

        private List<Resource>? _contained;
        [JsonPropertyName("contained")]
        public List<Resource>? Contained { get => _contained; set { _contained = value; OnPropertyChangedByClr(nameof(Contained), value); } }

        private List<DocumentReference_Content> _content = new();
        [JsonPropertyName("content")]
        public List<DocumentReference_Content> Content { get => _content; set { _content = value; OnPropertyChangedByClr(nameof(Content), value); } }

        /// <summary>
        /// Document referenced
        /// </summary>
        public partial class DocumentReference_Content : BackboneElement<DocumentReference_Content>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "DocumentReference_Content" : "documentReference_Content";
            private Attachment? _attachment;
        [JsonPropertyName("attachment")]
        public Attachment Attachment { get => _attachment ?? throw new InvalidOperationException("Attachment is required"); set { _attachment = value; } }

            private List<DocumentReference_Content_Profile>? _profile;
        [JsonPropertyName("profile")]
        public List<DocumentReference_Content_Profile>? Profile { get => _profile; set { _profile = value; } }

            /// <summary>
            /// Content profile rules for the document
            /// </summary>
            public partial class DocumentReference_Content_Profile : BackboneElement<DocumentReference_Content_Profile>
            {
                public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "DocumentReference_Content_Profile" : "documentReference_Content_Profile";
                private Coding? _valueCoding;
        [JsonPropertyName("valueCoding")]
        public Coding? ValueCoding { get => _valueCoding; set { _valueCoding = value; if (value != null) {{ _valueuri = null; OnPropertyChanged("valueuri", null); _valuecanonical = null; OnPropertyChanged("valuecanonical", null); }}; OnPropertyChanged("valueCoding", value); } }

                private FhirUri? _valueuri;
        [JsonPropertyName("valueuri")]
        public FhirUri? Valueuri { get => _valueuri; set { _valueuri = value; if (value != null) {{ _valueCoding = null; OnPropertyChanged("valueCoding", null); _valuecanonical = null; OnPropertyChanged("valuecanonical", null); }}; OnPropertyChanged("valueuri", value); } }

                private FhirCanonical? _valuecanonical;
        [JsonPropertyName("valuecanonical")]
        public FhirCanonical? Valuecanonical { get => _valuecanonical; set { _valuecanonical = value; if (value != null) {{ _valueCoding = null; OnPropertyChanged("valueCoding", null); _valueuri = null; OnPropertyChanged("valueuri", null); }}; OnPropertyChanged("valuecanonical", value); } }

            }

        }

        private List<ReferenceType>? _context;
        [JsonPropertyName("context")]
        public List<ReferenceType>? Context { get => _context; set { _context = value; OnPropertyChangedByClr(nameof(Context), value); } }

        private ReferenceType? _custodian;
        [JsonPropertyName("custodian")]
        public ReferenceType? Custodian { get => _custodian; set { _custodian = value; OnPropertyChangedByClr(nameof(Custodian), value); } }

        private FhirInstant? _date;
        [JsonPropertyName("date")]
        public FhirInstant? Date { get => _date; set { _date = value; OnPropertyChangedByClr(nameof(Date), value); } }

        private FhirMarkdown? _description;
        [JsonPropertyName("description")]
        public FhirMarkdown? Description { get => _description; set { _description = value; OnPropertyChangedByClr(nameof(Description), value); } }

        private FhirCode? _docStatus;
        [JsonPropertyName("docStatus")]
        public FhirCode? DocStatus { get => _docStatus; set { _docStatus = value; OnPropertyChangedByClr(nameof(DocStatus), value); } }

        private List<CodeableReference>? _event;
        [JsonPropertyName("event")]
        public List<CodeableReference>? Event { get => _event; set { _event = value; OnPropertyChangedByClr(nameof(Event), value); } }

        private CodeableConcept? _facilityType;
        [JsonPropertyName("facilityType")]
        public CodeableConcept? FacilityType { get => _facilityType; set { _facilityType = value; OnPropertyChangedByClr(nameof(FacilityType), value); } }

        private List<Identifier>? _identifier;
        [JsonPropertyName("identifier")]
        public List<Identifier>? Identifier { get => _identifier; set { _identifier = value; OnPropertyChangedByClr(nameof(Identifier), value); } }

        private List<CodeableConcept>? _modality;
        [JsonPropertyName("modality")]
        public List<CodeableConcept>? Modality { get => _modality; set { _modality = value; OnPropertyChangedByClr(nameof(Modality), value); } }

        private Period? _period;
        [JsonPropertyName("period")]
        public Period? Period { get => _period; set { _period = value; OnPropertyChangedByClr(nameof(Period), value); } }

        private CodeableConcept? _practiceSetting;
        [JsonPropertyName("practiceSetting")]
        public CodeableConcept? PracticeSetting { get => _practiceSetting; set { _practiceSetting = value; OnPropertyChangedByClr(nameof(PracticeSetting), value); } }

        private List<DocumentReference_RelatesTo>? _relatesTo;
        [JsonPropertyName("relatesTo")]
        public List<DocumentReference_RelatesTo>? RelatesTo { get => _relatesTo; set { _relatesTo = value; OnPropertyChangedByClr(nameof(RelatesTo), value); } }

        /// <summary>
        /// Relationships to other documents
        /// </summary>
        public partial class DocumentReference_RelatesTo : BackboneElement<DocumentReference_RelatesTo>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "DocumentReference_RelatesTo" : "documentReference_RelatesTo";
            private CodeableConcept? _code;
        [JsonPropertyName("code")]
        public CodeableConcept Code { get => _code ?? throw new InvalidOperationException("Code is required"); set { _code = value; } }

            private ReferenceType? _target;
        [JsonPropertyName("target")]
        public ReferenceType Target { get => _target ?? throw new InvalidOperationException("Target is required"); set { _target = value; } }

        }

        private List<CodeableConcept>? _securityLabel;
        [JsonPropertyName("securityLabel")]
        public List<CodeableConcept>? SecurityLabel { get => _securityLabel; set { _securityLabel = value; OnPropertyChangedByClr(nameof(SecurityLabel), value); } }

        private FhirCode? _status;
        [JsonPropertyName("status")]
        public FhirCode Status { get => _status ?? throw new InvalidOperationException("Status is required"); set { _status = value; OnPropertyChangedByClr(nameof(Status), value); } }

        private ReferenceType? _subject;
        [JsonPropertyName("subject")]
        public ReferenceType? Subject { get => _subject; set { _subject = value; OnPropertyChangedByClr(nameof(Subject), value); } }

        private Narrative? _text;
        [JsonPropertyName("text")]
        public Narrative? Text { get => _text; set { _text = value; OnPropertyChangedByClr(nameof(Text), value); } }

        private CodeableConcept? _type;
        [JsonPropertyName("type")]
        public CodeableConcept? Type { get => _type; set { _type = value; OnPropertyChangedByClr(nameof(Type), value); } }

        private FhirString? _version;
        [JsonPropertyName("version")]
        public FhirString? Version { get => _version; set { _version = value; OnPropertyChangedByClr(nameof(Version), value); } }

    }
}
