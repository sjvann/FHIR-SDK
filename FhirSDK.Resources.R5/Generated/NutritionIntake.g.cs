// <auto-generated>
#nullable enable
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
using System.Text.Json.Nodes;
using System.Text.Json.Serialization;
using System.Linq;
using FhirCore.Base;
using DataTypeServices.TypeFramework;
using DataTypeServices.DataTypes.MetaTypes;
namespace FhirSDK.Resources.R5
{
    /// <summary>
    /// Record of food or fluid being taken by a patient
    /// </summary>
    public partial class NutritionIntake : ResourceBase
    {
        public override string ResourceType => "NutritionIntake";

        public NutritionIntake() { }
        public NutritionIntake(string json) { SetRawFrom(JsonNode.Parse(json)); }
        public NutritionIntake(JsonNode? source) { SetRawFrom(source); }
        protected override void OnPropertyChanged(string propertyName, object? newValue) { base.OnPropertyChanged(propertyName, newValue); }

        private List<ReferenceType>? _basedOn;
        [JsonPropertyName("basedOn")]
        public List<ReferenceType>? BasedOn { get => _basedOn; set { _basedOn = value; OnPropertyChangedByClr(nameof(BasedOn), value); } }

        private CodeableConcept? _code;
        [JsonPropertyName("code")]
        public CodeableConcept? Code { get => _code; set { _code = value; OnPropertyChangedByClr(nameof(Code), value); } }

        private List<NutritionIntake_ConsumedItem> _consumedItem = new();
        [JsonPropertyName("consumedItem")]
        public List<NutritionIntake_ConsumedItem> ConsumedItem { get => _consumedItem; set { _consumedItem = value; OnPropertyChangedByClr(nameof(ConsumedItem), value); } }

        /// <summary>
        /// What food or fluid product or item was consumed
        /// </summary>
        public partial class NutritionIntake_ConsumedItem : BackboneElement<NutritionIntake_ConsumedItem>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "NutritionIntake_ConsumedItem" : "nutritionIntake_ConsumedItem";
            private Quantity? _amount;
        [JsonPropertyName("amount")]
        public Quantity? Amount { get => _amount; set { _amount = value; } }

            private FhirBoolean? _notConsumed;
        [JsonPropertyName("notConsumed")]
        public FhirBoolean? NotConsumed { get => _notConsumed; set { _notConsumed = value; } }

            private CodeableConcept? _notConsumedReason;
        [JsonPropertyName("notConsumedReason")]
        public CodeableConcept? NotConsumedReason { get => _notConsumedReason; set { _notConsumedReason = value; } }

            private CodeableReference? _nutritionProduct;
        [JsonPropertyName("nutritionProduct")]
        public CodeableReference NutritionProduct { get => _nutritionProduct ?? throw new InvalidOperationException("NutritionProduct is required"); set { _nutritionProduct = value; } }

            private Quantity? _rate;
        [JsonPropertyName("rate")]
        public Quantity? Rate { get => _rate; set { _rate = value; } }

            private Timing? _schedule;
        [JsonPropertyName("schedule")]
        public Timing? Schedule { get => _schedule; set { _schedule = value; } }

            private CodeableConcept? _type;
        [JsonPropertyName("type")]
        public CodeableConcept Type { get => _type ?? throw new InvalidOperationException("Type is required"); set { _type = value; } }

        }

        private List<Resource>? _contained;
        [JsonPropertyName("contained")]
        public List<Resource>? Contained { get => _contained; set { _contained = value; OnPropertyChangedByClr(nameof(Contained), value); } }

        private List<ReferenceType>? _derivedFrom;
        [JsonPropertyName("derivedFrom")]
        public List<ReferenceType>? DerivedFrom { get => _derivedFrom; set { _derivedFrom = value; OnPropertyChangedByClr(nameof(DerivedFrom), value); } }

        private ReferenceType? _encounter;
        [JsonPropertyName("encounter")]
        public ReferenceType? Encounter { get => _encounter; set { _encounter = value; OnPropertyChangedByClr(nameof(Encounter), value); } }

        private List<Identifier>? _identifier;
        [JsonPropertyName("identifier")]
        public List<Identifier>? Identifier { get => _identifier; set { _identifier = value; OnPropertyChangedByClr(nameof(Identifier), value); } }

        private List<NutritionIntake_IngredientLabel>? _ingredientLabel;
        [JsonPropertyName("ingredientLabel")]
        public List<NutritionIntake_IngredientLabel>? IngredientLabel { get => _ingredientLabel; set { _ingredientLabel = value; OnPropertyChangedByClr(nameof(IngredientLabel), value); } }

        /// <summary>
        /// Total nutrient for the whole meal, product, serving
        /// </summary>
        public partial class NutritionIntake_IngredientLabel : BackboneElement<NutritionIntake_IngredientLabel>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "NutritionIntake_IngredientLabel" : "nutritionIntake_IngredientLabel";
            private Quantity? _amount;
        [JsonPropertyName("amount")]
        public Quantity Amount { get => _amount ?? throw new InvalidOperationException("Amount is required"); set { _amount = value; } }

            private CodeableReference? _nutrient;
        [JsonPropertyName("nutrient")]
        public CodeableReference Nutrient { get => _nutrient ?? throw new InvalidOperationException("Nutrient is required"); set { _nutrient = value; } }

        }

        private List<FhirCanonical>? _instantiatesCanonical;
        [JsonPropertyName("instantiatesCanonical")]
        public List<FhirCanonical>? InstantiatesCanonical { get => _instantiatesCanonical; set { _instantiatesCanonical = value; OnPropertyChangedByClr(nameof(InstantiatesCanonical), value); } }

        private List<FhirUri>? _instantiatesUri;
        [JsonPropertyName("instantiatesUri")]
        public List<FhirUri>? InstantiatesUri { get => _instantiatesUri; set { _instantiatesUri = value; OnPropertyChangedByClr(nameof(InstantiatesUri), value); } }

        private ReferenceType? _location;
        [JsonPropertyName("location")]
        public ReferenceType? Location { get => _location; set { _location = value; OnPropertyChangedByClr(nameof(Location), value); } }

        private List<Annotation>? _note;
        [JsonPropertyName("note")]
        public List<Annotation>? Note { get => _note; set { _note = value; OnPropertyChangedByClr(nameof(Note), value); } }

        private FhirDateTime? _occurrenceDateTime;
        [JsonPropertyName("occurrenceDateTime")]
        public FhirDateTime? OccurrenceDateTime { get => _occurrenceDateTime; set { _occurrenceDateTime = value; if (value != null) {{ _occurrencePeriod = null; OnPropertyChangedByClr(nameof(OccurrencePeriod), null); }}; OnPropertyChangedByClr(nameof(OccurrenceDateTime), value); } }

        private Period? _occurrencePeriod;
        [JsonPropertyName("occurrencePeriod")]
        public Period? OccurrencePeriod { get => _occurrencePeriod; set { _occurrencePeriod = value; if (value != null) {{ _occurrenceDateTime = null; OnPropertyChangedByClr(nameof(OccurrenceDateTime), null); }}; OnPropertyChangedByClr(nameof(OccurrencePeriod), value); } }

        private List<ReferenceType>? _partOf;
        [JsonPropertyName("partOf")]
        public List<ReferenceType>? PartOf { get => _partOf; set { _partOf = value; OnPropertyChangedByClr(nameof(PartOf), value); } }

        private List<NutritionIntake_Performer>? _performer;
        [JsonPropertyName("performer")]
        public List<NutritionIntake_Performer>? Performer { get => _performer; set { _performer = value; OnPropertyChangedByClr(nameof(Performer), value); } }

        /// <summary>
        /// Who was performed in the intake
        /// </summary>
        public partial class NutritionIntake_Performer : BackboneElement<NutritionIntake_Performer>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "NutritionIntake_Performer" : "nutritionIntake_Performer";
            private ReferenceType? _actor;
        [JsonPropertyName("actor")]
        public ReferenceType Actor { get => _actor ?? throw new InvalidOperationException("Actor is required"); set { _actor = value; } }

            private CodeableConcept? _function;
        [JsonPropertyName("function")]
        public CodeableConcept? Function { get => _function; set { _function = value; } }

        }

        private List<CodeableReference>? _reason;
        [JsonPropertyName("reason")]
        public List<CodeableReference>? Reason { get => _reason; set { _reason = value; OnPropertyChangedByClr(nameof(Reason), value); } }

        private FhirDateTime? _recorded;
        [JsonPropertyName("recorded")]
        public FhirDateTime? Recorded { get => _recorded; set { _recorded = value; OnPropertyChangedByClr(nameof(Recorded), value); } }

        private FhirBoolean? _reportedBoolean;
        [JsonPropertyName("reportedBoolean")]
        public FhirBoolean? ReportedBoolean { get => _reportedBoolean; set { _reportedBoolean = value; if (value != null) {{ _reportedReference = null; OnPropertyChangedByClr(nameof(ReportedReference), null); }}; OnPropertyChangedByClr(nameof(ReportedBoolean), value); } }

        private ReferenceType? _reportedReference;
        [JsonPropertyName("reportedReference")]
        public ReferenceType? ReportedReference { get => _reportedReference; set { _reportedReference = value; if (value != null) {{ _reportedBoolean = null; OnPropertyChangedByClr(nameof(ReportedBoolean), null); }}; OnPropertyChangedByClr(nameof(ReportedReference), value); } }

        private FhirCode? _status;
        [JsonPropertyName("status")]
        public FhirCode Status { get => _status ?? throw new InvalidOperationException("Status is required"); set { _status = value; OnPropertyChangedByClr(nameof(Status), value); } }

        private List<CodeableConcept>? _statusReason;
        [JsonPropertyName("statusReason")]
        public List<CodeableConcept>? StatusReason { get => _statusReason; set { _statusReason = value; OnPropertyChangedByClr(nameof(StatusReason), value); } }

        private ReferenceType? _subject;
        [JsonPropertyName("subject")]
        public ReferenceType Subject { get => _subject ?? throw new InvalidOperationException("Subject is required"); set { _subject = value; OnPropertyChangedByClr(nameof(Subject), value); } }

        private Narrative? _text;
        [JsonPropertyName("text")]
        public Narrative? Text { get => _text; set { _text = value; OnPropertyChangedByClr(nameof(Text), value); } }

    }
}
