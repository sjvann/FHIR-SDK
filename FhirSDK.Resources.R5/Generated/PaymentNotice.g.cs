// <auto-generated>
#nullable enable
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
using System.Text.Json.Nodes;
using System.Text.Json.Serialization;
using System.Linq;
using FhirCore.Base;
using DataTypeServices.TypeFramework;
using DataTypeServices.DataTypes.MetaTypes;
namespace FhirSDK.Resources.R5
{
    /// <summary>
    /// PaymentNotice request
    /// </summary>
    public partial class PaymentNotice : ResourceBase
    {
        public override string ResourceType => "PaymentNotice";

        public PaymentNotice() { }
        public PaymentNotice(string json) { SetRawFrom(JsonNode.Parse(json)); }
        public PaymentNotice(JsonNode? source) { SetRawFrom(source); }
        protected override void OnPropertyChanged(string propertyName, object? newValue) { base.OnPropertyChanged(propertyName, newValue); }

        private Money? _amount;
        [JsonPropertyName("amount")]
        public Money Amount { get => _amount ?? throw new InvalidOperationException("Amount is required"); set { _amount = value; OnPropertyChangedByClr(nameof(Amount), value); } }

        private List<Resource>? _contained;
        [JsonPropertyName("contained")]
        public List<Resource>? Contained { get => _contained; set { _contained = value; OnPropertyChangedByClr(nameof(Contained), value); } }

        private FhirDateTime? _created;
        [JsonPropertyName("created")]
        public FhirDateTime Created { get => _created ?? throw new InvalidOperationException("Created is required"); set { _created = value; OnPropertyChangedByClr(nameof(Created), value); } }

        private List<Identifier>? _identifier;
        [JsonPropertyName("identifier")]
        public List<Identifier>? Identifier { get => _identifier; set { _identifier = value; OnPropertyChangedByClr(nameof(Identifier), value); } }

        private ReferenceType? _payee;
        [JsonPropertyName("payee")]
        public ReferenceType? Payee { get => _payee; set { _payee = value; OnPropertyChangedByClr(nameof(Payee), value); } }

        private ReferenceType? _payment;
        [JsonPropertyName("payment")]
        public ReferenceType? Payment { get => _payment; set { _payment = value; OnPropertyChangedByClr(nameof(Payment), value); } }

        private FhirDate? _paymentDate;
        [JsonPropertyName("paymentDate")]
        public FhirDate? PaymentDate { get => _paymentDate; set { _paymentDate = value; OnPropertyChangedByClr(nameof(PaymentDate), value); } }

        private CodeableConcept? _paymentStatus;
        [JsonPropertyName("paymentStatus")]
        public CodeableConcept? PaymentStatus { get => _paymentStatus; set { _paymentStatus = value; OnPropertyChangedByClr(nameof(PaymentStatus), value); } }

        private ReferenceType? _recipient;
        [JsonPropertyName("recipient")]
        public ReferenceType Recipient { get => _recipient ?? throw new InvalidOperationException("Recipient is required"); set { _recipient = value; OnPropertyChangedByClr(nameof(Recipient), value); } }

        private ReferenceType? _reporter;
        [JsonPropertyName("reporter")]
        public ReferenceType? Reporter { get => _reporter; set { _reporter = value; OnPropertyChangedByClr(nameof(Reporter), value); } }

        private ReferenceType? _request;
        [JsonPropertyName("request")]
        public ReferenceType? Request { get => _request; set { _request = value; OnPropertyChangedByClr(nameof(Request), value); } }

        private ReferenceType? _response;
        [JsonPropertyName("response")]
        public ReferenceType? Response { get => _response; set { _response = value; OnPropertyChangedByClr(nameof(Response), value); } }

        private FhirCode? _status;
        [JsonPropertyName("status")]
        public FhirCode Status { get => _status ?? throw new InvalidOperationException("Status is required"); set { _status = value; OnPropertyChangedByClr(nameof(Status), value); } }

        private Narrative? _text;
        [JsonPropertyName("text")]
        public Narrative? Text { get => _text; set { _text = value; OnPropertyChangedByClr(nameof(Text), value); } }

    }
}
