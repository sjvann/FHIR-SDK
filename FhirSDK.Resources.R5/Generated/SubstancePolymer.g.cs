// <auto-generated>
#nullable enable
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
using System.Text.Json.Nodes;
using System.Text.Json.Serialization;
using System.Linq;
using FhirCore.Base;
using DataTypeServices.TypeFramework;
using DataTypeServices.DataTypes.MetaTypes;
namespace FhirSDK.Resources.R5
{
    /// <summary>
    /// Properties of a substance specific to it being a polymer
    /// </summary>
    public partial class SubstancePolymer : ResourceBase
    {
        public override string ResourceType => "SubstancePolymer";

        public SubstancePolymer() { }
        public SubstancePolymer(string json) { SetRawFrom(JsonNode.Parse(json)); }
        public SubstancePolymer(JsonNode? source) { SetRawFrom(source); }
        protected override void OnPropertyChanged(string propertyName, object? newValue) { base.OnPropertyChanged(propertyName, newValue); }

        private CodeableConcept? _class;
        [JsonPropertyName("class")]
        public CodeableConcept? Class { get => _class; set { _class = value; OnPropertyChangedByClr(nameof(Class), value); } }

        private List<Resource>? _contained;
        [JsonPropertyName("contained")]
        public List<Resource>? Contained { get => _contained; set { _contained = value; OnPropertyChangedByClr(nameof(Contained), value); } }

        private List<CodeableConcept>? _copolymerConnectivity;
        [JsonPropertyName("copolymerConnectivity")]
        public List<CodeableConcept>? CopolymerConnectivity { get => _copolymerConnectivity; set { _copolymerConnectivity = value; OnPropertyChangedByClr(nameof(CopolymerConnectivity), value); } }

        private CodeableConcept? _geometry;
        [JsonPropertyName("geometry")]
        public CodeableConcept? Geometry { get => _geometry; set { _geometry = value; OnPropertyChangedByClr(nameof(Geometry), value); } }

        private Identifier? _identifier;
        [JsonPropertyName("identifier")]
        public Identifier? Identifier { get => _identifier; set { _identifier = value; OnPropertyChangedByClr(nameof(Identifier), value); } }

        private FhirString? _modification;
        [JsonPropertyName("modification")]
        public FhirString? Modification { get => _modification; set { _modification = value; OnPropertyChangedByClr(nameof(Modification), value); } }

        private List<SubstancePolymer_MonomerSet>? _monomerSet;
        [JsonPropertyName("monomerSet")]
        public List<SubstancePolymer_MonomerSet>? MonomerSet { get => _monomerSet; set { _monomerSet = value; OnPropertyChangedByClr(nameof(MonomerSet), value); } }

        /// <summary>
        /// Todo
        /// </summary>
        public partial class SubstancePolymer_MonomerSet : BackboneElement<SubstancePolymer_MonomerSet>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "SubstancePolymer_MonomerSet" : "substancePolymer_MonomerSet";
            private CodeableConcept? _ratioType;
        [JsonPropertyName("ratioType")]
        public CodeableConcept? RatioType { get => _ratioType; set { _ratioType = value; } }

            private List<SubstancePolymer_MonomerSet_StartingMaterial>? _startingMaterial;
        [JsonPropertyName("startingMaterial")]
        public List<SubstancePolymer_MonomerSet_StartingMaterial>? StartingMaterial { get => _startingMaterial; set { _startingMaterial = value; } }

            /// <summary>
            /// The starting materials - monomer(s) used in the synthesis of the polymer
            /// </summary>
            public partial class SubstancePolymer_MonomerSet_StartingMaterial : BackboneElement<SubstancePolymer_MonomerSet_StartingMaterial>
            {
                public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "SubstancePolymer_MonomerSet_StartingMaterial" : "substancePolymer_MonomerSet_StartingMaterial";
                private Quantity? _amount;
        [JsonPropertyName("amount")]
        public Quantity? Amount { get => _amount; set { _amount = value; } }

                private CodeableConcept? _category;
        [JsonPropertyName("category")]
        public CodeableConcept? Category { get => _category; set { _category = value; } }

                private CodeableConcept? _code;
        [JsonPropertyName("code")]
        public CodeableConcept? Code { get => _code; set { _code = value; } }

                private FhirBoolean? _isDefining;
        [JsonPropertyName("isDefining")]
        public FhirBoolean? IsDefining { get => _isDefining; set { _isDefining = value; } }

            }

        }

        private List<SubstancePolymer_Repeat>? _repeat;
        [JsonPropertyName("repeat")]
        public List<SubstancePolymer_Repeat>? Repeat { get => _repeat; set { _repeat = value; OnPropertyChangedByClr(nameof(Repeat), value); } }

        /// <summary>
        /// Specifies and quantifies the repeated units and their configuration
        /// </summary>
        public partial class SubstancePolymer_Repeat : BackboneElement<SubstancePolymer_Repeat>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "SubstancePolymer_Repeat" : "substancePolymer_Repeat";
            private FhirString? _averageMolecularFormula;
        [JsonPropertyName("averageMolecularFormula")]
        public FhirString? AverageMolecularFormula { get => _averageMolecularFormula; set { _averageMolecularFormula = value; } }

            private List<SubstancePolymer_Repeat_RepeatUnit>? _repeatUnit;
        [JsonPropertyName("repeatUnit")]
        public List<SubstancePolymer_Repeat_RepeatUnit>? RepeatUnit { get => _repeatUnit; set { _repeatUnit = value; } }

            /// <summary>
            /// An SRU - Structural Repeat Unit
            /// </summary>
            public partial class SubstancePolymer_Repeat_RepeatUnit : BackboneElement<SubstancePolymer_Repeat_RepeatUnit>
            {
                public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "SubstancePolymer_Repeat_RepeatUnit" : "substancePolymer_Repeat_RepeatUnit";
                private FhirInteger? _amount;
        [JsonPropertyName("amount")]
        public FhirInteger? Amount { get => _amount; set { _amount = value; } }

                private List<SubstancePolymer_Repeat_RepeatUnit_DegreeOfPolymerisation>? _degreeOfPolymerisation;
        [JsonPropertyName("degreeOfPolymerisation")]
        public List<SubstancePolymer_Repeat_RepeatUnit_DegreeOfPolymerisation>? DegreeOfPolymerisation { get => _degreeOfPolymerisation; set { _degreeOfPolymerisation = value; } }

                /// <summary>
                /// Applies to homopolymer and block co-polymers where the degree of polymerisation within a block can be described
                /// </summary>
                public partial class SubstancePolymer_Repeat_RepeatUnit_DegreeOfPolymerisation : BackboneElement<SubstancePolymer_Repeat_RepeatUnit_DegreeOfPolymerisation>
                {
                    public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "SubstancePolymer_Repeat_RepeatUnit_DegreeOfPolymerisation" : "substancePolymer_Repeat_RepeatUnit_DegreeOfPolymerisation";
                    private FhirInteger? _average;
        [JsonPropertyName("average")]
        public FhirInteger? Average { get => _average; set { _average = value; } }

                    private FhirInteger? _high;
        [JsonPropertyName("high")]
        public FhirInteger? High { get => _high; set { _high = value; } }

                    private FhirInteger? _low;
        [JsonPropertyName("low")]
        public FhirInteger? Low { get => _low; set { _low = value; } }

                    private CodeableConcept? _type;
        [JsonPropertyName("type")]
        public CodeableConcept? Type { get => _type; set { _type = value; } }

                }

                private CodeableConcept? _orientation;
        [JsonPropertyName("orientation")]
        public CodeableConcept? Orientation { get => _orientation; set { _orientation = value; } }

                private List<SubstancePolymer_Repeat_RepeatUnit_StructuralRepresentation>? _structuralRepresentation;
        [JsonPropertyName("structuralRepresentation")]
        public List<SubstancePolymer_Repeat_RepeatUnit_StructuralRepresentation>? StructuralRepresentation { get => _structuralRepresentation; set { _structuralRepresentation = value; } }

                /// <summary>
                /// A graphical structure for this SRU
                /// </summary>
                public partial class SubstancePolymer_Repeat_RepeatUnit_StructuralRepresentation : BackboneElement<SubstancePolymer_Repeat_RepeatUnit_StructuralRepresentation>
                {
                    public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "SubstancePolymer_Repeat_RepeatUnit_StructuralRepresentation" : "substancePolymer_Repeat_RepeatUnit_StructuralRepresentation";
                    private Attachment? _attachment;
        [JsonPropertyName("attachment")]
        public Attachment? Attachment { get => _attachment; set { _attachment = value; } }

                    private CodeableConcept? _format;
        [JsonPropertyName("format")]
        public CodeableConcept? Format { get => _format; set { _format = value; } }

                    private FhirString? _representation;
        [JsonPropertyName("representation")]
        public FhirString? Representation { get => _representation; set { _representation = value; } }

                    private CodeableConcept? _type;
        [JsonPropertyName("type")]
        public CodeableConcept? Type { get => _type; set { _type = value; } }

                }

                private FhirString? _unit;
        [JsonPropertyName("unit")]
        public FhirString? Unit { get => _unit; set { _unit = value; } }

            }

            private CodeableConcept? _repeatUnitAmountType;
        [JsonPropertyName("repeatUnitAmountType")]
        public CodeableConcept? RepeatUnitAmountType { get => _repeatUnitAmountType; set { _repeatUnitAmountType = value; } }

        }

        private Narrative? _text;
        [JsonPropertyName("text")]
        public Narrative? Text { get => _text; set { _text = value; OnPropertyChangedByClr(nameof(Text), value); } }

    }
}
