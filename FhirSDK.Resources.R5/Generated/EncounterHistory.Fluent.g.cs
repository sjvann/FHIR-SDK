// <auto-generated>
#nullable enable
using System.Collections.Generic;
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
namespace FhirSDK.Resources.R5
{
    public static class EncounterHistoryFluentExtensions
    {
        public static EncounterHistory WithActualPeriod(this EncounterHistory r, Period value) { r.ActualPeriod = value; return r; }
        public static EncounterHistory WithClass(this EncounterHistory r, CodeableConcept value) { r.Class = value; return r; }
        public static EncounterHistory AddContained(this EncounterHistory r, Resource item) { r.Contained ??= new List<Resource>(); r.Contained!.Add(item); return r; }
        public static EncounterHistory WithEncounter(this EncounterHistory r, ReferenceType value) { r.Encounter = value; return r; }
        public static EncounterHistory AddIdentifier(this EncounterHistory r, Identifier item) { r.Identifier ??= new List<Identifier>(); r.Identifier!.Add(item); return r; }
        public static EncounterHistory WithLength(this EncounterHistory r, Duration value) { r.Length = value; return r; }
        public static EncounterHistory AddLocation(this EncounterHistory r, BackboneElement item) { r.Location ??= new List<BackboneElement>(); r.Location!.Add(item); return r; }
        public static EncounterHistory WithPlannedEndDate(this EncounterHistory r, FhirDateTime value) { r.PlannedEndDate = value; return r; }
        public static EncounterHistory WithPlannedStartDate(this EncounterHistory r, FhirDateTime value) { r.PlannedStartDate = value; return r; }
        public static EncounterHistory AddServiceType(this EncounterHistory r, CodeableReference item) { r.ServiceType ??= new List<CodeableReference>(); r.ServiceType!.Add(item); return r; }
        public static EncounterHistory WithStatus(this EncounterHistory r, FhirCode value) { r.Status = value; return r; }
        public static EncounterHistory WithSubject(this EncounterHistory r, ReferenceType value) { r.Subject = value; return r; }
        public static EncounterHistory WithSubjectStatus(this EncounterHistory r, CodeableConcept value) { r.SubjectStatus = value; return r; }
        public static EncounterHistory WithText(this EncounterHistory r, Narrative value) { r.Text = value; return r; }
        public static EncounterHistory AddType(this EncounterHistory r, CodeableConcept item) { r.Type ??= new List<CodeableConcept>(); r.Type!.Add(item); return r; }
    }
}
