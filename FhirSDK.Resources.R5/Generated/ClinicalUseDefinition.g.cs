// <auto-generated>
#nullable enable
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
using System.Text.Json.Nodes;
using System.Text.Json.Serialization;
using System.Linq;
using FhirCore.Base;
using DataTypeServices.TypeFramework;
using DataTypeServices.DataTypes.MetaTypes;
namespace FhirSDK.Resources.R5
{
    /// <summary>
    /// A single issue - either an indication, contraindication, interaction or an undesirable effect for a medicinal product, medication, device or procedure
    /// </summary>
    public partial class ClinicalUseDefinition : ResourceBase
    {
        public override string ResourceType => "ClinicalUseDefinition";

        public ClinicalUseDefinition() { }
        public ClinicalUseDefinition(string json) { SetRawFrom(JsonNode.Parse(json)); }
        public ClinicalUseDefinition(JsonNode? source) { SetRawFrom(source); }
        protected override void OnPropertyChanged(string propertyName, object? newValue) { base.OnPropertyChanged(propertyName, newValue); }

        private List<CodeableConcept>? _category;
        [JsonPropertyName("category")]
        public List<CodeableConcept>? Category { get => _category; set { _category = value; OnPropertyChangedByClr(nameof(Category), value); } }

        private List<Resource>? _contained;
        [JsonPropertyName("contained")]
        public List<Resource>? Contained { get => _contained; set { _contained = value; OnPropertyChangedByClr(nameof(Contained), value); } }

        private ClinicalUseDefinition_Contraindication? _contraindication;
        [JsonPropertyName("contraindication")]
        public ClinicalUseDefinition_Contraindication? Contraindication { get => _contraindication; set { _contraindication = value; OnPropertyChangedByClr(nameof(Contraindication), value); } }

        /// <summary>
        /// Specifics for when this is a contraindication
        /// </summary>
        public partial class ClinicalUseDefinition_Contraindication : BackboneElement<ClinicalUseDefinition_Contraindication>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "ClinicalUseDefinition_Contraindication" : "clinicalUseDefinition_Contraindication";
            private DataTypeServices.DataTypes.MetaTypes.ExpressionType? _applicability;
        [JsonPropertyName("applicability")]
        public DataTypeServices.DataTypes.MetaTypes.ExpressionType? Applicability { get => _applicability; set { _applicability = value; } }

            private List<CodeableReference>? _comorbidity;
        [JsonPropertyName("comorbidity")]
        public List<CodeableReference>? Comorbidity { get => _comorbidity; set { _comorbidity = value; } }

            private CodeableReference? _diseaseStatus;
        [JsonPropertyName("diseaseStatus")]
        public CodeableReference? DiseaseStatus { get => _diseaseStatus; set { _diseaseStatus = value; } }

            private CodeableReference? _diseaseSymptomProcedure;
        [JsonPropertyName("diseaseSymptomProcedure")]
        public CodeableReference? DiseaseSymptomProcedure { get => _diseaseSymptomProcedure; set { _diseaseSymptomProcedure = value; } }

            private List<ReferenceType>? _indication;
        [JsonPropertyName("indication")]
        public List<ReferenceType>? Indication { get => _indication; set { _indication = value; } }

            private List<ClinicalUseDefinition_Contraindication_OtherTherapy>? _otherTherapy;
        [JsonPropertyName("otherTherapy")]
        public List<ClinicalUseDefinition_Contraindication_OtherTherapy>? OtherTherapy { get => _otherTherapy; set { _otherTherapy = value; } }

            /// <summary>
            /// Information about use of the product in relation to other therapies described as part of the contraindication
            /// </summary>
            public partial class ClinicalUseDefinition_Contraindication_OtherTherapy : BackboneElement<ClinicalUseDefinition_Contraindication_OtherTherapy>
            {
                public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "ClinicalUseDefinition_Contraindication_OtherTherapy" : "clinicalUseDefinition_Contraindication_OtherTherapy";
                private CodeableConcept? _relationshipType;
        [JsonPropertyName("relationshipType")]
        public CodeableConcept RelationshipType { get => _relationshipType ?? throw new InvalidOperationException("RelationshipType is required"); set { _relationshipType = value; } }

                private CodeableReference? _treatment;
        [JsonPropertyName("treatment")]
        public CodeableReference Treatment { get => _treatment ?? throw new InvalidOperationException("Treatment is required"); set { _treatment = value; } }

            }

        }

        private List<Identifier>? _identifier;
        [JsonPropertyName("identifier")]
        public List<Identifier>? Identifier { get => _identifier; set { _identifier = value; OnPropertyChangedByClr(nameof(Identifier), value); } }

        private ClinicalUseDefinition_Indication? _indication;
        [JsonPropertyName("indication")]
        public ClinicalUseDefinition_Indication? Indication { get => _indication; set { _indication = value; OnPropertyChangedByClr(nameof(Indication), value); } }

        /// <summary>
        /// Specifics for when this is an indication
        /// </summary>
        public partial class ClinicalUseDefinition_Indication : BackboneElement<ClinicalUseDefinition_Indication>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "ClinicalUseDefinition_Indication" : "clinicalUseDefinition_Indication";
            private DataTypeServices.DataTypes.MetaTypes.ExpressionType? _applicability;
        [JsonPropertyName("applicability")]
        public DataTypeServices.DataTypes.MetaTypes.ExpressionType? Applicability { get => _applicability; set { _applicability = value; } }

            private List<CodeableReference>? _comorbidity;
        [JsonPropertyName("comorbidity")]
        public List<CodeableReference>? Comorbidity { get => _comorbidity; set { _comorbidity = value; } }

            private CodeableReference? _diseaseStatus;
        [JsonPropertyName("diseaseStatus")]
        public CodeableReference? DiseaseStatus { get => _diseaseStatus; set { _diseaseStatus = value; } }

            private CodeableReference? _diseaseSymptomProcedure;
        [JsonPropertyName("diseaseSymptomProcedure")]
        public CodeableReference? DiseaseSymptomProcedure { get => _diseaseSymptomProcedure; set { _diseaseSymptomProcedure = value; } }

            private DataTypeServices.DataTypes.ComplexTypes.Range? _durationRange;
        [JsonPropertyName("durationRange")]
        public DataTypeServices.DataTypes.ComplexTypes.Range? DurationRange { get => _durationRange; set { _durationRange = value; if (value != null) {{ _durationString = null; OnPropertyChanged("durationString", null); }}; OnPropertyChanged("durationRange", value); } }

            private FhirString? _durationString;
        [JsonPropertyName("durationString")]
        public FhirString? DurationString { get => _durationString; set { _durationString = value; if (value != null) {{ _durationRange = null; OnPropertyChanged("durationRange", null); }}; OnPropertyChanged("durationString", value); } }

            private CodeableReference? _intendedEffect;
        [JsonPropertyName("intendedEffect")]
        public CodeableReference? IntendedEffect { get => _intendedEffect; set { _intendedEffect = value; } }

            private List<FhirString>? _otherTherapy;
        [JsonPropertyName("otherTherapy")]
        public List<FhirString>? OtherTherapy { get => _otherTherapy; set { _otherTherapy = value; } }

            private List<ReferenceType>? _undesirableEffect;
        [JsonPropertyName("undesirableEffect")]
        public List<ReferenceType>? UndesirableEffect { get => _undesirableEffect; set { _undesirableEffect = value; } }

        }

        private ClinicalUseDefinition_Interaction? _interaction;
        [JsonPropertyName("interaction")]
        public ClinicalUseDefinition_Interaction? Interaction { get => _interaction; set { _interaction = value; OnPropertyChangedByClr(nameof(Interaction), value); } }

        /// <summary>
        /// Specifics for when this is an interaction
        /// </summary>
        public partial class ClinicalUseDefinition_Interaction : BackboneElement<ClinicalUseDefinition_Interaction>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "ClinicalUseDefinition_Interaction" : "clinicalUseDefinition_Interaction";
            private CodeableReference? _effect;
        [JsonPropertyName("effect")]
        public CodeableReference? Effect { get => _effect; set { _effect = value; } }

            private CodeableConcept? _incidence;
        [JsonPropertyName("incidence")]
        public CodeableConcept? Incidence { get => _incidence; set { _incidence = value; } }

            private List<ClinicalUseDefinition_Interaction_Interactant>? _interactant;
        [JsonPropertyName("interactant")]
        public List<ClinicalUseDefinition_Interaction_Interactant>? Interactant { get => _interactant; set { _interactant = value; } }

            /// <summary>
            /// The specific medication, product, food etc. or laboratory test that interacts
            /// </summary>
            public partial class ClinicalUseDefinition_Interaction_Interactant : BackboneElement<ClinicalUseDefinition_Interaction_Interactant>
            {
                public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "ClinicalUseDefinition_Interaction_Interactant" : "clinicalUseDefinition_Interaction_Interactant";
                private ReferenceType? _itemReference;
        [JsonPropertyName("itemReference")]
        public ReferenceType? ItemReference { get => _itemReference; set { _itemReference = value; if (value != null) {{ _itemCodeableConcept = null; OnPropertyChanged("itemCodeableConcept", null); }}; OnPropertyChanged("itemReference", value); } }

                private CodeableConcept? _itemCodeableConcept;
        [JsonPropertyName("itemCodeableConcept")]
        public CodeableConcept? ItemCodeableConcept { get => _itemCodeableConcept; set { _itemCodeableConcept = value; if (value != null) {{ _itemReference = null; OnPropertyChanged("itemReference", null); }}; OnPropertyChanged("itemCodeableConcept", value); } }

            }

            private List<CodeableConcept>? _management;
        [JsonPropertyName("management")]
        public List<CodeableConcept>? Management { get => _management; set { _management = value; } }

            private CodeableConcept? _type;
        [JsonPropertyName("type")]
        public CodeableConcept? Type { get => _type; set { _type = value; } }

        }

        private List<FhirCanonical>? _library;
        [JsonPropertyName("library")]
        public List<FhirCanonical>? Library { get => _library; set { _library = value; OnPropertyChangedByClr(nameof(Library), value); } }

        private List<ReferenceType>? _population;
        [JsonPropertyName("population")]
        public List<ReferenceType>? Population { get => _population; set { _population = value; OnPropertyChangedByClr(nameof(Population), value); } }

        private CodeableConcept? _status;
        [JsonPropertyName("status")]
        public CodeableConcept? Status { get => _status; set { _status = value; OnPropertyChangedByClr(nameof(Status), value); } }

        private List<ReferenceType>? _subject;
        [JsonPropertyName("subject")]
        public List<ReferenceType>? Subject { get => _subject; set { _subject = value; OnPropertyChangedByClr(nameof(Subject), value); } }

        private Narrative? _text;
        [JsonPropertyName("text")]
        public Narrative? Text { get => _text; set { _text = value; OnPropertyChangedByClr(nameof(Text), value); } }

        private FhirCode? _type;
        [JsonPropertyName("type")]
        public FhirCode Type { get => _type ?? throw new InvalidOperationException("Type is required"); set { _type = value; OnPropertyChangedByClr(nameof(Type), value); } }

        private ClinicalUseDefinition_UndesirableEffect? _undesirableEffect;
        [JsonPropertyName("undesirableEffect")]
        public ClinicalUseDefinition_UndesirableEffect? UndesirableEffect { get => _undesirableEffect; set { _undesirableEffect = value; OnPropertyChangedByClr(nameof(UndesirableEffect), value); } }

        /// <summary>
        /// A possible negative outcome from the use of this treatment
        /// </summary>
        public partial class ClinicalUseDefinition_UndesirableEffect : BackboneElement<ClinicalUseDefinition_UndesirableEffect>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "ClinicalUseDefinition_UndesirableEffect" : "clinicalUseDefinition_UndesirableEffect";
            private CodeableConcept? _classification;
        [JsonPropertyName("classification")]
        public CodeableConcept? Classification { get => _classification; set { _classification = value; } }

            private CodeableConcept? _frequencyOfOccurrence;
        [JsonPropertyName("frequencyOfOccurrence")]
        public CodeableConcept? FrequencyOfOccurrence { get => _frequencyOfOccurrence; set { _frequencyOfOccurrence = value; } }

            private CodeableReference? _symptomConditionEffect;
        [JsonPropertyName("symptomConditionEffect")]
        public CodeableReference? SymptomConditionEffect { get => _symptomConditionEffect; set { _symptomConditionEffect = value; } }

        }

        private ClinicalUseDefinition_Warning? _warning;
        [JsonPropertyName("warning")]
        public ClinicalUseDefinition_Warning? Warning { get => _warning; set { _warning = value; OnPropertyChangedByClr(nameof(Warning), value); } }

        /// <summary>
        /// Critical environmental, health or physical risks or hazards. For example 'Do not operate heavy machinery', 'May cause drowsiness'
        /// </summary>
        public partial class ClinicalUseDefinition_Warning : BackboneElement<ClinicalUseDefinition_Warning>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "ClinicalUseDefinition_Warning" : "clinicalUseDefinition_Warning";
            private CodeableConcept? _code;
        [JsonPropertyName("code")]
        public CodeableConcept? Code { get => _code; set { _code = value; } }

            private FhirMarkdown? _description;
        [JsonPropertyName("description")]
        public FhirMarkdown? Description { get => _description; set { _description = value; } }

        }

    }
}
