// <auto-generated>
#nullable enable
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
using System.Text.Json.Nodes;
using System.Text.Json.Serialization;
using System.Linq;
using FhirCore.Base;
using DataTypeServices.TypeFramework;
using DataTypeServices.DataTypes.MetaTypes;
namespace FhirSDK.Resources.R5
{
    /// <summary>
    /// A list is a curated collection of resources
    /// </summary>
    public partial class List : ResourceBase
    {
        public override string ResourceType => "List";

        public List() { }
        public List(string json) { SetRawFrom(JsonNode.Parse(json)); }
        public List(JsonNode? source) { SetRawFrom(source); }
        protected override void OnPropertyChanged(string propertyName, object? newValue) { base.OnPropertyChanged(propertyName, newValue); }

        private CodeableConcept? _code;
        [JsonPropertyName("code")]
        public CodeableConcept? Code { get => _code; set { _code = value; OnPropertyChangedByClr(nameof(Code), value); } }

        private List<Resource>? _contained;
        [JsonPropertyName("contained")]
        public List<Resource>? Contained { get => _contained; set { _contained = value; OnPropertyChangedByClr(nameof(Contained), value); } }

        private FhirDateTime? _date;
        [JsonPropertyName("date")]
        public FhirDateTime? Date { get => _date; set { _date = value; OnPropertyChangedByClr(nameof(Date), value); } }

        private CodeableConcept? _emptyReason;
        [JsonPropertyName("emptyReason")]
        public CodeableConcept? EmptyReason { get => _emptyReason; set { _emptyReason = value; OnPropertyChangedByClr(nameof(EmptyReason), value); } }

        private ReferenceType? _encounter;
        [JsonPropertyName("encounter")]
        public ReferenceType? Encounter { get => _encounter; set { _encounter = value; OnPropertyChangedByClr(nameof(Encounter), value); } }

        private List<List_Entry>? _entry;
        [JsonPropertyName("entry")]
        public List<List_Entry>? Entry { get => _entry; set { _entry = value; OnPropertyChangedByClr(nameof(Entry), value); } }

        /// <summary>
        /// Entries in the list
        /// </summary>
        public partial class List_Entry : BackboneElement<List_Entry>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "List_Entry" : "list_Entry";
            private FhirDateTime? _date;
        [JsonPropertyName("date")]
        public FhirDateTime? Date { get => _date; set { _date = value; } }

            private FhirBoolean? _deleted;
        [JsonPropertyName("deleted")]
        public FhirBoolean? Deleted { get => _deleted; set { _deleted = value; } }

            private CodeableConcept? _flag;
        [JsonPropertyName("flag")]
        public CodeableConcept? Flag { get => _flag; set { _flag = value; } }

            private ReferenceType? _item;
        [JsonPropertyName("item")]
        public ReferenceType Item { get => _item ?? throw new InvalidOperationException("Item is required"); set { _item = value; } }

        }

        private List<Identifier>? _identifier;
        [JsonPropertyName("identifier")]
        public List<Identifier>? Identifier { get => _identifier; set { _identifier = value; OnPropertyChangedByClr(nameof(Identifier), value); } }

        private FhirCode? _mode;
        [JsonPropertyName("mode")]
        public FhirCode Mode { get => _mode ?? throw new InvalidOperationException("Mode is required"); set { _mode = value; OnPropertyChangedByClr(nameof(Mode), value); } }

        private List<Annotation>? _note;
        [JsonPropertyName("note")]
        public List<Annotation>? Note { get => _note; set { _note = value; OnPropertyChangedByClr(nameof(Note), value); } }

        private CodeableConcept? _orderedBy;
        [JsonPropertyName("orderedBy")]
        public CodeableConcept? OrderedBy { get => _orderedBy; set { _orderedBy = value; OnPropertyChangedByClr(nameof(OrderedBy), value); } }

        private ReferenceType? _source;
        [JsonPropertyName("source")]
        public ReferenceType? Source { get => _source; set { _source = value; OnPropertyChangedByClr(nameof(Source), value); } }

        private FhirCode? _status;
        [JsonPropertyName("status")]
        public FhirCode Status { get => _status ?? throw new InvalidOperationException("Status is required"); set { _status = value; OnPropertyChangedByClr(nameof(Status), value); } }

        private List<ReferenceType>? _subject;
        [JsonPropertyName("subject")]
        public List<ReferenceType>? Subject { get => _subject; set { _subject = value; OnPropertyChangedByClr(nameof(Subject), value); } }

        private Narrative? _text;
        [JsonPropertyName("text")]
        public Narrative? Text { get => _text; set { _text = value; OnPropertyChangedByClr(nameof(Text), value); } }

        private FhirString? _title;
        [JsonPropertyName("title")]
        public FhirString? Title { get => _title; set { _title = value; OnPropertyChangedByClr(nameof(Title), value); } }

    }
}
