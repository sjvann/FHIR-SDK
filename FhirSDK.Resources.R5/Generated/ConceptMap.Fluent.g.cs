// <auto-generated>
#nullable enable
using System.Collections.Generic;
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
namespace FhirSDK.Resources.R5
{
    public static class ConceptMapFluentExtensions
    {
        public static ConceptMap AddAdditionalAttribute(this ConceptMap r, BackboneElement item) { r.AdditionalAttribute ??= new List<BackboneElement>(); r.AdditionalAttribute!.Add(item); return r; }
        public static ConceptMap WithApprovalDate(this ConceptMap r, FhirDate value) { r.ApprovalDate = value; return r; }
        public static ConceptMap AddAuthor(this ConceptMap r, ContactDetail item) { r.Author ??= new List<ContactDetail>(); r.Author!.Add(item); return r; }
        public static ConceptMap AddContact(this ConceptMap r, ContactDetail item) { r.Contact ??= new List<ContactDetail>(); r.Contact!.Add(item); return r; }
        public static ConceptMap AddContained(this ConceptMap r, Resource item) { r.Contained ??= new List<Resource>(); r.Contained!.Add(item); return r; }
        public static ConceptMap WithCopyright(this ConceptMap r, FhirMarkdown value) { r.Copyright = value; return r; }
        public static ConceptMap WithCopyrightLabel(this ConceptMap r, FhirString value) { r.CopyrightLabel = value; return r; }
        public static ConceptMap WithDate(this ConceptMap r, FhirDateTime value) { r.Date = value; return r; }
        public static ConceptMap WithDescription(this ConceptMap r, FhirMarkdown value) { r.Description = value; return r; }
        public static ConceptMap AddEditor(this ConceptMap r, ContactDetail item) { r.Editor ??= new List<ContactDetail>(); r.Editor!.Add(item); return r; }
        public static ConceptMap WithEffectivePeriod(this ConceptMap r, Period value) { r.EffectivePeriod = value; return r; }
        public static ConceptMap AddEndorser(this ConceptMap r, ContactDetail item) { r.Endorser ??= new List<ContactDetail>(); r.Endorser!.Add(item); return r; }
        public static ConceptMap WithExperimental(this ConceptMap r, FhirBoolean value) { r.Experimental = value; return r; }
        public static ConceptMap AddGroup(this ConceptMap r, BackboneElement item) { r.Group ??= new List<BackboneElement>(); r.Group!.Add(item); return r; }
        public static ConceptMap AddIdentifier(this ConceptMap r, Identifier item) { r.Identifier ??= new List<Identifier>(); r.Identifier!.Add(item); return r; }
        public static ConceptMap AddJurisdiction(this ConceptMap r, CodeableConcept item) { r.Jurisdiction ??= new List<CodeableConcept>(); r.Jurisdiction!.Add(item); return r; }
        public static ConceptMap WithLastReviewDate(this ConceptMap r, FhirDate value) { r.LastReviewDate = value; return r; }
        public static ConceptMap WithName(this ConceptMap r, FhirString value) { r.Name = value; return r; }
        public static ConceptMap AddProperty(this ConceptMap r, BackboneElement item) { r.Property ??= new List<BackboneElement>(); r.Property!.Add(item); return r; }
        public static ConceptMap WithPublisher(this ConceptMap r, FhirString value) { r.Publisher = value; return r; }
        public static ConceptMap WithPurpose(this ConceptMap r, FhirMarkdown value) { r.Purpose = value; return r; }
        public static ConceptMap AddRelatedArtifact(this ConceptMap r, RelatedArtifact item) { r.RelatedArtifact ??= new List<RelatedArtifact>(); r.RelatedArtifact!.Add(item); return r; }
        public static ConceptMap AddReviewer(this ConceptMap r, ContactDetail item) { r.Reviewer ??= new List<ContactDetail>(); r.Reviewer!.Add(item); return r; }
        public static ConceptMap WithSourceScopeuri(this ConceptMap r, FhirUri value) { r.SourceScopeuri = value; return r; }
        public static ConceptMap WithSourceScopecanonical(this ConceptMap r, FhirCanonical value) { r.SourceScopecanonical = value; return r; }
        public static ConceptMap WithStatus(this ConceptMap r, FhirCode value) { r.Status = value; return r; }
        public static ConceptMap WithTargetScopeuri(this ConceptMap r, FhirUri value) { r.TargetScopeuri = value; return r; }
        public static ConceptMap WithTargetScopecanonical(this ConceptMap r, FhirCanonical value) { r.TargetScopecanonical = value; return r; }
        public static ConceptMap WithText(this ConceptMap r, Narrative value) { r.Text = value; return r; }
        public static ConceptMap WithTitle(this ConceptMap r, FhirString value) { r.Title = value; return r; }
        public static ConceptMap AddTopic(this ConceptMap r, CodeableConcept item) { r.Topic ??= new List<CodeableConcept>(); r.Topic!.Add(item); return r; }
        public static ConceptMap WithUrl(this ConceptMap r, FhirUri value) { r.Url = value; return r; }
        public static ConceptMap AddUseContext(this ConceptMap r, UsageContext item) { r.UseContext ??= new List<UsageContext>(); r.UseContext!.Add(item); return r; }
        public static ConceptMap WithVersion(this ConceptMap r, FhirString value) { r.Version = value; return r; }
        public static ConceptMap WithVersionAlgorithmString(this ConceptMap r, FhirString value) { r.VersionAlgorithmString = value; return r; }
        public static ConceptMap WithVersionAlgorithmCoding(this ConceptMap r, Coding value) { r.VersionAlgorithmCoding = value; return r; }
    }
}
