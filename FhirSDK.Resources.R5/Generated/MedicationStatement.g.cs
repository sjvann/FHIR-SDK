// <auto-generated>
#nullable enable
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
using System.Text.Json.Nodes;
using System.Text.Json.Serialization;
using System.Linq;
using FhirCore.Base;
using DataTypeServices.TypeFramework;
using DataTypeServices.DataTypes.MetaTypes;
namespace FhirSDK.Resources.R5
{
    /// <summary>
    /// Record of medication being taken by a patient
    /// </summary>
    public partial class MedicationStatement : ResourceBase
    {
        public override string ResourceType => "MedicationStatement";

        public MedicationStatement() { }
        public MedicationStatement(string json) { SetRawFrom(JsonNode.Parse(json)); }
        public MedicationStatement(JsonNode? source) { SetRawFrom(source); }
        protected override void OnPropertyChanged(string propertyName, object? newValue) { base.OnPropertyChanged(propertyName, newValue); }

        private MedicationStatement_Adherence? _adherence;
        [JsonPropertyName("adherence")]
        public MedicationStatement_Adherence? Adherence { get => _adherence; set { _adherence = value; OnPropertyChangedByClr(nameof(Adherence), value); } }

        /// <summary>
        /// Indicates whether the medication is or is not being consumed or administered
        /// </summary>
        public partial class MedicationStatement_Adherence : BackboneElement<MedicationStatement_Adherence>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "MedicationStatement_Adherence" : "medicationStatement_Adherence";
            private CodeableConcept? _code;
        [JsonPropertyName("code")]
        public CodeableConcept Code { get => _code ?? throw new InvalidOperationException("Code is required"); set { _code = value; } }

            private CodeableConcept? _reason;
        [JsonPropertyName("reason")]
        public CodeableConcept? Reason { get => _reason; set { _reason = value; } }

        }

        private List<CodeableConcept>? _category;
        [JsonPropertyName("category")]
        public List<CodeableConcept>? Category { get => _category; set { _category = value; OnPropertyChangedByClr(nameof(Category), value); } }

        private List<Resource>? _contained;
        [JsonPropertyName("contained")]
        public List<Resource>? Contained { get => _contained; set { _contained = value; OnPropertyChangedByClr(nameof(Contained), value); } }

        private FhirDateTime? _dateAsserted;
        [JsonPropertyName("dateAsserted")]
        public FhirDateTime? DateAsserted { get => _dateAsserted; set { _dateAsserted = value; OnPropertyChangedByClr(nameof(DateAsserted), value); } }

        private List<ReferenceType>? _derivedFrom;
        [JsonPropertyName("derivedFrom")]
        public List<ReferenceType>? DerivedFrom { get => _derivedFrom; set { _derivedFrom = value; OnPropertyChangedByClr(nameof(DerivedFrom), value); } }

        private List<Dosage>? _dosage;
        [JsonPropertyName("dosage")]
        public List<Dosage>? Dosage { get => _dosage; set { _dosage = value; OnPropertyChangedByClr(nameof(Dosage), value); } }

        private FhirDateTime? _effectiveDateTime;
        [JsonPropertyName("effectiveDateTime")]
        public FhirDateTime? EffectiveDateTime { get => _effectiveDateTime; set { _effectiveDateTime = value; if (value != null) {{ _effectivePeriod = null; OnPropertyChangedByClr(nameof(EffectivePeriod), null); _effectiveTiming = null; OnPropertyChangedByClr(nameof(EffectiveTiming), null); }}; OnPropertyChangedByClr(nameof(EffectiveDateTime), value); } }

        private Period? _effectivePeriod;
        [JsonPropertyName("effectivePeriod")]
        public Period? EffectivePeriod { get => _effectivePeriod; set { _effectivePeriod = value; if (value != null) {{ _effectiveDateTime = null; OnPropertyChangedByClr(nameof(EffectiveDateTime), null); _effectiveTiming = null; OnPropertyChangedByClr(nameof(EffectiveTiming), null); }}; OnPropertyChangedByClr(nameof(EffectivePeriod), value); } }

        private Timing? _effectiveTiming;
        [JsonPropertyName("effectiveTiming")]
        public Timing? EffectiveTiming { get => _effectiveTiming; set { _effectiveTiming = value; if (value != null) {{ _effectiveDateTime = null; OnPropertyChangedByClr(nameof(EffectiveDateTime), null); _effectivePeriod = null; OnPropertyChangedByClr(nameof(EffectivePeriod), null); }}; OnPropertyChangedByClr(nameof(EffectiveTiming), value); } }

        private ReferenceType? _encounter;
        [JsonPropertyName("encounter")]
        public ReferenceType? Encounter { get => _encounter; set { _encounter = value; OnPropertyChangedByClr(nameof(Encounter), value); } }

        private List<Identifier>? _identifier;
        [JsonPropertyName("identifier")]
        public List<Identifier>? Identifier { get => _identifier; set { _identifier = value; OnPropertyChangedByClr(nameof(Identifier), value); } }

        private List<ReferenceType>? _informationSource;
        [JsonPropertyName("informationSource")]
        public List<ReferenceType>? InformationSource { get => _informationSource; set { _informationSource = value; OnPropertyChangedByClr(nameof(InformationSource), value); } }

        private CodeableReference? _medication;
        [JsonPropertyName("medication")]
        public CodeableReference Medication { get => _medication ?? throw new InvalidOperationException("Medication is required"); set { _medication = value; OnPropertyChangedByClr(nameof(Medication), value); } }

        private List<Annotation>? _note;
        [JsonPropertyName("note")]
        public List<Annotation>? Note { get => _note; set { _note = value; OnPropertyChangedByClr(nameof(Note), value); } }

        private List<ReferenceType>? _partOf;
        [JsonPropertyName("partOf")]
        public List<ReferenceType>? PartOf { get => _partOf; set { _partOf = value; OnPropertyChangedByClr(nameof(PartOf), value); } }

        private List<CodeableReference>? _reason;
        [JsonPropertyName("reason")]
        public List<CodeableReference>? Reason { get => _reason; set { _reason = value; OnPropertyChangedByClr(nameof(Reason), value); } }

        private List<ReferenceType>? _relatedClinicalInformation;
        [JsonPropertyName("relatedClinicalInformation")]
        public List<ReferenceType>? RelatedClinicalInformation { get => _relatedClinicalInformation; set { _relatedClinicalInformation = value; OnPropertyChangedByClr(nameof(RelatedClinicalInformation), value); } }

        private FhirMarkdown? _renderedDosageInstruction;
        [JsonPropertyName("renderedDosageInstruction")]
        public FhirMarkdown? RenderedDosageInstruction { get => _renderedDosageInstruction; set { _renderedDosageInstruction = value; OnPropertyChangedByClr(nameof(RenderedDosageInstruction), value); } }

        private FhirCode? _status;
        [JsonPropertyName("status")]
        public FhirCode Status { get => _status ?? throw new InvalidOperationException("Status is required"); set { _status = value; OnPropertyChangedByClr(nameof(Status), value); } }

        private ReferenceType? _subject;
        [JsonPropertyName("subject")]
        public ReferenceType Subject { get => _subject ?? throw new InvalidOperationException("Subject is required"); set { _subject = value; OnPropertyChangedByClr(nameof(Subject), value); } }

        private Narrative? _text;
        [JsonPropertyName("text")]
        public Narrative? Text { get => _text; set { _text = value; OnPropertyChangedByClr(nameof(Text), value); } }

    }
}
