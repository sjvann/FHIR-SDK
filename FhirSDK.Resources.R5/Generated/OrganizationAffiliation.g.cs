// <auto-generated>
#nullable enable
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
using System.Text.Json.Nodes;
using System.Text.Json.Serialization;
using System.Linq;
using FhirCore.Base;
using DataTypeServices.TypeFramework;
using DataTypeServices.DataTypes.MetaTypes;
namespace FhirSDK.Resources.R5
{
    /// <summary>
    /// Defines an affiliation/association/relationship between 2 distinct organizations, that is not a part-of relationship/sub-division relationship
    /// </summary>
    public partial class OrganizationAffiliation : ResourceBase
    {
        public override string ResourceType => "OrganizationAffiliation";

        public OrganizationAffiliation() { }
        public OrganizationAffiliation(string json) { SetRawFrom(JsonNode.Parse(json)); }
        public OrganizationAffiliation(JsonNode? source) { SetRawFrom(source); }
        protected override void OnPropertyChanged(string propertyName, object? newValue) { base.OnPropertyChanged(propertyName, newValue); }

        private FhirBoolean? _active;
        [JsonPropertyName("active")]
        public FhirBoolean? Active { get => _active; set { _active = value; OnPropertyChangedByClr(nameof(Active), value); } }

        private List<CodeableConcept>? _code;
        [JsonPropertyName("code")]
        public List<CodeableConcept>? Code { get => _code; set { _code = value; OnPropertyChangedByClr(nameof(Code), value); } }

        private List<ExtendedContactDetail>? _contact;
        [JsonPropertyName("contact")]
        public List<ExtendedContactDetail>? Contact { get => _contact; set { _contact = value; OnPropertyChangedByClr(nameof(Contact), value); } }

        private List<Resource>? _contained;
        [JsonPropertyName("contained")]
        public List<Resource>? Contained { get => _contained; set { _contained = value; OnPropertyChangedByClr(nameof(Contained), value); } }

        private List<ReferenceType>? _endpoint;
        [JsonPropertyName("endpoint")]
        public List<ReferenceType>? Endpoint { get => _endpoint; set { _endpoint = value; OnPropertyChangedByClr(nameof(Endpoint), value); } }

        private List<ReferenceType>? _healthcareService;
        [JsonPropertyName("healthcareService")]
        public List<ReferenceType>? HealthcareService { get => _healthcareService; set { _healthcareService = value; OnPropertyChangedByClr(nameof(HealthcareService), value); } }

        private List<Identifier>? _identifier;
        [JsonPropertyName("identifier")]
        public List<Identifier>? Identifier { get => _identifier; set { _identifier = value; OnPropertyChangedByClr(nameof(Identifier), value); } }

        private List<ReferenceType>? _location;
        [JsonPropertyName("location")]
        public List<ReferenceType>? Location { get => _location; set { _location = value; OnPropertyChangedByClr(nameof(Location), value); } }

        private List<ReferenceType>? _network;
        [JsonPropertyName("network")]
        public List<ReferenceType>? Network { get => _network; set { _network = value; OnPropertyChangedByClr(nameof(Network), value); } }

        private ReferenceType? _organization;
        [JsonPropertyName("organization")]
        public ReferenceType? Organization { get => _organization; set { _organization = value; OnPropertyChangedByClr(nameof(Organization), value); } }

        private ReferenceType? _participatingOrganization;
        [JsonPropertyName("participatingOrganization")]
        public ReferenceType? ParticipatingOrganization { get => _participatingOrganization; set { _participatingOrganization = value; OnPropertyChangedByClr(nameof(ParticipatingOrganization), value); } }

        private Period? _period;
        [JsonPropertyName("period")]
        public Period? Period { get => _period; set { _period = value; OnPropertyChangedByClr(nameof(Period), value); } }

        private List<CodeableConcept>? _specialty;
        [JsonPropertyName("specialty")]
        public List<CodeableConcept>? Specialty { get => _specialty; set { _specialty = value; OnPropertyChangedByClr(nameof(Specialty), value); } }

        private Narrative? _text;
        [JsonPropertyName("text")]
        public Narrative? Text { get => _text; set { _text = value; OnPropertyChangedByClr(nameof(Text), value); } }

    }
}
