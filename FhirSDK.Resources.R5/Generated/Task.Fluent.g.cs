// <auto-generated>
#nullable enable
using System.Collections.Generic;
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
namespace FhirSDK.Resources.R5
{
    public static class TaskFluentExtensions
    {
        public static Task WithAuthoredOn(this Task r, FhirDateTime value) { r.AuthoredOn = value; return r; }
        public static Task AddBasedOn(this Task r, ReferenceType item) { r.BasedOn ??= new List<ReferenceType>(); r.BasedOn!.Add(item); return r; }
        public static Task WithBusinessStatus(this Task r, CodeableConcept value) { r.BusinessStatus = value; return r; }
        public static Task WithCode(this Task r, CodeableConcept value) { r.Code = value; return r; }
        public static Task AddContained(this Task r, Resource item) { r.Contained ??= new List<Resource>(); r.Contained!.Add(item); return r; }
        public static Task WithDescription(this Task r, FhirString value) { r.Description = value; return r; }
        public static Task WithDoNotPerform(this Task r, FhirBoolean value) { r.DoNotPerform = value; return r; }
        public static Task WithEncounter(this Task r, ReferenceType value) { r.Encounter = value; return r; }
        public static Task WithExecutionPeriod(this Task r, Period value) { r.ExecutionPeriod = value; return r; }
        public static Task WithFocus(this Task r, ReferenceType value) { r.Focus = value; return r; }
        public static Task WithFor(this Task r, ReferenceType value) { r.For = value; return r; }
        public static Task WithGroupIdentifier(this Task r, Identifier value) { r.GroupIdentifier = value; return r; }
        public static Task AddIdentifier(this Task r, Identifier item) { r.Identifier ??= new List<Identifier>(); r.Identifier!.Add(item); return r; }
        public static Task AddInput(this Task r, BackboneElement item) { r.Input ??= new List<BackboneElement>(); r.Input!.Add(item); return r; }
        public static Task WithInstantiatesCanonical(this Task r, FhirCanonical value) { r.InstantiatesCanonical = value; return r; }
        public static Task WithInstantiatesUri(this Task r, FhirUri value) { r.InstantiatesUri = value; return r; }
        public static Task AddInsurance(this Task r, ReferenceType item) { r.Insurance ??= new List<ReferenceType>(); r.Insurance!.Add(item); return r; }
        public static Task WithIntent(this Task r, FhirCode value) { r.Intent = value; return r; }
        public static Task WithLastModified(this Task r, FhirDateTime value) { r.LastModified = value; return r; }
        public static Task WithLocation(this Task r, ReferenceType value) { r.Location = value; return r; }
        public static Task AddNote(this Task r, Annotation item) { r.Note ??= new List<Annotation>(); r.Note!.Add(item); return r; }
        public static Task AddOutput(this Task r, BackboneElement item) { r.Output ??= new List<BackboneElement>(); r.Output!.Add(item); return r; }
        public static Task WithOwner(this Task r, ReferenceType value) { r.Owner = value; return r; }
        public static Task AddPartOf(this Task r, ReferenceType item) { r.PartOf ??= new List<ReferenceType>(); r.PartOf!.Add(item); return r; }
        public static Task AddPerformer(this Task r, BackboneElement item) { r.Performer ??= new List<BackboneElement>(); r.Performer!.Add(item); return r; }
        public static Task WithPriority(this Task r, FhirCode value) { r.Priority = value; return r; }
        public static Task AddReason(this Task r, CodeableReference item) { r.Reason ??= new List<CodeableReference>(); r.Reason!.Add(item); return r; }
        public static Task AddRelevantHistory(this Task r, ReferenceType item) { r.RelevantHistory ??= new List<ReferenceType>(); r.RelevantHistory!.Add(item); return r; }
        public static Task AddRequestedPerformer(this Task r, CodeableReference item) { r.RequestedPerformer ??= new List<CodeableReference>(); r.RequestedPerformer!.Add(item); return r; }
        public static Task WithRequestedPeriod(this Task r, Period value) { r.RequestedPeriod = value; return r; }
        public static Task WithRequester(this Task r, ReferenceType value) { r.Requester = value; return r; }
        public static Task WithRestriction(this Task r, BackboneElement value) { r.Restriction = value; return r; }
        public static Task WithStatus(this Task r, FhirCode value) { r.Status = value; return r; }
        public static Task WithStatusReason(this Task r, CodeableReference value) { r.StatusReason = value; return r; }
        public static Task WithText(this Task r, Narrative value) { r.Text = value; return r; }
    }
}
