// <auto-generated>
#nullable enable
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
using System.Text.Json.Nodes;
using System.Text.Json.Serialization;
using System.Linq;
using FhirCore.Base;
using DataTypeServices.TypeFramework;
using DataTypeServices.DataTypes.MetaTypes;
namespace FhirSDK.Resources.R5
{
    /// <summary>
    /// Status information about a Subscription provided during event notification
    /// </summary>
    public partial class SubscriptionStatus : ResourceBase
    {
        public override string ResourceType => "SubscriptionStatus";

        public SubscriptionStatus() { }
        public SubscriptionStatus(string json) { SetRawFrom(JsonNode.Parse(json)); }
        public SubscriptionStatus(JsonNode? source) { SetRawFrom(source); }
        protected override void OnPropertyChanged(string propertyName, object? newValue) { base.OnPropertyChanged(propertyName, newValue); }

        private List<Resource>? _contained;
        [JsonPropertyName("contained")]
        public List<Resource>? Contained { get => _contained; set { _contained = value; OnPropertyChangedByClr(nameof(Contained), value); } }

        private List<CodeableConcept>? _error;
        [JsonPropertyName("error")]
        public List<CodeableConcept>? Error { get => _error; set { _error = value; OnPropertyChangedByClr(nameof(Error), value); } }

        private FhirInteger64? _eventsSinceSubscriptionStart;
        [JsonPropertyName("eventsSinceSubscriptionStart")]
        public FhirInteger64? EventsSinceSubscriptionStart { get => _eventsSinceSubscriptionStart; set { _eventsSinceSubscriptionStart = value; OnPropertyChangedByClr(nameof(EventsSinceSubscriptionStart), value); } }

        private List<SubscriptionStatus_NotificationEvent>? _notificationEvent;
        [JsonPropertyName("notificationEvent")]
        public List<SubscriptionStatus_NotificationEvent>? NotificationEvent { get => _notificationEvent; set { _notificationEvent = value; OnPropertyChangedByClr(nameof(NotificationEvent), value); } }

        /// <summary>
        /// Detailed information about any events relevant to this notification
        /// </summary>
        public partial class SubscriptionStatus_NotificationEvent : BackboneElement<SubscriptionStatus_NotificationEvent>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "SubscriptionStatus_NotificationEvent" : "subscriptionStatus_NotificationEvent";
            private List<ReferenceType>? _additionalContext;
        [JsonPropertyName("additionalContext")]
        public List<ReferenceType>? AdditionalContext { get => _additionalContext; set { _additionalContext = value; } }

            private FhirInteger64? _eventNumber;
        [JsonPropertyName("eventNumber")]
        public FhirInteger64 EventNumber { get => _eventNumber ?? throw new InvalidOperationException("EventNumber is required"); set { _eventNumber = value; } }

            private ReferenceType? _focus;
        [JsonPropertyName("focus")]
        public ReferenceType? Focus { get => _focus; set { _focus = value; } }

            private FhirInstant? _timestamp;
        [JsonPropertyName("timestamp")]
        public FhirInstant? Timestamp { get => _timestamp; set { _timestamp = value; } }

        }

        private FhirCode? _status;
        [JsonPropertyName("status")]
        public FhirCode? Status { get => _status; set { _status = value; OnPropertyChangedByClr(nameof(Status), value); } }

        private ReferenceType? _subscription;
        [JsonPropertyName("subscription")]
        public ReferenceType Subscription { get => _subscription ?? throw new InvalidOperationException("Subscription is required"); set { _subscription = value; OnPropertyChangedByClr(nameof(Subscription), value); } }

        private Narrative? _text;
        [JsonPropertyName("text")]
        public Narrative? Text { get => _text; set { _text = value; OnPropertyChangedByClr(nameof(Text), value); } }

        private FhirCanonical? _topic;
        [JsonPropertyName("topic")]
        public FhirCanonical? Topic { get => _topic; set { _topic = value; OnPropertyChangedByClr(nameof(Topic), value); } }

        private FhirCode? _type;
        [JsonPropertyName("type")]
        public FhirCode Type { get => _type ?? throw new InvalidOperationException("Type is required"); set { _type = value; OnPropertyChangedByClr(nameof(Type), value); } }

    }
}
