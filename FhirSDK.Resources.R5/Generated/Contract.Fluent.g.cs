// <auto-generated>
#nullable enable
using System.Collections.Generic;
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
namespace FhirSDK.Resources.R5
{
    public static class ContractFluentExtensions
    {
        public static Contract AddAlias(this Contract r, FhirString item) { r.Alias ??= new List<FhirString>(); r.Alias!.Add(item); return r; }
        public static Contract WithApplies(this Contract r, Period value) { r.Applies = value; return r; }
        public static Contract WithAuthor(this Contract r, ReferenceType value) { r.Author = value; return r; }
        public static Contract AddAuthority(this Contract r, ReferenceType item) { r.Authority ??= new List<ReferenceType>(); r.Authority!.Add(item); return r; }
        public static Contract AddContained(this Contract r, Resource item) { r.Contained ??= new List<Resource>(); r.Contained!.Add(item); return r; }
        public static Contract WithContentDefinition(this Contract r, BackboneElement value) { r.ContentDefinition = value; return r; }
        public static Contract WithContentDerivative(this Contract r, CodeableConcept value) { r.ContentDerivative = value; return r; }
        public static Contract AddDomain(this Contract r, ReferenceType item) { r.Domain ??= new List<ReferenceType>(); r.Domain!.Add(item); return r; }
        public static Contract WithExpirationType(this Contract r, CodeableConcept value) { r.ExpirationType = value; return r; }
        public static Contract AddFriendly(this Contract r, BackboneElement item) { r.Friendly ??= new List<BackboneElement>(); r.Friendly!.Add(item); return r; }
        public static Contract AddIdentifier(this Contract r, Identifier item) { r.Identifier ??= new List<Identifier>(); r.Identifier!.Add(item); return r; }
        public static Contract WithInstantiatesCanonical(this Contract r, ReferenceType value) { r.InstantiatesCanonical = value; return r; }
        public static Contract WithInstantiatesUri(this Contract r, FhirUri value) { r.InstantiatesUri = value; return r; }
        public static Contract WithIssued(this Contract r, FhirDateTime value) { r.Issued = value; return r; }
        public static Contract AddLegal(this Contract r, BackboneElement item) { r.Legal ??= new List<BackboneElement>(); r.Legal!.Add(item); return r; }
        public static Contract WithLegallyBindingAttachment(this Contract r, Attachment value) { r.LegallyBindingAttachment = value; return r; }
        public static Contract WithLegallyBindingReference(this Contract r, ReferenceType value) { r.LegallyBindingReference = value; return r; }
        public static Contract WithLegalState(this Contract r, CodeableConcept value) { r.LegalState = value; return r; }
        public static Contract WithName(this Contract r, FhirString value) { r.Name = value; return r; }
        public static Contract AddRelevantHistory(this Contract r, ReferenceType item) { r.RelevantHistory ??= new List<ReferenceType>(); r.RelevantHistory!.Add(item); return r; }
        public static Contract AddRule(this Contract r, BackboneElement item) { r.Rule ??= new List<BackboneElement>(); r.Rule!.Add(item); return r; }
        public static Contract WithScope(this Contract r, CodeableConcept value) { r.Scope = value; return r; }
        public static Contract AddSigner(this Contract r, BackboneElement item) { r.Signer ??= new List<BackboneElement>(); r.Signer!.Add(item); return r; }
        public static Contract AddSite(this Contract r, ReferenceType item) { r.Site ??= new List<ReferenceType>(); r.Site!.Add(item); return r; }
        public static Contract WithStatus(this Contract r, FhirCode value) { r.Status = value; return r; }
        public static Contract AddSubject(this Contract r, ReferenceType item) { r.Subject ??= new List<ReferenceType>(); r.Subject!.Add(item); return r; }
        public static Contract WithSubtitle(this Contract r, FhirString value) { r.Subtitle = value; return r; }
        public static Contract AddSubType(this Contract r, CodeableConcept item) { r.SubType ??= new List<CodeableConcept>(); r.SubType!.Add(item); return r; }
        public static Contract AddSupportingInfo(this Contract r, ReferenceType item) { r.SupportingInfo ??= new List<ReferenceType>(); r.SupportingInfo!.Add(item); return r; }
        public static Contract AddTerm(this Contract r, BackboneElement item) { r.Term ??= new List<BackboneElement>(); r.Term!.Add(item); return r; }
        public static Contract WithText(this Contract r, Narrative value) { r.Text = value; return r; }
        public static Contract WithTitle(this Contract r, FhirString value) { r.Title = value; return r; }
        public static Contract WithTopicCodeableConcept(this Contract r, CodeableConcept value) { r.TopicCodeableConcept = value; return r; }
        public static Contract WithTopicReference(this Contract r, ReferenceType value) { r.TopicReference = value; return r; }
        public static Contract WithType(this Contract r, CodeableConcept value) { r.Type = value; return r; }
        public static Contract WithUrl(this Contract r, FhirUri value) { r.Url = value; return r; }
        public static Contract WithVersion(this Contract r, FhirString value) { r.Version = value; return r; }
    }
}
