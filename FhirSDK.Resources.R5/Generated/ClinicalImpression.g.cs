// <auto-generated>
#nullable enable
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
using System.Text.Json.Nodes;
using System.Text.Json.Serialization;
using System.Linq;
using FhirCore.Base;
using DataTypeServices.TypeFramework;
using DataTypeServices.DataTypes.MetaTypes;
namespace FhirSDK.Resources.R5
{
    /// <summary>
    /// A clinical assessment performed when planning treatments and management strategies for a patient
    /// </summary>
    public partial class ClinicalImpression : ResourceBase
    {
        public override string ResourceType => "ClinicalImpression";

        public ClinicalImpression() { }
        public ClinicalImpression(string json) { SetRawFrom(JsonNode.Parse(json)); }
        public ClinicalImpression(JsonNode? source) { SetRawFrom(source); }
        protected override void OnPropertyChanged(string propertyName, object? newValue) { base.OnPropertyChanged(propertyName, newValue); }

        private CodeableConcept? _changePattern;
        [JsonPropertyName("changePattern")]
        public CodeableConcept? ChangePattern { get => _changePattern; set { _changePattern = value; OnPropertyChangedByClr(nameof(ChangePattern), value); } }

        private List<Resource>? _contained;
        [JsonPropertyName("contained")]
        public List<Resource>? Contained { get => _contained; set { _contained = value; OnPropertyChangedByClr(nameof(Contained), value); } }

        private FhirDateTime? _date;
        [JsonPropertyName("date")]
        public FhirDateTime? Date { get => _date; set { _date = value; OnPropertyChangedByClr(nameof(Date), value); } }

        private FhirString? _description;
        [JsonPropertyName("description")]
        public FhirString? Description { get => _description; set { _description = value; OnPropertyChangedByClr(nameof(Description), value); } }

        private FhirDateTime? _effectiveDateTime;
        [JsonPropertyName("effectiveDateTime")]
        public FhirDateTime? EffectiveDateTime { get => _effectiveDateTime; set { _effectiveDateTime = value; if (value != null) {{ _effectivePeriod = null; OnPropertyChangedByClr(nameof(EffectivePeriod), null); }}; OnPropertyChangedByClr(nameof(EffectiveDateTime), value); } }

        private Period? _effectivePeriod;
        [JsonPropertyName("effectivePeriod")]
        public Period? EffectivePeriod { get => _effectivePeriod; set { _effectivePeriod = value; if (value != null) {{ _effectiveDateTime = null; OnPropertyChangedByClr(nameof(EffectiveDateTime), null); }}; OnPropertyChangedByClr(nameof(EffectivePeriod), value); } }

        private ReferenceType? _encounter;
        [JsonPropertyName("encounter")]
        public ReferenceType? Encounter { get => _encounter; set { _encounter = value; OnPropertyChangedByClr(nameof(Encounter), value); } }

        private List<ClinicalImpression_Finding>? _finding;
        [JsonPropertyName("finding")]
        public List<ClinicalImpression_Finding>? Finding { get => _finding; set { _finding = value; OnPropertyChangedByClr(nameof(Finding), value); } }

        /// <summary>
        /// Possible or likely findings and diagnoses
        /// </summary>
        public partial class ClinicalImpression_Finding : BackboneElement<ClinicalImpression_Finding>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "ClinicalImpression_Finding" : "clinicalImpression_Finding";
            private FhirString? _basis;
        [JsonPropertyName("basis")]
        public FhirString? Basis { get => _basis; set { _basis = value; } }

            private CodeableReference? _item;
        [JsonPropertyName("item")]
        public CodeableReference? Item { get => _item; set { _item = value; } }

        }

        private List<Identifier>? _identifier;
        [JsonPropertyName("identifier")]
        public List<Identifier>? Identifier { get => _identifier; set { _identifier = value; OnPropertyChangedByClr(nameof(Identifier), value); } }

        private List<Annotation>? _note;
        [JsonPropertyName("note")]
        public List<Annotation>? Note { get => _note; set { _note = value; OnPropertyChangedByClr(nameof(Note), value); } }

        private ReferenceType? _performer;
        [JsonPropertyName("performer")]
        public ReferenceType? Performer { get => _performer; set { _performer = value; OnPropertyChangedByClr(nameof(Performer), value); } }

        private ReferenceType? _previous;
        [JsonPropertyName("previous")]
        public ReferenceType? Previous { get => _previous; set { _previous = value; OnPropertyChangedByClr(nameof(Previous), value); } }

        private List<ReferenceType>? _problem;
        [JsonPropertyName("problem")]
        public List<ReferenceType>? Problem { get => _problem; set { _problem = value; OnPropertyChangedByClr(nameof(Problem), value); } }

        private List<CodeableConcept>? _prognosisCodeableConcept;
        [JsonPropertyName("prognosisCodeableConcept")]
        public List<CodeableConcept>? PrognosisCodeableConcept { get => _prognosisCodeableConcept; set { _prognosisCodeableConcept = value; OnPropertyChangedByClr(nameof(PrognosisCodeableConcept), value); } }

        private List<ReferenceType>? _prognosisReference;
        [JsonPropertyName("prognosisReference")]
        public List<ReferenceType>? PrognosisReference { get => _prognosisReference; set { _prognosisReference = value; OnPropertyChangedByClr(nameof(PrognosisReference), value); } }

        private List<FhirUri>? _protocol;
        [JsonPropertyName("protocol")]
        public List<FhirUri>? Protocol { get => _protocol; set { _protocol = value; OnPropertyChangedByClr(nameof(Protocol), value); } }

        private FhirCode? _status;
        [JsonPropertyName("status")]
        public FhirCode Status { get => _status ?? throw new InvalidOperationException("Status is required"); set { _status = value; OnPropertyChangedByClr(nameof(Status), value); } }

        private CodeableConcept? _statusReason;
        [JsonPropertyName("statusReason")]
        public CodeableConcept? StatusReason { get => _statusReason; set { _statusReason = value; OnPropertyChangedByClr(nameof(StatusReason), value); } }

        private ReferenceType? _subject;
        [JsonPropertyName("subject")]
        public ReferenceType Subject { get => _subject ?? throw new InvalidOperationException("Subject is required"); set { _subject = value; OnPropertyChangedByClr(nameof(Subject), value); } }

        private FhirString? _summary;
        [JsonPropertyName("summary")]
        public FhirString? Summary { get => _summary; set { _summary = value; OnPropertyChangedByClr(nameof(Summary), value); } }

        private List<ReferenceType>? _supportingInfo;
        [JsonPropertyName("supportingInfo")]
        public List<ReferenceType>? SupportingInfo { get => _supportingInfo; set { _supportingInfo = value; OnPropertyChangedByClr(nameof(SupportingInfo), value); } }

        private Narrative? _text;
        [JsonPropertyName("text")]
        public Narrative? Text { get => _text; set { _text = value; OnPropertyChangedByClr(nameof(Text), value); } }

    }
}
