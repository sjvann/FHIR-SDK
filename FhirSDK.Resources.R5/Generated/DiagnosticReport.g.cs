// <auto-generated>
#nullable enable
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
using System.Text.Json.Nodes;
using System.Text.Json.Serialization;
using System.Linq;
using FhirCore.Base;
using DataTypeServices.TypeFramework;
using DataTypeServices.DataTypes.MetaTypes;
namespace FhirSDK.Resources.R5
{
    /// <summary>
    /// A Diagnostic report - a combination of request information, atomic results, images, interpretation, as well as formatted reports
    /// </summary>
    public partial class DiagnosticReport : ResourceBase
    {
        public override string ResourceType => "DiagnosticReport";

        public DiagnosticReport() { }
        public DiagnosticReport(string json) { SetRawFrom(JsonNode.Parse(json)); }
        public DiagnosticReport(JsonNode? source) { SetRawFrom(source); }
        protected override void OnPropertyChanged(string propertyName, object? newValue) { base.OnPropertyChanged(propertyName, newValue); }

        private List<ReferenceType>? _basedOn;
        [JsonPropertyName("basedOn")]
        public List<ReferenceType>? BasedOn { get => _basedOn; set { _basedOn = value; OnPropertyChangedByClr(nameof(BasedOn), value); } }

        private List<CodeableConcept>? _category;
        [JsonPropertyName("category")]
        public List<CodeableConcept>? Category { get => _category; set { _category = value; OnPropertyChangedByClr(nameof(Category), value); } }

        private CodeableConcept? _code;
        [JsonPropertyName("code")]
        public CodeableConcept Code { get => _code ?? throw new InvalidOperationException("Code is required"); set { _code = value; OnPropertyChangedByClr(nameof(Code), value); } }

        private ReferenceType? _composition;
        [JsonPropertyName("composition")]
        public ReferenceType? Composition { get => _composition; set { _composition = value; OnPropertyChangedByClr(nameof(Composition), value); } }

        private FhirMarkdown? _conclusion;
        [JsonPropertyName("conclusion")]
        public FhirMarkdown? Conclusion { get => _conclusion; set { _conclusion = value; OnPropertyChangedByClr(nameof(Conclusion), value); } }

        private List<CodeableConcept>? _conclusionCode;
        [JsonPropertyName("conclusionCode")]
        public List<CodeableConcept>? ConclusionCode { get => _conclusionCode; set { _conclusionCode = value; OnPropertyChangedByClr(nameof(ConclusionCode), value); } }

        private List<Resource>? _contained;
        [JsonPropertyName("contained")]
        public List<Resource>? Contained { get => _contained; set { _contained = value; OnPropertyChangedByClr(nameof(Contained), value); } }

        private FhirDateTime? _effectiveDateTime;
        [JsonPropertyName("effectiveDateTime")]
        public FhirDateTime? EffectiveDateTime { get => _effectiveDateTime; set { _effectiveDateTime = value; if (value != null) {{ _effectivePeriod = null; OnPropertyChangedByClr(nameof(EffectivePeriod), null); }}; OnPropertyChangedByClr(nameof(EffectiveDateTime), value); } }

        private Period? _effectivePeriod;
        [JsonPropertyName("effectivePeriod")]
        public Period? EffectivePeriod { get => _effectivePeriod; set { _effectivePeriod = value; if (value != null) {{ _effectiveDateTime = null; OnPropertyChangedByClr(nameof(EffectiveDateTime), null); }}; OnPropertyChangedByClr(nameof(EffectivePeriod), value); } }

        private ReferenceType? _encounter;
        [JsonPropertyName("encounter")]
        public ReferenceType? Encounter { get => _encounter; set { _encounter = value; OnPropertyChangedByClr(nameof(Encounter), value); } }

        private List<Identifier>? _identifier;
        [JsonPropertyName("identifier")]
        public List<Identifier>? Identifier { get => _identifier; set { _identifier = value; OnPropertyChangedByClr(nameof(Identifier), value); } }

        private FhirInstant? _issued;
        [JsonPropertyName("issued")]
        public FhirInstant? Issued { get => _issued; set { _issued = value; OnPropertyChangedByClr(nameof(Issued), value); } }

        private List<DiagnosticReport_Media>? _media;
        [JsonPropertyName("media")]
        public List<DiagnosticReport_Media>? Media { get => _media; set { _media = value; OnPropertyChangedByClr(nameof(Media), value); } }

        /// <summary>
        /// Key images or data associated with this report
        /// </summary>
        public partial class DiagnosticReport_Media : BackboneElement<DiagnosticReport_Media>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "DiagnosticReport_Media" : "diagnosticReport_Media";
            private FhirString? _comment;
        [JsonPropertyName("comment")]
        public FhirString? Comment { get => _comment; set { _comment = value; } }

            private ReferenceType? _link;
        [JsonPropertyName("link")]
        public ReferenceType Link { get => _link ?? throw new InvalidOperationException("Link is required"); set { _link = value; } }

        }

        private List<Annotation>? _note;
        [JsonPropertyName("note")]
        public List<Annotation>? Note { get => _note; set { _note = value; OnPropertyChangedByClr(nameof(Note), value); } }

        private List<ReferenceType>? _performer;
        [JsonPropertyName("performer")]
        public List<ReferenceType>? Performer { get => _performer; set { _performer = value; OnPropertyChangedByClr(nameof(Performer), value); } }

        private List<Attachment>? _presentedForm;
        [JsonPropertyName("presentedForm")]
        public List<Attachment>? PresentedForm { get => _presentedForm; set { _presentedForm = value; OnPropertyChangedByClr(nameof(PresentedForm), value); } }

        private List<ReferenceType>? _result;
        [JsonPropertyName("result")]
        public List<ReferenceType>? Result { get => _result; set { _result = value; OnPropertyChangedByClr(nameof(Result), value); } }

        private List<ReferenceType>? _resultsInterpreter;
        [JsonPropertyName("resultsInterpreter")]
        public List<ReferenceType>? ResultsInterpreter { get => _resultsInterpreter; set { _resultsInterpreter = value; OnPropertyChangedByClr(nameof(ResultsInterpreter), value); } }

        private List<ReferenceType>? _specimen;
        [JsonPropertyName("specimen")]
        public List<ReferenceType>? Specimen { get => _specimen; set { _specimen = value; OnPropertyChangedByClr(nameof(Specimen), value); } }

        private FhirCode? _status;
        [JsonPropertyName("status")]
        public FhirCode Status { get => _status ?? throw new InvalidOperationException("Status is required"); set { _status = value; OnPropertyChangedByClr(nameof(Status), value); } }

        private List<ReferenceType>? _study;
        [JsonPropertyName("study")]
        public List<ReferenceType>? Study { get => _study; set { _study = value; OnPropertyChangedByClr(nameof(Study), value); } }

        private ReferenceType? _subject;
        [JsonPropertyName("subject")]
        public ReferenceType? Subject { get => _subject; set { _subject = value; OnPropertyChangedByClr(nameof(Subject), value); } }

        private List<DiagnosticReport_SupportingInfo>? _supportingInfo;
        [JsonPropertyName("supportingInfo")]
        public List<DiagnosticReport_SupportingInfo>? SupportingInfo { get => _supportingInfo; set { _supportingInfo = value; OnPropertyChangedByClr(nameof(SupportingInfo), value); } }

        /// <summary>
        /// Additional information supporting the diagnostic report
        /// </summary>
        public partial class DiagnosticReport_SupportingInfo : BackboneElement<DiagnosticReport_SupportingInfo>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "DiagnosticReport_SupportingInfo" : "diagnosticReport_SupportingInfo";
            private ReferenceType? _reference;
        [JsonPropertyName("reference")]
        public ReferenceType Reference { get => _reference ?? throw new InvalidOperationException("Reference is required"); set { _reference = value; } }

            private CodeableConcept? _type;
        [JsonPropertyName("type")]
        public CodeableConcept Type { get => _type ?? throw new InvalidOperationException("Type is required"); set { _type = value; } }

        }

        private Narrative? _text;
        [JsonPropertyName("text")]
        public Narrative? Text { get => _text; set { _text = value; OnPropertyChangedByClr(nameof(Text), value); } }

    }
}
