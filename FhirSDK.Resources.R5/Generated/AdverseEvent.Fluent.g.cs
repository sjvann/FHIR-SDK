// <auto-generated>
#nullable enable
using System.Collections.Generic;
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
namespace FhirSDK.Resources.R5
{
    public static class AdverseEventFluentExtensions
    {
        public static AdverseEvent WithActuality(this AdverseEvent r, FhirCode value) { r.Actuality = value; return r; }
        public static AdverseEvent AddCategory(this AdverseEvent r, CodeableConcept item) { r.Category ??= new List<CodeableConcept>(); r.Category!.Add(item); return r; }
        public static AdverseEvent WithCode(this AdverseEvent r, CodeableConcept value) { r.Code = value; return r; }
        public static AdverseEvent AddContained(this AdverseEvent r, Resource item) { r.Contained ??= new List<Resource>(); r.Contained!.Add(item); return r; }
        public static AdverseEvent AddContributingFactor(this AdverseEvent r, BackboneElement item) { r.ContributingFactor ??= new List<BackboneElement>(); r.ContributingFactor!.Add(item); return r; }
        public static AdverseEvent WithDetected(this AdverseEvent r, FhirDateTime value) { r.Detected = value; return r; }
        public static AdverseEvent WithEncounter(this AdverseEvent r, ReferenceType value) { r.Encounter = value; return r; }
        public static AdverseEvent WithExpectedInResearchStudy(this AdverseEvent r, FhirBoolean value) { r.ExpectedInResearchStudy = value; return r; }
        public static AdverseEvent AddIdentifier(this AdverseEvent r, Identifier item) { r.Identifier ??= new List<Identifier>(); r.Identifier!.Add(item); return r; }
        public static AdverseEvent WithLocation(this AdverseEvent r, ReferenceType value) { r.Location = value; return r; }
        public static AdverseEvent AddMitigatingAction(this AdverseEvent r, BackboneElement item) { r.MitigatingAction ??= new List<BackboneElement>(); r.MitigatingAction!.Add(item); return r; }
        public static AdverseEvent AddNote(this AdverseEvent r, Annotation item) { r.Note ??= new List<Annotation>(); r.Note!.Add(item); return r; }
        public static AdverseEvent WithOccurrenceDateTime(this AdverseEvent r, FhirDateTime value) { r.OccurrenceDateTime = value; return r; }
        public static AdverseEvent WithOccurrencePeriod(this AdverseEvent r, Period value) { r.OccurrencePeriod = value; return r; }
        public static AdverseEvent WithOccurrenceTiming(this AdverseEvent r, Timing value) { r.OccurrenceTiming = value; return r; }
        public static AdverseEvent AddOutcome(this AdverseEvent r, CodeableConcept item) { r.Outcome ??= new List<CodeableConcept>(); r.Outcome!.Add(item); return r; }
        public static AdverseEvent AddParticipant(this AdverseEvent r, BackboneElement item) { r.Participant ??= new List<BackboneElement>(); r.Participant!.Add(item); return r; }
        public static AdverseEvent AddPreventiveAction(this AdverseEvent r, BackboneElement item) { r.PreventiveAction ??= new List<BackboneElement>(); r.PreventiveAction!.Add(item); return r; }
        public static AdverseEvent WithRecordedDate(this AdverseEvent r, FhirDateTime value) { r.RecordedDate = value; return r; }
        public static AdverseEvent WithRecorder(this AdverseEvent r, ReferenceType value) { r.Recorder = value; return r; }
        public static AdverseEvent AddResultingEffect(this AdverseEvent r, ReferenceType item) { r.ResultingEffect ??= new List<ReferenceType>(); r.ResultingEffect!.Add(item); return r; }
        public static AdverseEvent WithSeriousness(this AdverseEvent r, CodeableConcept value) { r.Seriousness = value; return r; }
        public static AdverseEvent WithStatus(this AdverseEvent r, FhirCode value) { r.Status = value; return r; }
        public static AdverseEvent AddStudy(this AdverseEvent r, ReferenceType item) { r.Study ??= new List<ReferenceType>(); r.Study!.Add(item); return r; }
        public static AdverseEvent WithSubject(this AdverseEvent r, ReferenceType value) { r.Subject = value; return r; }
        public static AdverseEvent AddSupportingInfo(this AdverseEvent r, BackboneElement item) { r.SupportingInfo ??= new List<BackboneElement>(); r.SupportingInfo!.Add(item); return r; }
        public static AdverseEvent AddSuspectEntity(this AdverseEvent r, BackboneElement item) { r.SuspectEntity ??= new List<BackboneElement>(); r.SuspectEntity!.Add(item); return r; }
        public static AdverseEvent WithText(this AdverseEvent r, Narrative value) { r.Text = value; return r; }
    }
}
