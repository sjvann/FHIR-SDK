// <auto-generated>
#nullable enable
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
using System.Text.Json.Nodes;
using System.Text.Json.Serialization;
using System.Linq;
using FhirCore.Base;
using DataTypeServices.TypeFramework;
using DataTypeServices.DataTypes.MetaTypes;
namespace FhirSDK.Resources.R5
{
    /// <summary>
    /// Immunization evaluation information
    /// </summary>
    public partial class ImmunizationEvaluation : ResourceBase
    {
        public override string ResourceType => "ImmunizationEvaluation";

        public ImmunizationEvaluation() { }
        public ImmunizationEvaluation(string json) { SetRawFrom(JsonNode.Parse(json)); }
        public ImmunizationEvaluation(JsonNode? source) { SetRawFrom(source); }
        protected override void OnPropertyChanged(string propertyName, object? newValue) { base.OnPropertyChanged(propertyName, newValue); }

        private ReferenceType? _authority;
        [JsonPropertyName("authority")]
        public ReferenceType? Authority { get => _authority; set { _authority = value; OnPropertyChangedByClr(nameof(Authority), value); } }

        private List<Resource>? _contained;
        [JsonPropertyName("contained")]
        public List<Resource>? Contained { get => _contained; set { _contained = value; OnPropertyChangedByClr(nameof(Contained), value); } }

        private FhirDateTime? _date;
        [JsonPropertyName("date")]
        public FhirDateTime? Date { get => _date; set { _date = value; OnPropertyChangedByClr(nameof(Date), value); } }

        private FhirMarkdown? _description;
        [JsonPropertyName("description")]
        public FhirMarkdown? Description { get => _description; set { _description = value; OnPropertyChangedByClr(nameof(Description), value); } }

        private FhirString? _doseNumber;
        [JsonPropertyName("doseNumber")]
        public FhirString? DoseNumber { get => _doseNumber; set { _doseNumber = value; OnPropertyChangedByClr(nameof(DoseNumber), value); } }

        private CodeableConcept? _doseStatus;
        [JsonPropertyName("doseStatus")]
        public CodeableConcept DoseStatus { get => _doseStatus ?? throw new InvalidOperationException("DoseStatus is required"); set { _doseStatus = value; OnPropertyChangedByClr(nameof(DoseStatus), value); } }

        private List<CodeableConcept>? _doseStatusReason;
        [JsonPropertyName("doseStatusReason")]
        public List<CodeableConcept>? DoseStatusReason { get => _doseStatusReason; set { _doseStatusReason = value; OnPropertyChangedByClr(nameof(DoseStatusReason), value); } }

        private List<Identifier>? _identifier;
        [JsonPropertyName("identifier")]
        public List<Identifier>? Identifier { get => _identifier; set { _identifier = value; OnPropertyChangedByClr(nameof(Identifier), value); } }

        private ReferenceType? _immunizationEvent;
        [JsonPropertyName("immunizationEvent")]
        public ReferenceType ImmunizationEvent { get => _immunizationEvent ?? throw new InvalidOperationException("ImmunizationEvent is required"); set { _immunizationEvent = value; OnPropertyChangedByClr(nameof(ImmunizationEvent), value); } }

        private ReferenceType? _patient;
        [JsonPropertyName("patient")]
        public ReferenceType Patient { get => _patient ?? throw new InvalidOperationException("Patient is required"); set { _patient = value; OnPropertyChangedByClr(nameof(Patient), value); } }

        private FhirString? _series;
        [JsonPropertyName("series")]
        public FhirString? Series { get => _series; set { _series = value; OnPropertyChangedByClr(nameof(Series), value); } }

        private FhirString? _seriesDoses;
        [JsonPropertyName("seriesDoses")]
        public FhirString? SeriesDoses { get => _seriesDoses; set { _seriesDoses = value; OnPropertyChangedByClr(nameof(SeriesDoses), value); } }

        private FhirCode? _status;
        [JsonPropertyName("status")]
        public FhirCode Status { get => _status ?? throw new InvalidOperationException("Status is required"); set { _status = value; OnPropertyChangedByClr(nameof(Status), value); } }

        private CodeableConcept? _targetDisease;
        [JsonPropertyName("targetDisease")]
        public CodeableConcept TargetDisease { get => _targetDisease ?? throw new InvalidOperationException("TargetDisease is required"); set { _targetDisease = value; OnPropertyChangedByClr(nameof(TargetDisease), value); } }

        private Narrative? _text;
        [JsonPropertyName("text")]
        public Narrative? Text { get => _text; set { _text = value; OnPropertyChangedByClr(nameof(Text), value); } }

    }
}
