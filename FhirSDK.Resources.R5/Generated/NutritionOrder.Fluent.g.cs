// <auto-generated>
#nullable enable
using System.Collections.Generic;
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
namespace FhirSDK.Resources.R5
{
    public static class NutritionOrderFluentExtensions
    {
        public static NutritionOrder AddAllergyIntolerance(this NutritionOrder r, ReferenceType item) { r.AllergyIntolerance ??= new List<ReferenceType>(); r.AllergyIntolerance!.Add(item); return r; }
        public static NutritionOrder AddBasedOn(this NutritionOrder r, ReferenceType item) { r.BasedOn ??= new List<ReferenceType>(); r.BasedOn!.Add(item); return r; }
        public static NutritionOrder AddContained(this NutritionOrder r, Resource item) { r.Contained ??= new List<Resource>(); r.Contained!.Add(item); return r; }
        public static NutritionOrder WithDateTime(this NutritionOrder r, FhirDateTime value) { r.DateTime = value; return r; }
        public static NutritionOrder WithEncounter(this NutritionOrder r, ReferenceType value) { r.Encounter = value; return r; }
        public static NutritionOrder WithEnteralFormula(this NutritionOrder r, BackboneElement value) { r.EnteralFormula = value; return r; }
        public static NutritionOrder AddExcludeFoodModifier(this NutritionOrder r, CodeableConcept item) { r.ExcludeFoodModifier ??= new List<CodeableConcept>(); r.ExcludeFoodModifier!.Add(item); return r; }
        public static NutritionOrder AddFoodPreferenceModifier(this NutritionOrder r, CodeableConcept item) { r.FoodPreferenceModifier ??= new List<CodeableConcept>(); r.FoodPreferenceModifier!.Add(item); return r; }
        public static NutritionOrder WithGroupIdentifier(this NutritionOrder r, Identifier value) { r.GroupIdentifier = value; return r; }
        public static NutritionOrder AddIdentifier(this NutritionOrder r, Identifier item) { r.Identifier ??= new List<Identifier>(); r.Identifier!.Add(item); return r; }
        public static NutritionOrder AddInstantiates(this NutritionOrder r, FhirUri item) { r.Instantiates ??= new List<FhirUri>(); r.Instantiates!.Add(item); return r; }
        public static NutritionOrder AddInstantiatesCanonical(this NutritionOrder r, FhirCanonical item) { r.InstantiatesCanonical ??= new List<FhirCanonical>(); r.InstantiatesCanonical!.Add(item); return r; }
        public static NutritionOrder AddInstantiatesUri(this NutritionOrder r, FhirUri item) { r.InstantiatesUri ??= new List<FhirUri>(); r.InstantiatesUri!.Add(item); return r; }
        public static NutritionOrder WithIntent(this NutritionOrder r, FhirCode value) { r.Intent = value; return r; }
        public static NutritionOrder AddNote(this NutritionOrder r, Annotation item) { r.Note ??= new List<Annotation>(); r.Note!.Add(item); return r; }
        public static NutritionOrder WithOralDiet(this NutritionOrder r, BackboneElement value) { r.OralDiet = value; return r; }
        public static NutritionOrder WithOrderer(this NutritionOrder r, ReferenceType value) { r.Orderer = value; return r; }
        public static NutritionOrder WithOutsideFoodAllowed(this NutritionOrder r, FhirBoolean value) { r.OutsideFoodAllowed = value; return r; }
        public static NutritionOrder AddPerformer(this NutritionOrder r, CodeableReference item) { r.Performer ??= new List<CodeableReference>(); r.Performer!.Add(item); return r; }
        public static NutritionOrder WithPriority(this NutritionOrder r, FhirCode value) { r.Priority = value; return r; }
        public static NutritionOrder WithStatus(this NutritionOrder r, FhirCode value) { r.Status = value; return r; }
        public static NutritionOrder WithSubject(this NutritionOrder r, ReferenceType value) { r.Subject = value; return r; }
        public static NutritionOrder AddSupplement(this NutritionOrder r, BackboneElement item) { r.Supplement ??= new List<BackboneElement>(); r.Supplement!.Add(item); return r; }
        public static NutritionOrder AddSupportingInformation(this NutritionOrder r, ReferenceType item) { r.SupportingInformation ??= new List<ReferenceType>(); r.SupportingInformation!.Add(item); return r; }
        public static NutritionOrder WithText(this NutritionOrder r, Narrative value) { r.Text = value; return r; }
    }
}
