// <auto-generated>
#nullable enable
using System.Collections.Generic;
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
namespace FhirSDK.Resources.R5
{
    public static class BiologicallyDerivedProductDispenseFluentExtensions
    {
        public static BiologicallyDerivedProductDispense AddBasedOn(this BiologicallyDerivedProductDispense r, ReferenceType item) { r.BasedOn ??= new List<ReferenceType>(); r.BasedOn!.Add(item); return r; }
        public static BiologicallyDerivedProductDispense AddContained(this BiologicallyDerivedProductDispense r, Resource item) { r.Contained ??= new List<Resource>(); r.Contained!.Add(item); return r; }
        public static BiologicallyDerivedProductDispense WithDestination(this BiologicallyDerivedProductDispense r, ReferenceType value) { r.Destination = value; return r; }
        public static BiologicallyDerivedProductDispense AddIdentifier(this BiologicallyDerivedProductDispense r, Identifier item) { r.Identifier ??= new List<Identifier>(); r.Identifier!.Add(item); return r; }
        public static BiologicallyDerivedProductDispense WithLocation(this BiologicallyDerivedProductDispense r, ReferenceType value) { r.Location = value; return r; }
        public static BiologicallyDerivedProductDispense WithMatchStatus(this BiologicallyDerivedProductDispense r, CodeableConcept value) { r.MatchStatus = value; return r; }
        public static BiologicallyDerivedProductDispense AddNote(this BiologicallyDerivedProductDispense r, Annotation item) { r.Note ??= new List<Annotation>(); r.Note!.Add(item); return r; }
        public static BiologicallyDerivedProductDispense WithOriginRelationshipType(this BiologicallyDerivedProductDispense r, CodeableConcept value) { r.OriginRelationshipType = value; return r; }
        public static BiologicallyDerivedProductDispense AddPartOf(this BiologicallyDerivedProductDispense r, ReferenceType item) { r.PartOf ??= new List<ReferenceType>(); r.PartOf!.Add(item); return r; }
        public static BiologicallyDerivedProductDispense WithPatient(this BiologicallyDerivedProductDispense r, ReferenceType value) { r.Patient = value; return r; }
        public static BiologicallyDerivedProductDispense AddPerformer(this BiologicallyDerivedProductDispense r, BackboneElement item) { r.Performer ??= new List<BackboneElement>(); r.Performer!.Add(item); return r; }
        public static BiologicallyDerivedProductDispense WithPreparedDate(this BiologicallyDerivedProductDispense r, FhirDateTime value) { r.PreparedDate = value; return r; }
        public static BiologicallyDerivedProductDispense WithProduct(this BiologicallyDerivedProductDispense r, ReferenceType value) { r.Product = value; return r; }
        public static BiologicallyDerivedProductDispense WithQuantity(this BiologicallyDerivedProductDispense r, Quantity value) { r.Quantity = value; return r; }
        public static BiologicallyDerivedProductDispense WithStatus(this BiologicallyDerivedProductDispense r, FhirCode value) { r.Status = value; return r; }
        public static BiologicallyDerivedProductDispense WithText(this BiologicallyDerivedProductDispense r, Narrative value) { r.Text = value; return r; }
        public static BiologicallyDerivedProductDispense WithUsageInstruction(this BiologicallyDerivedProductDispense r, FhirString value) { r.UsageInstruction = value; return r; }
        public static BiologicallyDerivedProductDispense WithWhenHandedOver(this BiologicallyDerivedProductDispense r, FhirDateTime value) { r.WhenHandedOver = value; return r; }
    }
}
