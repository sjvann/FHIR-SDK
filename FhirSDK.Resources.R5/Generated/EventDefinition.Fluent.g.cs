// <auto-generated>
#nullable enable
using System.Collections.Generic;
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
namespace FhirSDK.Resources.R5
{
    public static class EventDefinitionFluentExtensions
    {
        public static EventDefinition WithApprovalDate(this EventDefinition r, FhirDate value) { r.ApprovalDate = value; return r; }
        public static EventDefinition AddAuthor(this EventDefinition r, ContactDetail item) { r.Author ??= new List<ContactDetail>(); r.Author!.Add(item); return r; }
        public static EventDefinition AddContact(this EventDefinition r, ContactDetail item) { r.Contact ??= new List<ContactDetail>(); r.Contact!.Add(item); return r; }
        public static EventDefinition AddContained(this EventDefinition r, Resource item) { r.Contained ??= new List<Resource>(); r.Contained!.Add(item); return r; }
        public static EventDefinition WithCopyright(this EventDefinition r, FhirMarkdown value) { r.Copyright = value; return r; }
        public static EventDefinition WithCopyrightLabel(this EventDefinition r, FhirString value) { r.CopyrightLabel = value; return r; }
        public static EventDefinition WithDate(this EventDefinition r, FhirDateTime value) { r.Date = value; return r; }
        public static EventDefinition WithDescription(this EventDefinition r, FhirMarkdown value) { r.Description = value; return r; }
        public static EventDefinition AddEditor(this EventDefinition r, ContactDetail item) { r.Editor ??= new List<ContactDetail>(); r.Editor!.Add(item); return r; }
        public static EventDefinition WithEffectivePeriod(this EventDefinition r, Period value) { r.EffectivePeriod = value; return r; }
        public static EventDefinition AddEndorser(this EventDefinition r, ContactDetail item) { r.Endorser ??= new List<ContactDetail>(); r.Endorser!.Add(item); return r; }
        public static EventDefinition WithExperimental(this EventDefinition r, FhirBoolean value) { r.Experimental = value; return r; }
        public static EventDefinition AddIdentifier(this EventDefinition r, Identifier item) { r.Identifier ??= new List<Identifier>(); r.Identifier!.Add(item); return r; }
        public static EventDefinition AddJurisdiction(this EventDefinition r, CodeableConcept item) { r.Jurisdiction ??= new List<CodeableConcept>(); r.Jurisdiction!.Add(item); return r; }
        public static EventDefinition WithLastReviewDate(this EventDefinition r, FhirDate value) { r.LastReviewDate = value; return r; }
        public static EventDefinition WithName(this EventDefinition r, FhirString value) { r.Name = value; return r; }
        public static EventDefinition WithPublisher(this EventDefinition r, FhirString value) { r.Publisher = value; return r; }
        public static EventDefinition WithPurpose(this EventDefinition r, FhirMarkdown value) { r.Purpose = value; return r; }
        public static EventDefinition AddRelatedArtifact(this EventDefinition r, RelatedArtifact item) { r.RelatedArtifact ??= new List<RelatedArtifact>(); r.RelatedArtifact!.Add(item); return r; }
        public static EventDefinition AddReviewer(this EventDefinition r, ContactDetail item) { r.Reviewer ??= new List<ContactDetail>(); r.Reviewer!.Add(item); return r; }
        public static EventDefinition WithStatus(this EventDefinition r, FhirCode value) { r.Status = value; return r; }
        public static EventDefinition WithSubjectCodeableConcept(this EventDefinition r, CodeableConcept value) { r.SubjectCodeableConcept = value; return r; }
        public static EventDefinition WithSubjectReference(this EventDefinition r, ReferenceType value) { r.SubjectReference = value; return r; }
        public static EventDefinition WithSubtitle(this EventDefinition r, FhirString value) { r.Subtitle = value; return r; }
        public static EventDefinition WithText(this EventDefinition r, Narrative value) { r.Text = value; return r; }
        public static EventDefinition WithTitle(this EventDefinition r, FhirString value) { r.Title = value; return r; }
        public static EventDefinition AddTopic(this EventDefinition r, CodeableConcept item) { r.Topic ??= new List<CodeableConcept>(); r.Topic!.Add(item); return r; }
        public static EventDefinition AddTrigger(this EventDefinition r, TriggerDefinition item) { r.Trigger ??= new List<TriggerDefinition>(); r.Trigger!.Add(item); return r; }
        public static EventDefinition WithUrl(this EventDefinition r, FhirUri value) { r.Url = value; return r; }
        public static EventDefinition WithUsage(this EventDefinition r, FhirMarkdown value) { r.Usage = value; return r; }
        public static EventDefinition AddUseContext(this EventDefinition r, UsageContext item) { r.UseContext ??= new List<UsageContext>(); r.UseContext!.Add(item); return r; }
        public static EventDefinition WithVersion(this EventDefinition r, FhirString value) { r.Version = value; return r; }
        public static EventDefinition WithVersionAlgorithmString(this EventDefinition r, FhirString value) { r.VersionAlgorithmString = value; return r; }
        public static EventDefinition WithVersionAlgorithmCoding(this EventDefinition r, Coding value) { r.VersionAlgorithmCoding = value; return r; }
    }
}
