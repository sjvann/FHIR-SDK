// <auto-generated>
#nullable enable
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
using System.Text.Json.Nodes;
using System.Text.Json.Serialization;
using System.Linq;
using FhirCore.Base;
using DataTypeServices.TypeFramework;
using DataTypeServices.DataTypes.MetaTypes;
namespace FhirSDK.Resources.R5
{
    /// <summary>
    /// A product used for nutritional purposes (i.e. food or supplement)
    /// </summary>
    public partial class NutritionProduct : ResourceBase
    {
        public override string ResourceType => "NutritionProduct";

        public NutritionProduct() { }
        public NutritionProduct(string json) { SetRawFrom(JsonNode.Parse(json)); }
        public NutritionProduct(JsonNode? source) { SetRawFrom(source); }
        protected override void OnPropertyChanged(string propertyName, object? newValue) { base.OnPropertyChanged(propertyName, newValue); }

        private List<CodeableConcept>? _category;
        [JsonPropertyName("category")]
        public List<CodeableConcept>? Category { get => _category; set { _category = value; OnPropertyChangedByClr(nameof(Category), value); } }

        private List<NutritionProduct_Characteristic>? _characteristic;
        [JsonPropertyName("characteristic")]
        public List<NutritionProduct_Characteristic>? Characteristic { get => _characteristic; set { _characteristic = value; OnPropertyChangedByClr(nameof(Characteristic), value); } }

        /// <summary>
        /// Specifies descriptive properties of the nutrition product
        /// </summary>
        public partial class NutritionProduct_Characteristic : BackboneElement<NutritionProduct_Characteristic>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "NutritionProduct_Characteristic" : "nutritionProduct_Characteristic";
            private CodeableConcept? _type;
        [JsonPropertyName("type")]
        public CodeableConcept Type { get => _type ?? throw new InvalidOperationException("Type is required"); set { _type = value; } }

            private CodeableConcept? _valueCodeableConcept;
        [JsonPropertyName("valueCodeableConcept")]
        public CodeableConcept? ValueCodeableConcept { get => _valueCodeableConcept; set { _valueCodeableConcept = value; if (value != null) {{ _valueString = null; OnPropertyChanged("valueString", null); _valueQuantity = null; OnPropertyChanged("valueQuantity", null); _valuebase64Binary = null; OnPropertyChanged("valuebase64Binary", null); _valueAttachment = null; OnPropertyChanged("valueAttachment", null); _valueBoolean = null; OnPropertyChanged("valueBoolean", null); }}; OnPropertyChanged("valueCodeableConcept", value); } }

            private FhirString? _valueString;
        [JsonPropertyName("valueString")]
        public FhirString? ValueString { get => _valueString; set { _valueString = value; if (value != null) {{ _valueCodeableConcept = null; OnPropertyChanged("valueCodeableConcept", null); _valueQuantity = null; OnPropertyChanged("valueQuantity", null); _valuebase64Binary = null; OnPropertyChanged("valuebase64Binary", null); _valueAttachment = null; OnPropertyChanged("valueAttachment", null); _valueBoolean = null; OnPropertyChanged("valueBoolean", null); }}; OnPropertyChanged("valueString", value); } }

            private Quantity? _valueQuantity;
        [JsonPropertyName("valueQuantity")]
        public Quantity? ValueQuantity { get => _valueQuantity; set { _valueQuantity = value; if (value != null) {{ _valueCodeableConcept = null; OnPropertyChanged("valueCodeableConcept", null); _valueString = null; OnPropertyChanged("valueString", null); _valuebase64Binary = null; OnPropertyChanged("valuebase64Binary", null); _valueAttachment = null; OnPropertyChanged("valueAttachment", null); _valueBoolean = null; OnPropertyChanged("valueBoolean", null); }}; OnPropertyChanged("valueQuantity", value); } }

            private FhirBase64Binary? _valuebase64Binary;
        [JsonPropertyName("valuebase64Binary")]
        public FhirBase64Binary? Valuebase64Binary { get => _valuebase64Binary; set { _valuebase64Binary = value; if (value != null) {{ _valueCodeableConcept = null; OnPropertyChanged("valueCodeableConcept", null); _valueString = null; OnPropertyChanged("valueString", null); _valueQuantity = null; OnPropertyChanged("valueQuantity", null); _valueAttachment = null; OnPropertyChanged("valueAttachment", null); _valueBoolean = null; OnPropertyChanged("valueBoolean", null); }}; OnPropertyChanged("valuebase64Binary", value); } }

            private Attachment? _valueAttachment;
        [JsonPropertyName("valueAttachment")]
        public Attachment? ValueAttachment { get => _valueAttachment; set { _valueAttachment = value; if (value != null) {{ _valueCodeableConcept = null; OnPropertyChanged("valueCodeableConcept", null); _valueString = null; OnPropertyChanged("valueString", null); _valueQuantity = null; OnPropertyChanged("valueQuantity", null); _valuebase64Binary = null; OnPropertyChanged("valuebase64Binary", null); _valueBoolean = null; OnPropertyChanged("valueBoolean", null); }}; OnPropertyChanged("valueAttachment", value); } }

            private FhirBoolean? _valueBoolean;
        [JsonPropertyName("valueBoolean")]
        public FhirBoolean? ValueBoolean { get => _valueBoolean; set { _valueBoolean = value; if (value != null) {{ _valueCodeableConcept = null; OnPropertyChanged("valueCodeableConcept", null); _valueString = null; OnPropertyChanged("valueString", null); _valueQuantity = null; OnPropertyChanged("valueQuantity", null); _valuebase64Binary = null; OnPropertyChanged("valuebase64Binary", null); _valueAttachment = null; OnPropertyChanged("valueAttachment", null); }}; OnPropertyChanged("valueBoolean", value); } }

        }

        private CodeableConcept? _code;
        [JsonPropertyName("code")]
        public CodeableConcept? Code { get => _code; set { _code = value; OnPropertyChangedByClr(nameof(Code), value); } }

        private List<Resource>? _contained;
        [JsonPropertyName("contained")]
        public List<Resource>? Contained { get => _contained; set { _contained = value; OnPropertyChangedByClr(nameof(Contained), value); } }

        private List<NutritionProduct_Ingredient>? _ingredient;
        [JsonPropertyName("ingredient")]
        public List<NutritionProduct_Ingredient>? Ingredient { get => _ingredient; set { _ingredient = value; OnPropertyChangedByClr(nameof(Ingredient), value); } }

        /// <summary>
        /// Ingredients contained in this product
        /// </summary>
        public partial class NutritionProduct_Ingredient : BackboneElement<NutritionProduct_Ingredient>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "NutritionProduct_Ingredient" : "nutritionProduct_Ingredient";
            private List<Ratio>? _amount;
        [JsonPropertyName("amount")]
        public List<Ratio>? Amount { get => _amount; set { _amount = value; } }

            private CodeableReference? _item;
        [JsonPropertyName("item")]
        public CodeableReference Item { get => _item ?? throw new InvalidOperationException("Item is required"); set { _item = value; } }

        }

        private List<NutritionProduct_Instance>? _instance;
        [JsonPropertyName("instance")]
        public List<NutritionProduct_Instance>? Instance { get => _instance; set { _instance = value; OnPropertyChangedByClr(nameof(Instance), value); } }

        /// <summary>
        /// One or several physical instances or occurrences of the nutrition product
        /// </summary>
        public partial class NutritionProduct_Instance : BackboneElement<NutritionProduct_Instance>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "NutritionProduct_Instance" : "nutritionProduct_Instance";
            private Identifier? _biologicalSourceEvent;
        [JsonPropertyName("biologicalSourceEvent")]
        public Identifier? BiologicalSourceEvent { get => _biologicalSourceEvent; set { _biologicalSourceEvent = value; } }

            private FhirDateTime? _expiry;
        [JsonPropertyName("expiry")]
        public FhirDateTime? Expiry { get => _expiry; set { _expiry = value; } }

            private List<Identifier>? _identifier;
        [JsonPropertyName("identifier")]
        public List<Identifier>? Identifier { get => _identifier; set { _identifier = value; } }

            private FhirString? _lotNumber;
        [JsonPropertyName("lotNumber")]
        public FhirString? LotNumber { get => _lotNumber; set { _lotNumber = value; } }

            private FhirString? _name;
        [JsonPropertyName("name")]
        public FhirString? Name { get => _name; set { _name = value; } }

            private Quantity? _quantity;
        [JsonPropertyName("quantity")]
        public Quantity? Quantity { get => _quantity; set { _quantity = value; } }

            private FhirDateTime? _useBy;
        [JsonPropertyName("useBy")]
        public FhirDateTime? UseBy { get => _useBy; set { _useBy = value; } }

        }

        private List<CodeableReference>? _knownAllergen;
        [JsonPropertyName("knownAllergen")]
        public List<CodeableReference>? KnownAllergen { get => _knownAllergen; set { _knownAllergen = value; OnPropertyChangedByClr(nameof(KnownAllergen), value); } }

        private List<ReferenceType>? _manufacturer;
        [JsonPropertyName("manufacturer")]
        public List<ReferenceType>? Manufacturer { get => _manufacturer; set { _manufacturer = value; OnPropertyChangedByClr(nameof(Manufacturer), value); } }

        private List<Annotation>? _note;
        [JsonPropertyName("note")]
        public List<Annotation>? Note { get => _note; set { _note = value; OnPropertyChangedByClr(nameof(Note), value); } }

        private List<NutritionProduct_Nutrient>? _nutrient;
        [JsonPropertyName("nutrient")]
        public List<NutritionProduct_Nutrient>? Nutrient { get => _nutrient; set { _nutrient = value; OnPropertyChangedByClr(nameof(Nutrient), value); } }

        /// <summary>
        /// The product's nutritional information expressed by the nutrients
        /// </summary>
        public partial class NutritionProduct_Nutrient : BackboneElement<NutritionProduct_Nutrient>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "NutritionProduct_Nutrient" : "nutritionProduct_Nutrient";
            private List<Ratio>? _amount;
        [JsonPropertyName("amount")]
        public List<Ratio>? Amount { get => _amount; set { _amount = value; } }

            private CodeableReference? _item;
        [JsonPropertyName("item")]
        public CodeableReference? Item { get => _item; set { _item = value; } }

        }

        private FhirCode? _status;
        [JsonPropertyName("status")]
        public FhirCode Status { get => _status ?? throw new InvalidOperationException("Status is required"); set { _status = value; OnPropertyChangedByClr(nameof(Status), value); } }

        private Narrative? _text;
        [JsonPropertyName("text")]
        public Narrative? Text { get => _text; set { _text = value; OnPropertyChangedByClr(nameof(Text), value); } }

    }
}
