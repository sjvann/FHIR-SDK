// <auto-generated>
#nullable enable
using System.Collections.Generic;
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
namespace FhirSDK.Resources.R5
{
    public static class ImplementationGuideFluentExtensions
    {
        public static ImplementationGuide AddContact(this ImplementationGuide r, ContactDetail item) { r.Contact ??= new List<ContactDetail>(); r.Contact!.Add(item); return r; }
        public static ImplementationGuide AddContained(this ImplementationGuide r, Resource item) { r.Contained ??= new List<Resource>(); r.Contained!.Add(item); return r; }
        public static ImplementationGuide WithCopyright(this ImplementationGuide r, FhirMarkdown value) { r.Copyright = value; return r; }
        public static ImplementationGuide WithCopyrightLabel(this ImplementationGuide r, FhirString value) { r.CopyrightLabel = value; return r; }
        public static ImplementationGuide WithDate(this ImplementationGuide r, FhirDateTime value) { r.Date = value; return r; }
        public static ImplementationGuide WithDefinition(this ImplementationGuide r, BackboneElement value) { r.Definition = value; return r; }
        public static ImplementationGuide AddDependsOn(this ImplementationGuide r, BackboneElement item) { r.DependsOn ??= new List<BackboneElement>(); r.DependsOn!.Add(item); return r; }
        public static ImplementationGuide WithDescription(this ImplementationGuide r, FhirMarkdown value) { r.Description = value; return r; }
        public static ImplementationGuide WithExperimental(this ImplementationGuide r, FhirBoolean value) { r.Experimental = value; return r; }
        public static ImplementationGuide AddFhirVersion(this ImplementationGuide r, FhirCode item) { r.FhirVersion ??= new List<FhirCode>(); r.FhirVersion!.Add(item); return r; }
        public static ImplementationGuide AddGlobal(this ImplementationGuide r, BackboneElement item) { r.Global ??= new List<BackboneElement>(); r.Global!.Add(item); return r; }
        public static ImplementationGuide AddIdentifier(this ImplementationGuide r, Identifier item) { r.Identifier ??= new List<Identifier>(); r.Identifier!.Add(item); return r; }
        public static ImplementationGuide AddJurisdiction(this ImplementationGuide r, CodeableConcept item) { r.Jurisdiction ??= new List<CodeableConcept>(); r.Jurisdiction!.Add(item); return r; }
        public static ImplementationGuide WithLicense(this ImplementationGuide r, FhirCode value) { r.License = value; return r; }
        public static ImplementationGuide WithManifest(this ImplementationGuide r, BackboneElement value) { r.Manifest = value; return r; }
        public static ImplementationGuide WithName(this ImplementationGuide r, FhirString value) { r.Name = value; return r; }
        public static ImplementationGuide WithPackageId(this ImplementationGuide r, FhirId value) { r.PackageId = value; return r; }
        public static ImplementationGuide WithPublisher(this ImplementationGuide r, FhirString value) { r.Publisher = value; return r; }
        public static ImplementationGuide WithPurpose(this ImplementationGuide r, FhirMarkdown value) { r.Purpose = value; return r; }
        public static ImplementationGuide WithStatus(this ImplementationGuide r, FhirCode value) { r.Status = value; return r; }
        public static ImplementationGuide WithText(this ImplementationGuide r, Narrative value) { r.Text = value; return r; }
        public static ImplementationGuide WithTitle(this ImplementationGuide r, FhirString value) { r.Title = value; return r; }
        public static ImplementationGuide WithUrl(this ImplementationGuide r, FhirUri value) { r.Url = value; return r; }
        public static ImplementationGuide AddUseContext(this ImplementationGuide r, UsageContext item) { r.UseContext ??= new List<UsageContext>(); r.UseContext!.Add(item); return r; }
        public static ImplementationGuide WithVersion(this ImplementationGuide r, FhirString value) { r.Version = value; return r; }
        public static ImplementationGuide WithVersionAlgorithmString(this ImplementationGuide r, FhirString value) { r.VersionAlgorithmString = value; return r; }
        public static ImplementationGuide WithVersionAlgorithmCoding(this ImplementationGuide r, Coding value) { r.VersionAlgorithmCoding = value; return r; }
    }
}
