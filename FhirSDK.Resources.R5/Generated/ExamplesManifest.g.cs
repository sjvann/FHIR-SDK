// <auto-generated>
#nullable enable
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;

namespace FhirSDK.Resources.R5
{
    internal static class ExamplesManifest
    {
        private static readonly Assembly This = typeof(ExamplesManifest).Assembly;
        private const string Prefix = "FhirSDK.Resources.R5.Examples.";

        public static IEnumerable<(string Name, string Json)> List(string resource)
        {
            var prefix = Prefix + resource + ".";
            foreach (var name in This.GetManifestResourceNames().Where(n => n.StartsWith(prefix, StringComparison.OrdinalIgnoreCase) && n.EndsWith(".json", StringComparison.OrdinalIgnoreCase)))
            {
                using var s = This.GetManifestResourceStream(name);
                if (s == null) continue;
                using var sr = new StreamReader(s);
                var json = sr.ReadToEnd();
                var shortName = Path.GetFileNameWithoutExtension(name);
                // name format: FhirSDK.Resources.R5.Examples.Patient.basic.json => extract "basic"
                var idx = name.LastIndexOf('.');
                var idx2 = name.LastIndexOf('.', idx - 1);
                var exampleName = idx2 >= 0 ? name.Substring(idx2 + 1, idx - idx2 - 1) : shortName;
                yield return (exampleName, json);
            }
        }

        public static (string Name, string Json)? Get(string resource, string exampleName)
        {
            var prefix = Prefix + resource + ".";
            var full = prefix + exampleName + ".json";
            var name = This.GetManifestResourceNames().FirstOrDefault(n => string.Equals(n, full, StringComparison.OrdinalIgnoreCase));
            if (name == null) return null;
            using var s = This.GetManifestResourceStream(name);
            if (s == null) return null;
            using var sr = new StreamReader(s);
            return (exampleName, sr.ReadToEnd());
        }
    }
}

