// <auto-generated>
#nullable enable
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
using System.Text.Json.Nodes;
using System.Text.Json.Serialization;
using System.Linq;
using FhirCore.Base;
using DataTypeServices.TypeFramework;
using DataTypeServices.DataTypes.MetaTypes;
namespace FhirSDK.Resources.R5
{
    /// <summary>
    /// Regulatory approval, clearance or licencing related to a regulated product, treatment, facility or activity e.g. Market Authorization for a Medicinal Product
    /// </summary>
    public partial class RegulatedAuthorization : ResourceBase
    {
        public override string ResourceType => "RegulatedAuthorization";

        public RegulatedAuthorization() { }
        public RegulatedAuthorization(string json) { SetRawFrom(JsonNode.Parse(json)); }
        public RegulatedAuthorization(JsonNode? source) { SetRawFrom(source); }
        protected override void OnPropertyChanged(string propertyName, object? newValue) { base.OnPropertyChanged(propertyName, newValue); }

        private List<ReferenceType>? _attachedDocument;
        [JsonPropertyName("attachedDocument")]
        public List<ReferenceType>? AttachedDocument { get => _attachedDocument; set { _attachedDocument = value; OnPropertyChangedByClr(nameof(AttachedDocument), value); } }

        private List<CodeableConcept>? _basis;
        [JsonPropertyName("basis")]
        public List<CodeableConcept>? Basis { get => _basis; set { _basis = value; OnPropertyChangedByClr(nameof(Basis), value); } }

        private RegulatedAuthorization_Case? _case;
        [JsonPropertyName("case")]
        public RegulatedAuthorization_Case? Case { get => _case; set { _case = value; OnPropertyChangedByClr(nameof(Case), value); } }

        /// <summary>
        /// The case or regulatory procedure for granting or amending a regulated authorization. Note: This area is subject to ongoing review and the workgroup is seeking implementer feedback on its use (see link at bottom of page)
        /// </summary>
        public partial class RegulatedAuthorization_Case : BackboneElement<RegulatedAuthorization_Case>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "RegulatedAuthorization_Case" : "regulatedAuthorization_Case";
            private List<FhirString>? _application;
        [JsonPropertyName("application")]
        public List<FhirString>? Application { get => _application; set { _application = value; } }

            private Period? _datePeriod;
        [JsonPropertyName("datePeriod")]
        public Period? DatePeriod { get => _datePeriod; set { _datePeriod = value; if (value != null) {{ _dateDateTime = null; OnPropertyChanged("dateDateTime", null); }}; OnPropertyChanged("datePeriod", value); } }

            private FhirDateTime? _dateDateTime;
        [JsonPropertyName("dateDateTime")]
        public FhirDateTime? DateDateTime { get => _dateDateTime; set { _dateDateTime = value; if (value != null) {{ _datePeriod = null; OnPropertyChanged("datePeriod", null); }}; OnPropertyChanged("dateDateTime", value); } }

            private Identifier? _identifier;
        [JsonPropertyName("identifier")]
        public Identifier? Identifier { get => _identifier; set { _identifier = value; } }

            private CodeableConcept? _status;
        [JsonPropertyName("status")]
        public CodeableConcept? Status { get => _status; set { _status = value; } }

            private CodeableConcept? _type;
        [JsonPropertyName("type")]
        public CodeableConcept? Type { get => _type; set { _type = value; } }

        }

        private List<Resource>? _contained;
        [JsonPropertyName("contained")]
        public List<Resource>? Contained { get => _contained; set { _contained = value; OnPropertyChangedByClr(nameof(Contained), value); } }

        private FhirMarkdown? _description;
        [JsonPropertyName("description")]
        public FhirMarkdown? Description { get => _description; set { _description = value; OnPropertyChangedByClr(nameof(Description), value); } }

        private ReferenceType? _holder;
        [JsonPropertyName("holder")]
        public ReferenceType? Holder { get => _holder; set { _holder = value; OnPropertyChangedByClr(nameof(Holder), value); } }

        private List<Identifier>? _identifier;
        [JsonPropertyName("identifier")]
        public List<Identifier>? Identifier { get => _identifier; set { _identifier = value; OnPropertyChangedByClr(nameof(Identifier), value); } }

        private List<CodeableReference>? _indication;
        [JsonPropertyName("indication")]
        public List<CodeableReference>? Indication { get => _indication; set { _indication = value; OnPropertyChangedByClr(nameof(Indication), value); } }

        private CodeableConcept? _intendedUse;
        [JsonPropertyName("intendedUse")]
        public CodeableConcept? IntendedUse { get => _intendedUse; set { _intendedUse = value; OnPropertyChangedByClr(nameof(IntendedUse), value); } }

        private List<CodeableConcept>? _region;
        [JsonPropertyName("region")]
        public List<CodeableConcept>? Region { get => _region; set { _region = value; OnPropertyChangedByClr(nameof(Region), value); } }

        private ReferenceType? _regulator;
        [JsonPropertyName("regulator")]
        public ReferenceType? Regulator { get => _regulator; set { _regulator = value; OnPropertyChangedByClr(nameof(Regulator), value); } }

        private CodeableConcept? _status;
        [JsonPropertyName("status")]
        public CodeableConcept? Status { get => _status; set { _status = value; OnPropertyChangedByClr(nameof(Status), value); } }

        private FhirDateTime? _statusDate;
        [JsonPropertyName("statusDate")]
        public FhirDateTime? StatusDate { get => _statusDate; set { _statusDate = value; OnPropertyChangedByClr(nameof(StatusDate), value); } }

        private List<ReferenceType>? _subject;
        [JsonPropertyName("subject")]
        public List<ReferenceType>? Subject { get => _subject; set { _subject = value; OnPropertyChangedByClr(nameof(Subject), value); } }

        private Narrative? _text;
        [JsonPropertyName("text")]
        public Narrative? Text { get => _text; set { _text = value; OnPropertyChangedByClr(nameof(Text), value); } }

        private CodeableConcept? _type;
        [JsonPropertyName("type")]
        public CodeableConcept? Type { get => _type; set { _type = value; OnPropertyChangedByClr(nameof(Type), value); } }

        private Period? _validityPeriod;
        [JsonPropertyName("validityPeriod")]
        public Period? ValidityPeriod { get => _validityPeriod; set { _validityPeriod = value; OnPropertyChangedByClr(nameof(ValidityPeriod), value); } }

    }
}
