// <auto-generated>
#nullable enable
using System.Collections.Generic;
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
namespace FhirSDK.Resources.R5
{
    public static class AppointmentFluentExtensions
    {
        public static Appointment AddAccount(this Appointment r, ReferenceType item) { r.Account ??= new List<ReferenceType>(); r.Account!.Add(item); return r; }
        public static Appointment WithAppointmentType(this Appointment r, CodeableConcept value) { r.AppointmentType = value; return r; }
        public static Appointment AddBasedOn(this Appointment r, ReferenceType item) { r.BasedOn ??= new List<ReferenceType>(); r.BasedOn!.Add(item); return r; }
        public static Appointment WithCancellationDate(this Appointment r, FhirDateTime value) { r.CancellationDate = value; return r; }
        public static Appointment WithCancellationReason(this Appointment r, CodeableConcept value) { r.CancellationReason = value; return r; }
        public static Appointment AddClass(this Appointment r, CodeableConcept item) { r.Class ??= new List<CodeableConcept>(); r.Class!.Add(item); return r; }
        public static Appointment AddContained(this Appointment r, Resource item) { r.Contained ??= new List<Resource>(); r.Contained!.Add(item); return r; }
        public static Appointment WithCreated(this Appointment r, FhirDateTime value) { r.Created = value; return r; }
        public static Appointment WithDescription(this Appointment r, FhirString value) { r.Description = value; return r; }
        public static Appointment WithEnd(this Appointment r, FhirInstant value) { r.End = value; return r; }
        public static Appointment AddIdentifier(this Appointment r, Identifier item) { r.Identifier ??= new List<Identifier>(); r.Identifier!.Add(item); return r; }
        public static Appointment WithMinutesDuration(this Appointment r, FhirPositiveInt value) { r.MinutesDuration = value; return r; }
        public static Appointment AddNote(this Appointment r, Annotation item) { r.Note ??= new List<Annotation>(); r.Note!.Add(item); return r; }
        public static Appointment WithOccurrenceChanged(this Appointment r, FhirBoolean value) { r.OccurrenceChanged = value; return r; }
        public static Appointment WithOriginatingAppointment(this Appointment r, ReferenceType value) { r.OriginatingAppointment = value; return r; }
        public static Appointment AddParticipant(this Appointment r, BackboneElement item) { r.Participant ??= new List<BackboneElement>(); r.Participant!.Add(item); return r; }
        public static Appointment AddPatientInstruction(this Appointment r, CodeableReference item) { r.PatientInstruction ??= new List<CodeableReference>(); r.PatientInstruction!.Add(item); return r; }
        public static Appointment WithPreviousAppointment(this Appointment r, ReferenceType value) { r.PreviousAppointment = value; return r; }
        public static Appointment WithPriority(this Appointment r, CodeableConcept value) { r.Priority = value; return r; }
        public static Appointment AddReason(this Appointment r, CodeableReference item) { r.Reason ??= new List<CodeableReference>(); r.Reason!.Add(item); return r; }
        public static Appointment WithRecurrenceId(this Appointment r, FhirPositiveInt value) { r.RecurrenceId = value; return r; }
        public static Appointment AddRecurrenceTemplate(this Appointment r, BackboneElement item) { r.RecurrenceTemplate ??= new List<BackboneElement>(); r.RecurrenceTemplate!.Add(item); return r; }
        public static Appointment AddReplaces(this Appointment r, ReferenceType item) { r.Replaces ??= new List<ReferenceType>(); r.Replaces!.Add(item); return r; }
        public static Appointment AddRequestedPeriod(this Appointment r, Period item) { r.RequestedPeriod ??= new List<Period>(); r.RequestedPeriod!.Add(item); return r; }
        public static Appointment AddServiceCategory(this Appointment r, CodeableConcept item) { r.ServiceCategory ??= new List<CodeableConcept>(); r.ServiceCategory!.Add(item); return r; }
        public static Appointment AddServiceType(this Appointment r, CodeableReference item) { r.ServiceType ??= new List<CodeableReference>(); r.ServiceType!.Add(item); return r; }
        public static Appointment AddSlot(this Appointment r, ReferenceType item) { r.Slot ??= new List<ReferenceType>(); r.Slot!.Add(item); return r; }
        public static Appointment AddSpecialty(this Appointment r, CodeableConcept item) { r.Specialty ??= new List<CodeableConcept>(); r.Specialty!.Add(item); return r; }
        public static Appointment WithStart(this Appointment r, FhirInstant value) { r.Start = value; return r; }
        public static Appointment WithStatus(this Appointment r, FhirCode value) { r.Status = value; return r; }
        public static Appointment WithSubject(this Appointment r, ReferenceType value) { r.Subject = value; return r; }
        public static Appointment AddSupportingInformation(this Appointment r, ReferenceType item) { r.SupportingInformation ??= new List<ReferenceType>(); r.SupportingInformation!.Add(item); return r; }
        public static Appointment WithText(this Appointment r, Narrative value) { r.Text = value; return r; }
        public static Appointment AddVirtualService(this Appointment r, VirtualServiceDetail item) { r.VirtualService ??= new List<VirtualServiceDetail>(); r.VirtualService!.Add(item); return r; }
    }
}
