// <auto-generated>
#nullable enable
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
using System.Text.Json.Nodes;
using System.Text.Json.Serialization;
using System.Linq;
using FhirCore.Base;
using DataTypeServices.TypeFramework;
using DataTypeServices.DataTypes.MetaTypes;
namespace FhirSDK.Resources.R5
{
    /// <summary>
    /// A request for information to be sent to a receiver
    /// </summary>
    public partial class CommunicationRequest : ResourceBase
    {
        public override string ResourceType => "CommunicationRequest";

        public CommunicationRequest() { }
        public CommunicationRequest(string json) { SetRawFrom(JsonNode.Parse(json)); }
        public CommunicationRequest(JsonNode? source) { SetRawFrom(source); }
        protected override void OnPropertyChanged(string propertyName, object? newValue) { base.OnPropertyChanged(propertyName, newValue); }

        private List<ReferenceType>? _about;
        [JsonPropertyName("about")]
        public List<ReferenceType>? About { get => _about; set { _about = value; OnPropertyChangedByClr(nameof(About), value); } }

        private FhirDateTime? _authoredOn;
        [JsonPropertyName("authoredOn")]
        public FhirDateTime? AuthoredOn { get => _authoredOn; set { _authoredOn = value; OnPropertyChangedByClr(nameof(AuthoredOn), value); } }

        private List<ReferenceType>? _basedOn;
        [JsonPropertyName("basedOn")]
        public List<ReferenceType>? BasedOn { get => _basedOn; set { _basedOn = value; OnPropertyChangedByClr(nameof(BasedOn), value); } }

        private List<CodeableConcept>? _category;
        [JsonPropertyName("category")]
        public List<CodeableConcept>? Category { get => _category; set { _category = value; OnPropertyChangedByClr(nameof(Category), value); } }

        private List<Resource>? _contained;
        [JsonPropertyName("contained")]
        public List<Resource>? Contained { get => _contained; set { _contained = value; OnPropertyChangedByClr(nameof(Contained), value); } }

        private FhirBoolean? _doNotPerform;
        [JsonPropertyName("doNotPerform")]
        public FhirBoolean? DoNotPerform { get => _doNotPerform; set { _doNotPerform = value; OnPropertyChangedByClr(nameof(DoNotPerform), value); } }

        private ReferenceType? _encounter;
        [JsonPropertyName("encounter")]
        public ReferenceType? Encounter { get => _encounter; set { _encounter = value; OnPropertyChangedByClr(nameof(Encounter), value); } }

        private Identifier? _groupIdentifier;
        [JsonPropertyName("groupIdentifier")]
        public Identifier? GroupIdentifier { get => _groupIdentifier; set { _groupIdentifier = value; OnPropertyChangedByClr(nameof(GroupIdentifier), value); } }

        private List<Identifier>? _identifier;
        [JsonPropertyName("identifier")]
        public List<Identifier>? Identifier { get => _identifier; set { _identifier = value; OnPropertyChangedByClr(nameof(Identifier), value); } }

        private List<ReferenceType>? _informationProvider;
        [JsonPropertyName("informationProvider")]
        public List<ReferenceType>? InformationProvider { get => _informationProvider; set { _informationProvider = value; OnPropertyChangedByClr(nameof(InformationProvider), value); } }

        private FhirCode? _intent;
        [JsonPropertyName("intent")]
        public FhirCode Intent { get => _intent ?? throw new InvalidOperationException("Intent is required"); set { _intent = value; OnPropertyChangedByClr(nameof(Intent), value); } }

        private List<CodeableConcept>? _medium;
        [JsonPropertyName("medium")]
        public List<CodeableConcept>? Medium { get => _medium; set { _medium = value; OnPropertyChangedByClr(nameof(Medium), value); } }

        private List<Annotation>? _note;
        [JsonPropertyName("note")]
        public List<Annotation>? Note { get => _note; set { _note = value; OnPropertyChangedByClr(nameof(Note), value); } }

        private FhirDateTime? _occurrenceDateTime;
        [JsonPropertyName("occurrenceDateTime")]
        public FhirDateTime? OccurrenceDateTime { get => _occurrenceDateTime; set { _occurrenceDateTime = value; if (value != null) {{ _occurrencePeriod = null; OnPropertyChangedByClr(nameof(OccurrencePeriod), null); }}; OnPropertyChangedByClr(nameof(OccurrenceDateTime), value); } }

        private Period? _occurrencePeriod;
        [JsonPropertyName("occurrencePeriod")]
        public Period? OccurrencePeriod { get => _occurrencePeriod; set { _occurrencePeriod = value; if (value != null) {{ _occurrenceDateTime = null; OnPropertyChangedByClr(nameof(OccurrenceDateTime), null); }}; OnPropertyChangedByClr(nameof(OccurrencePeriod), value); } }

        private List<CommunicationRequest_Payload>? _payload;
        [JsonPropertyName("payload")]
        public List<CommunicationRequest_Payload>? Payload { get => _payload; set { _payload = value; OnPropertyChangedByClr(nameof(Payload), value); } }

        /// <summary>
        /// Message payload
        /// </summary>
        public partial class CommunicationRequest_Payload : BackboneElement<CommunicationRequest_Payload>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "CommunicationRequest_Payload" : "communicationRequest_Payload";
            private Attachment? _contentAttachment;
        [JsonPropertyName("contentAttachment")]
        public Attachment? ContentAttachment { get => _contentAttachment; set { _contentAttachment = value; if (value != null) {{ _contentReference = null; OnPropertyChanged("contentReference", null); _contentCodeableConcept = null; OnPropertyChanged("contentCodeableConcept", null); }}; OnPropertyChanged("contentAttachment", value); } }

            private ReferenceType? _contentReference;
        [JsonPropertyName("contentReference")]
        public ReferenceType? ContentReference { get => _contentReference; set { _contentReference = value; if (value != null) {{ _contentAttachment = null; OnPropertyChanged("contentAttachment", null); _contentCodeableConcept = null; OnPropertyChanged("contentCodeableConcept", null); }}; OnPropertyChanged("contentReference", value); } }

            private CodeableConcept? _contentCodeableConcept;
        [JsonPropertyName("contentCodeableConcept")]
        public CodeableConcept? ContentCodeableConcept { get => _contentCodeableConcept; set { _contentCodeableConcept = value; if (value != null) {{ _contentAttachment = null; OnPropertyChanged("contentAttachment", null); _contentReference = null; OnPropertyChanged("contentReference", null); }}; OnPropertyChanged("contentCodeableConcept", value); } }

        }

        private FhirCode? _priority;
        [JsonPropertyName("priority")]
        public FhirCode? Priority { get => _priority; set { _priority = value; OnPropertyChangedByClr(nameof(Priority), value); } }

        private List<CodeableReference>? _reason;
        [JsonPropertyName("reason")]
        public List<CodeableReference>? Reason { get => _reason; set { _reason = value; OnPropertyChangedByClr(nameof(Reason), value); } }

        private List<ReferenceType>? _recipient;
        [JsonPropertyName("recipient")]
        public List<ReferenceType>? Recipient { get => _recipient; set { _recipient = value; OnPropertyChangedByClr(nameof(Recipient), value); } }

        private List<ReferenceType>? _replaces;
        [JsonPropertyName("replaces")]
        public List<ReferenceType>? Replaces { get => _replaces; set { _replaces = value; OnPropertyChangedByClr(nameof(Replaces), value); } }

        private ReferenceType? _requester;
        [JsonPropertyName("requester")]
        public ReferenceType? Requester { get => _requester; set { _requester = value; OnPropertyChangedByClr(nameof(Requester), value); } }

        private FhirCode? _status;
        [JsonPropertyName("status")]
        public FhirCode Status { get => _status ?? throw new InvalidOperationException("Status is required"); set { _status = value; OnPropertyChangedByClr(nameof(Status), value); } }

        private CodeableConcept? _statusReason;
        [JsonPropertyName("statusReason")]
        public CodeableConcept? StatusReason { get => _statusReason; set { _statusReason = value; OnPropertyChangedByClr(nameof(StatusReason), value); } }

        private ReferenceType? _subject;
        [JsonPropertyName("subject")]
        public ReferenceType? Subject { get => _subject; set { _subject = value; OnPropertyChangedByClr(nameof(Subject), value); } }

        private Narrative? _text;
        [JsonPropertyName("text")]
        public Narrative? Text { get => _text; set { _text = value; OnPropertyChangedByClr(nameof(Text), value); } }

    }
}
