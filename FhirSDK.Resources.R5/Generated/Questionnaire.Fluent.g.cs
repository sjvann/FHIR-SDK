// <auto-generated>
#nullable enable
using System.Collections.Generic;
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
namespace FhirSDK.Resources.R5
{
    public static class QuestionnaireFluentExtensions
    {
        public static Questionnaire WithApprovalDate(this Questionnaire r, FhirDate value) { r.ApprovalDate = value; return r; }
        public static Questionnaire AddCode(this Questionnaire r, Coding item) { r.Code ??= new List<Coding>(); r.Code!.Add(item); return r; }
        public static Questionnaire AddContact(this Questionnaire r, ContactDetail item) { r.Contact ??= new List<ContactDetail>(); r.Contact!.Add(item); return r; }
        public static Questionnaire AddContained(this Questionnaire r, Resource item) { r.Contained ??= new List<Resource>(); r.Contained!.Add(item); return r; }
        public static Questionnaire WithCopyright(this Questionnaire r, FhirMarkdown value) { r.Copyright = value; return r; }
        public static Questionnaire WithCopyrightLabel(this Questionnaire r, FhirString value) { r.CopyrightLabel = value; return r; }
        public static Questionnaire WithDate(this Questionnaire r, FhirDateTime value) { r.Date = value; return r; }
        public static Questionnaire AddDerivedFrom(this Questionnaire r, FhirCanonical item) { r.DerivedFrom ??= new List<FhirCanonical>(); r.DerivedFrom!.Add(item); return r; }
        public static Questionnaire WithDescription(this Questionnaire r, FhirMarkdown value) { r.Description = value; return r; }
        public static Questionnaire WithEffectivePeriod(this Questionnaire r, Period value) { r.EffectivePeriod = value; return r; }
        public static Questionnaire WithExperimental(this Questionnaire r, FhirBoolean value) { r.Experimental = value; return r; }
        public static Questionnaire AddIdentifier(this Questionnaire r, Identifier item) { r.Identifier ??= new List<Identifier>(); r.Identifier!.Add(item); return r; }
        public static Questionnaire AddItem(this Questionnaire r, BackboneElement item) { r.Item ??= new List<BackboneElement>(); r.Item!.Add(item); return r; }
        public static Questionnaire AddJurisdiction(this Questionnaire r, CodeableConcept item) { r.Jurisdiction ??= new List<CodeableConcept>(); r.Jurisdiction!.Add(item); return r; }
        public static Questionnaire WithLastReviewDate(this Questionnaire r, FhirDate value) { r.LastReviewDate = value; return r; }
        public static Questionnaire WithName(this Questionnaire r, FhirString value) { r.Name = value; return r; }
        public static Questionnaire WithPublisher(this Questionnaire r, FhirString value) { r.Publisher = value; return r; }
        public static Questionnaire WithPurpose(this Questionnaire r, FhirMarkdown value) { r.Purpose = value; return r; }
        public static Questionnaire WithStatus(this Questionnaire r, FhirCode value) { r.Status = value; return r; }
        public static Questionnaire AddSubjectType(this Questionnaire r, FhirCode item) { r.SubjectType ??= new List<FhirCode>(); r.SubjectType!.Add(item); return r; }
        public static Questionnaire WithText(this Questionnaire r, Narrative value) { r.Text = value; return r; }
        public static Questionnaire WithTitle(this Questionnaire r, FhirString value) { r.Title = value; return r; }
        public static Questionnaire WithUrl(this Questionnaire r, FhirUri value) { r.Url = value; return r; }
        public static Questionnaire AddUseContext(this Questionnaire r, UsageContext item) { r.UseContext ??= new List<UsageContext>(); r.UseContext!.Add(item); return r; }
        public static Questionnaire WithVersion(this Questionnaire r, FhirString value) { r.Version = value; return r; }
        public static Questionnaire WithVersionAlgorithmString(this Questionnaire r, FhirString value) { r.VersionAlgorithmString = value; return r; }
        public static Questionnaire WithVersionAlgorithmCoding(this Questionnaire r, Coding value) { r.VersionAlgorithmCoding = value; return r; }
    }
}
