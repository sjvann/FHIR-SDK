// <auto-generated>
#nullable enable
using System.Collections.Generic;
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
namespace FhirSDK.Resources.R5
{
    public static class MolecularSequenceFluentExtensions
    {
        public static MolecularSequence AddContained(this MolecularSequence r, Resource item) { r.Contained ??= new List<Resource>(); r.Contained!.Add(item); return r; }
        public static MolecularSequence WithDevice(this MolecularSequence r, ReferenceType value) { r.Device = value; return r; }
        public static MolecularSequence AddFocus(this MolecularSequence r, ReferenceType item) { r.Focus ??= new List<ReferenceType>(); r.Focus!.Add(item); return r; }
        public static MolecularSequence AddFormatted(this MolecularSequence r, Attachment item) { r.Formatted ??= new List<Attachment>(); r.Formatted!.Add(item); return r; }
        public static MolecularSequence AddIdentifier(this MolecularSequence r, Identifier item) { r.Identifier ??= new List<Identifier>(); r.Identifier!.Add(item); return r; }
        public static MolecularSequence WithLiteral(this MolecularSequence r, FhirString value) { r.Literal = value; return r; }
        public static MolecularSequence WithPerformer(this MolecularSequence r, ReferenceType value) { r.Performer = value; return r; }
        public static MolecularSequence AddRelative(this MolecularSequence r, BackboneElement item) { r.Relative ??= new List<BackboneElement>(); r.Relative!.Add(item); return r; }
        public static MolecularSequence WithSpecimen(this MolecularSequence r, ReferenceType value) { r.Specimen = value; return r; }
        public static MolecularSequence WithSubject(this MolecularSequence r, ReferenceType value) { r.Subject = value; return r; }
        public static MolecularSequence WithText(this MolecularSequence r, Narrative value) { r.Text = value; return r; }
        public static MolecularSequence WithType(this MolecularSequence r, FhirCode value) { r.Type = value; return r; }
    }
}
