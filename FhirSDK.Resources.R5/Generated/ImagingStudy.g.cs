// <auto-generated>
#nullable enable
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
using System.Text.Json.Nodes;
using System.Text.Json.Serialization;
using System.Linq;
using FhirCore.Base;
using DataTypeServices.TypeFramework;
using DataTypeServices.DataTypes.MetaTypes;
namespace FhirSDK.Resources.R5
{
    /// <summary>
    /// A set of images produced in single study (one or more series of references images)
    /// </summary>
    public partial class ImagingStudy : ResourceBase
    {
        public override string ResourceType => "ImagingStudy";

        public ImagingStudy() { }
        public ImagingStudy(string json) { SetRawFrom(JsonNode.Parse(json)); }
        public ImagingStudy(JsonNode? source) { SetRawFrom(source); }
        protected override void OnPropertyChanged(string propertyName, object? newValue) { base.OnPropertyChanged(propertyName, newValue); }

        private List<ReferenceType>? _basedOn;
        [JsonPropertyName("basedOn")]
        public List<ReferenceType>? BasedOn { get => _basedOn; set { _basedOn = value; OnPropertyChangedByClr(nameof(BasedOn), value); } }

        private List<Resource>? _contained;
        [JsonPropertyName("contained")]
        public List<Resource>? Contained { get => _contained; set { _contained = value; OnPropertyChangedByClr(nameof(Contained), value); } }

        private FhirString? _description;
        [JsonPropertyName("description")]
        public FhirString? Description { get => _description; set { _description = value; OnPropertyChangedByClr(nameof(Description), value); } }

        private ReferenceType? _encounter;
        [JsonPropertyName("encounter")]
        public ReferenceType? Encounter { get => _encounter; set { _encounter = value; OnPropertyChangedByClr(nameof(Encounter), value); } }

        private List<ReferenceType>? _endpoint;
        [JsonPropertyName("endpoint")]
        public List<ReferenceType>? Endpoint { get => _endpoint; set { _endpoint = value; OnPropertyChangedByClr(nameof(Endpoint), value); } }

        private List<Identifier>? _identifier;
        [JsonPropertyName("identifier")]
        public List<Identifier>? Identifier { get => _identifier; set { _identifier = value; OnPropertyChangedByClr(nameof(Identifier), value); } }

        private ReferenceType? _location;
        [JsonPropertyName("location")]
        public ReferenceType? Location { get => _location; set { _location = value; OnPropertyChangedByClr(nameof(Location), value); } }

        private List<CodeableConcept>? _modality;
        [JsonPropertyName("modality")]
        public List<CodeableConcept>? Modality { get => _modality; set { _modality = value; OnPropertyChangedByClr(nameof(Modality), value); } }

        private List<Annotation>? _note;
        [JsonPropertyName("note")]
        public List<Annotation>? Note { get => _note; set { _note = value; OnPropertyChangedByClr(nameof(Note), value); } }

        private FhirUnsignedInt? _numberOfInstances;
        [JsonPropertyName("numberOfInstances")]
        public FhirUnsignedInt? NumberOfInstances { get => _numberOfInstances; set { _numberOfInstances = value; OnPropertyChangedByClr(nameof(NumberOfInstances), value); } }

        private FhirUnsignedInt? _numberOfSeries;
        [JsonPropertyName("numberOfSeries")]
        public FhirUnsignedInt? NumberOfSeries { get => _numberOfSeries; set { _numberOfSeries = value; OnPropertyChangedByClr(nameof(NumberOfSeries), value); } }

        private List<ReferenceType>? _partOf;
        [JsonPropertyName("partOf")]
        public List<ReferenceType>? PartOf { get => _partOf; set { _partOf = value; OnPropertyChangedByClr(nameof(PartOf), value); } }

        private List<CodeableReference>? _procedure;
        [JsonPropertyName("procedure")]
        public List<CodeableReference>? Procedure { get => _procedure; set { _procedure = value; OnPropertyChangedByClr(nameof(Procedure), value); } }

        private List<CodeableReference>? _reason;
        [JsonPropertyName("reason")]
        public List<CodeableReference>? Reason { get => _reason; set { _reason = value; OnPropertyChangedByClr(nameof(Reason), value); } }

        private ReferenceType? _referrer;
        [JsonPropertyName("referrer")]
        public ReferenceType? Referrer { get => _referrer; set { _referrer = value; OnPropertyChangedByClr(nameof(Referrer), value); } }

        private List<ImagingStudy_Series>? _series;
        [JsonPropertyName("series")]
        public List<ImagingStudy_Series>? Series { get => _series; set { _series = value; OnPropertyChangedByClr(nameof(Series), value); } }

        /// <summary>
        /// Each study has one or more series of instances
        /// </summary>
        public partial class ImagingStudy_Series : BackboneElement<ImagingStudy_Series>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "ImagingStudy_Series" : "imagingStudy_Series";
            private CodeableReference? _bodySite;
        [JsonPropertyName("bodySite")]
        public CodeableReference? BodySite { get => _bodySite; set { _bodySite = value; } }

            private FhirString? _description;
        [JsonPropertyName("description")]
        public FhirString? Description { get => _description; set { _description = value; } }

            private List<ReferenceType>? _endpoint;
        [JsonPropertyName("endpoint")]
        public List<ReferenceType>? Endpoint { get => _endpoint; set { _endpoint = value; } }

            private List<ImagingStudy_Series_Instance>? _instance;
        [JsonPropertyName("instance")]
        public List<ImagingStudy_Series_Instance>? Instance { get => _instance; set { _instance = value; } }

            /// <summary>
            /// A single SOP instance from the series
            /// </summary>
            public partial class ImagingStudy_Series_Instance : BackboneElement<ImagingStudy_Series_Instance>
            {
                public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "ImagingStudy_Series_Instance" : "imagingStudy_Series_Instance";
                private FhirUnsignedInt? _number;
        [JsonPropertyName("number")]
        public FhirUnsignedInt? Number { get => _number; set { _number = value; } }

                private Coding? _sopClass;
        [JsonPropertyName("sopClass")]
        public Coding SopClass { get => _sopClass ?? throw new InvalidOperationException("SopClass is required"); set { _sopClass = value; } }

                private FhirString? _title;
        [JsonPropertyName("title")]
        public FhirString? Title { get => _title; set { _title = value; } }

                private FhirId? _uid;
        [JsonPropertyName("uid")]
        public FhirId Uid { get => _uid ?? throw new InvalidOperationException("Uid is required"); set { _uid = value; } }

            }

            private CodeableConcept? _laterality;
        [JsonPropertyName("laterality")]
        public CodeableConcept? Laterality { get => _laterality; set { _laterality = value; } }

            private CodeableConcept? _modality;
        [JsonPropertyName("modality")]
        public CodeableConcept Modality { get => _modality ?? throw new InvalidOperationException("Modality is required"); set { _modality = value; } }

            private FhirUnsignedInt? _number;
        [JsonPropertyName("number")]
        public FhirUnsignedInt? Number { get => _number; set { _number = value; } }

            private FhirUnsignedInt? _numberOfInstances;
        [JsonPropertyName("numberOfInstances")]
        public FhirUnsignedInt? NumberOfInstances { get => _numberOfInstances; set { _numberOfInstances = value; } }

            private List<ImagingStudy_Series_Performer>? _performer;
        [JsonPropertyName("performer")]
        public List<ImagingStudy_Series_Performer>? Performer { get => _performer; set { _performer = value; } }

            /// <summary>
            /// Who performed the series
            /// </summary>
            public partial class ImagingStudy_Series_Performer : BackboneElement<ImagingStudy_Series_Performer>
            {
                public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "ImagingStudy_Series_Performer" : "imagingStudy_Series_Performer";
                private ReferenceType? _actor;
        [JsonPropertyName("actor")]
        public ReferenceType Actor { get => _actor ?? throw new InvalidOperationException("Actor is required"); set { _actor = value; } }

                private CodeableConcept? _function;
        [JsonPropertyName("function")]
        public CodeableConcept? Function { get => _function; set { _function = value; } }

            }

            private List<ReferenceType>? _specimen;
        [JsonPropertyName("specimen")]
        public List<ReferenceType>? Specimen { get => _specimen; set { _specimen = value; } }

            private FhirDateTime? _started;
        [JsonPropertyName("started")]
        public FhirDateTime? Started { get => _started; set { _started = value; } }

            private FhirId? _uid;
        [JsonPropertyName("uid")]
        public FhirId Uid { get => _uid ?? throw new InvalidOperationException("Uid is required"); set { _uid = value; } }

        }

        private FhirDateTime? _started;
        [JsonPropertyName("started")]
        public FhirDateTime? Started { get => _started; set { _started = value; OnPropertyChangedByClr(nameof(Started), value); } }

        private FhirCode? _status;
        [JsonPropertyName("status")]
        public FhirCode Status { get => _status ?? throw new InvalidOperationException("Status is required"); set { _status = value; OnPropertyChangedByClr(nameof(Status), value); } }

        private ReferenceType? _subject;
        [JsonPropertyName("subject")]
        public ReferenceType Subject { get => _subject ?? throw new InvalidOperationException("Subject is required"); set { _subject = value; OnPropertyChangedByClr(nameof(Subject), value); } }

        private Narrative? _text;
        [JsonPropertyName("text")]
        public Narrative? Text { get => _text; set { _text = value; OnPropertyChangedByClr(nameof(Text), value); } }

    }
}
