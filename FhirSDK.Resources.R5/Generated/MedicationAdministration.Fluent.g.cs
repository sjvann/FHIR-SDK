// <auto-generated>
#nullable enable
using System.Collections.Generic;
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
namespace FhirSDK.Resources.R5
{
    public static class MedicationAdministrationFluentExtensions
    {
        public static MedicationAdministration AddBasedOn(this MedicationAdministration r, ReferenceType item) { r.BasedOn ??= new List<ReferenceType>(); r.BasedOn!.Add(item); return r; }
        public static MedicationAdministration AddCategory(this MedicationAdministration r, CodeableConcept item) { r.Category ??= new List<CodeableConcept>(); r.Category!.Add(item); return r; }
        public static MedicationAdministration AddContained(this MedicationAdministration r, Resource item) { r.Contained ??= new List<Resource>(); r.Contained!.Add(item); return r; }
        public static MedicationAdministration AddDevice(this MedicationAdministration r, CodeableReference item) { r.Device ??= new List<CodeableReference>(); r.Device!.Add(item); return r; }
        public static MedicationAdministration WithDosage(this MedicationAdministration r, BackboneElement value) { r.Dosage = value; return r; }
        public static MedicationAdministration WithEncounter(this MedicationAdministration r, ReferenceType value) { r.Encounter = value; return r; }
        public static MedicationAdministration AddEventHistory(this MedicationAdministration r, ReferenceType item) { r.EventHistory ??= new List<ReferenceType>(); r.EventHistory!.Add(item); return r; }
        public static MedicationAdministration AddIdentifier(this MedicationAdministration r, Identifier item) { r.Identifier ??= new List<Identifier>(); r.Identifier!.Add(item); return r; }
        public static MedicationAdministration WithIsSubPotent(this MedicationAdministration r, FhirBoolean value) { r.IsSubPotent = value; return r; }
        public static MedicationAdministration WithMedication(this MedicationAdministration r, CodeableReference value) { r.Medication = value; return r; }
        public static MedicationAdministration AddNote(this MedicationAdministration r, Annotation item) { r.Note ??= new List<Annotation>(); r.Note!.Add(item); return r; }
        public static MedicationAdministration WithOccurenceDateTime(this MedicationAdministration r, FhirDateTime value) { r.OccurenceDateTime = value; return r; }
        public static MedicationAdministration WithOccurencePeriod(this MedicationAdministration r, Period value) { r.OccurencePeriod = value; return r; }
        public static MedicationAdministration WithOccurenceTiming(this MedicationAdministration r, Timing value) { r.OccurenceTiming = value; return r; }
        public static MedicationAdministration AddPartOf(this MedicationAdministration r, ReferenceType item) { r.PartOf ??= new List<ReferenceType>(); r.PartOf!.Add(item); return r; }
        public static MedicationAdministration AddPerformer(this MedicationAdministration r, BackboneElement item) { r.Performer ??= new List<BackboneElement>(); r.Performer!.Add(item); return r; }
        public static MedicationAdministration AddReason(this MedicationAdministration r, CodeableReference item) { r.Reason ??= new List<CodeableReference>(); r.Reason!.Add(item); return r; }
        public static MedicationAdministration WithRecorded(this MedicationAdministration r, FhirDateTime value) { r.Recorded = value; return r; }
        public static MedicationAdministration WithRequest(this MedicationAdministration r, ReferenceType value) { r.Request = value; return r; }
        public static MedicationAdministration WithStatus(this MedicationAdministration r, FhirCode value) { r.Status = value; return r; }
        public static MedicationAdministration AddStatusReason(this MedicationAdministration r, CodeableConcept item) { r.StatusReason ??= new List<CodeableConcept>(); r.StatusReason!.Add(item); return r; }
        public static MedicationAdministration WithSubject(this MedicationAdministration r, ReferenceType value) { r.Subject = value; return r; }
        public static MedicationAdministration AddSubPotentReason(this MedicationAdministration r, CodeableConcept item) { r.SubPotentReason ??= new List<CodeableConcept>(); r.SubPotentReason!.Add(item); return r; }
        public static MedicationAdministration AddSupportingInformation(this MedicationAdministration r, ReferenceType item) { r.SupportingInformation ??= new List<ReferenceType>(); r.SupportingInformation!.Add(item); return r; }
        public static MedicationAdministration WithText(this MedicationAdministration r, Narrative value) { r.Text = value; return r; }
    }
}
