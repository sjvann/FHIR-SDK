// <auto-generated>
#nullable enable
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
using System.Text.Json.Nodes;
using System.Text.Json.Serialization;
using System.Linq;
using FhirCore.Base;
using DataTypeServices.TypeFramework;
using DataTypeServices.DataTypes.MetaTypes;
namespace FhirSDK.Resources.R5
{
    /// <summary>
    /// Measurement, calculation or setting capability of a medical device
    /// </summary>
    public partial class DeviceMetric : ResourceBase
    {
        public override string ResourceType => "DeviceMetric";

        public DeviceMetric() { }
        public DeviceMetric(string json) { SetRawFrom(JsonNode.Parse(json)); }
        public DeviceMetric(JsonNode? source) { SetRawFrom(source); }
        protected override void OnPropertyChanged(string propertyName, object? newValue) { base.OnPropertyChanged(propertyName, newValue); }

        private List<DeviceMetric_Calibration>? _calibration;
        [JsonPropertyName("calibration")]
        public List<DeviceMetric_Calibration>? Calibration { get => _calibration; set { _calibration = value; OnPropertyChangedByClr(nameof(Calibration), value); } }

        /// <summary>
        /// Describes the calibrations that have been performed or that are required to be performed
        /// </summary>
        public partial class DeviceMetric_Calibration : BackboneElement<DeviceMetric_Calibration>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "DeviceMetric_Calibration" : "deviceMetric_Calibration";
            private FhirCode? _state;
        [JsonPropertyName("state")]
        public FhirCode? State { get => _state; set { _state = value; } }

            private FhirInstant? _time;
        [JsonPropertyName("time")]
        public FhirInstant? Time { get => _time; set { _time = value; } }

            private FhirCode? _type;
        [JsonPropertyName("type")]
        public FhirCode? Type { get => _type; set { _type = value; } }

        }

        private FhirCode? _category;
        [JsonPropertyName("category")]
        public FhirCode Category { get => _category ?? throw new InvalidOperationException("Category is required"); set { _category = value; OnPropertyChangedByClr(nameof(Category), value); } }

        private FhirCode? _color;
        [JsonPropertyName("color")]
        public FhirCode? Color { get => _color; set { _color = value; OnPropertyChangedByClr(nameof(Color), value); } }

        private List<Resource>? _contained;
        [JsonPropertyName("contained")]
        public List<Resource>? Contained { get => _contained; set { _contained = value; OnPropertyChangedByClr(nameof(Contained), value); } }

        private ReferenceType? _device;
        [JsonPropertyName("device")]
        public ReferenceType Device { get => _device ?? throw new InvalidOperationException("Device is required"); set { _device = value; OnPropertyChangedByClr(nameof(Device), value); } }

        private List<Identifier>? _identifier;
        [JsonPropertyName("identifier")]
        public List<Identifier>? Identifier { get => _identifier; set { _identifier = value; OnPropertyChangedByClr(nameof(Identifier), value); } }

        private Quantity? _measurementFrequency;
        [JsonPropertyName("measurementFrequency")]
        public Quantity? MeasurementFrequency { get => _measurementFrequency; set { _measurementFrequency = value; OnPropertyChangedByClr(nameof(MeasurementFrequency), value); } }

        private FhirCode? _operationalStatus;
        [JsonPropertyName("operationalStatus")]
        public FhirCode? OperationalStatus { get => _operationalStatus; set { _operationalStatus = value; OnPropertyChangedByClr(nameof(OperationalStatus), value); } }

        private Narrative? _text;
        [JsonPropertyName("text")]
        public Narrative? Text { get => _text; set { _text = value; OnPropertyChangedByClr(nameof(Text), value); } }

        private CodeableConcept? _type;
        [JsonPropertyName("type")]
        public CodeableConcept Type { get => _type ?? throw new InvalidOperationException("Type is required"); set { _type = value; OnPropertyChangedByClr(nameof(Type), value); } }

        private CodeableConcept? _unit;
        [JsonPropertyName("unit")]
        public CodeableConcept? Unit { get => _unit; set { _unit = value; OnPropertyChangedByClr(nameof(Unit), value); } }

    }
}
