// <auto-generated>
#nullable enable
using System.Collections.Generic;
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
namespace FhirSDK.Resources.R5
{
    public static class IngredientFluentExtensions
    {
        public static Ingredient WithAllergenicIndicator(this Ingredient r, FhirBoolean value) { r.AllergenicIndicator = value; return r; }
        public static Ingredient WithComment(this Ingredient r, FhirMarkdown value) { r.Comment = value; return r; }
        public static Ingredient AddContained(this Ingredient r, Resource item) { r.Contained ??= new List<Resource>(); r.Contained!.Add(item); return r; }
        public static Ingredient AddFor(this Ingredient r, ReferenceType item) { r.For ??= new List<ReferenceType>(); r.For!.Add(item); return r; }
        public static Ingredient AddFunction(this Ingredient r, CodeableConcept item) { r.Function ??= new List<CodeableConcept>(); r.Function!.Add(item); return r; }
        public static Ingredient WithGroup(this Ingredient r, CodeableConcept value) { r.Group = value; return r; }
        public static Ingredient WithIdentifier(this Ingredient r, Identifier value) { r.Identifier = value; return r; }
        public static Ingredient AddManufacturer(this Ingredient r, BackboneElement item) { r.Manufacturer ??= new List<BackboneElement>(); r.Manufacturer!.Add(item); return r; }
        public static Ingredient WithRole(this Ingredient r, CodeableConcept value) { r.Role = value; return r; }
        public static Ingredient WithStatus(this Ingredient r, FhirCode value) { r.Status = value; return r; }
        public static Ingredient WithSubstance(this Ingredient r, BackboneElement value) { r.Substance = value; return r; }
        public static Ingredient WithText(this Ingredient r, Narrative value) { r.Text = value; return r; }
    }
}
