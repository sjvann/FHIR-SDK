// <auto-generated>
#nullable enable
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
using System.Text.Json.Nodes;
using System.Text.Json.Serialization;
using System.Linq;
using FhirCore.Base;
using DataTypeServices.TypeFramework;
using DataTypeServices.DataTypes.MetaTypes;
namespace FhirSDK.Resources.R5
{
    /// <summary>
    /// Who, What, When for a set of resources
    /// </summary>
    public partial class Provenance : ResourceBase
    {
        public override string ResourceType => "Provenance";

        public Provenance() { }
        public Provenance(string json) { SetRawFrom(JsonNode.Parse(json)); }
        public Provenance(JsonNode? source) { SetRawFrom(source); }
        protected override void OnPropertyChanged(string propertyName, object? newValue) { base.OnPropertyChanged(propertyName, newValue); }

        private CodeableConcept? _activity;
        [JsonPropertyName("activity")]
        public CodeableConcept? Activity { get => _activity; set { _activity = value; OnPropertyChangedByClr(nameof(Activity), value); } }

        private List<Provenance_Agent> _agent = new();
        [JsonPropertyName("agent")]
        public List<Provenance_Agent> Agent { get => _agent; set { _agent = value; OnPropertyChangedByClr(nameof(Agent), value); } }

        /// <summary>
        /// Actor involved
        /// </summary>
        public partial class Provenance_Agent : BackboneElement<Provenance_Agent>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "Provenance_Agent" : "provenance_Agent";
            private ReferenceType? _onBehalfOf;
        [JsonPropertyName("onBehalfOf")]
        public ReferenceType? OnBehalfOf { get => _onBehalfOf; set { _onBehalfOf = value; } }

            private List<CodeableConcept>? _role;
        [JsonPropertyName("role")]
        public List<CodeableConcept>? Role { get => _role; set { _role = value; } }

            private CodeableConcept? _type;
        [JsonPropertyName("type")]
        public CodeableConcept? Type { get => _type; set { _type = value; } }

            private ReferenceType? _who;
        [JsonPropertyName("who")]
        public ReferenceType Who { get => _who ?? throw new InvalidOperationException("Who is required"); set { _who = value; } }

        }

        private List<CodeableReference>? _authorization;
        [JsonPropertyName("authorization")]
        public List<CodeableReference>? Authorization { get => _authorization; set { _authorization = value; OnPropertyChangedByClr(nameof(Authorization), value); } }

        private List<ReferenceType>? _basedOn;
        [JsonPropertyName("basedOn")]
        public List<ReferenceType>? BasedOn { get => _basedOn; set { _basedOn = value; OnPropertyChangedByClr(nameof(BasedOn), value); } }

        private List<Resource>? _contained;
        [JsonPropertyName("contained")]
        public List<Resource>? Contained { get => _contained; set { _contained = value; OnPropertyChangedByClr(nameof(Contained), value); } }

        private ReferenceType? _encounter;
        [JsonPropertyName("encounter")]
        public ReferenceType? Encounter { get => _encounter; set { _encounter = value; OnPropertyChangedByClr(nameof(Encounter), value); } }

        private List<Provenance_Entity>? _entity;
        [JsonPropertyName("entity")]
        public List<Provenance_Entity>? Entity { get => _entity; set { _entity = value; OnPropertyChangedByClr(nameof(Entity), value); } }

        /// <summary>
        /// An entity used in this activity
        /// </summary>
        public partial class Provenance_Entity : BackboneElement<Provenance_Entity>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "Provenance_Entity" : "provenance_Entity";
            private List<FhirString>? _agent;
        [JsonPropertyName("agent")]
        public List<FhirString>? Agent { get => _agent; set { _agent = value; } }

            private FhirCode? _role;
        [JsonPropertyName("role")]
        public FhirCode Role { get => _role ?? throw new InvalidOperationException("Role is required"); set { _role = value; } }

            private ReferenceType? _what;
        [JsonPropertyName("what")]
        public ReferenceType What { get => _what ?? throw new InvalidOperationException("What is required"); set { _what = value; } }

        }

        private ReferenceType? _location;
        [JsonPropertyName("location")]
        public ReferenceType? Location { get => _location; set { _location = value; OnPropertyChangedByClr(nameof(Location), value); } }

        private Period? _occurredPeriod;
        [JsonPropertyName("occurredPeriod")]
        public Period? OccurredPeriod { get => _occurredPeriod; set { _occurredPeriod = value; if (value != null) {{ _occurredDateTime = null; OnPropertyChangedByClr(nameof(OccurredDateTime), null); }}; OnPropertyChangedByClr(nameof(OccurredPeriod), value); } }

        private FhirDateTime? _occurredDateTime;
        [JsonPropertyName("occurredDateTime")]
        public FhirDateTime? OccurredDateTime { get => _occurredDateTime; set { _occurredDateTime = value; if (value != null) {{ _occurredPeriod = null; OnPropertyChangedByClr(nameof(OccurredPeriod), null); }}; OnPropertyChangedByClr(nameof(OccurredDateTime), value); } }

        private ReferenceType? _patient;
        [JsonPropertyName("patient")]
        public ReferenceType? Patient { get => _patient; set { _patient = value; OnPropertyChangedByClr(nameof(Patient), value); } }

        private List<FhirUri>? _policy;
        [JsonPropertyName("policy")]
        public List<FhirUri>? Policy { get => _policy; set { _policy = value; OnPropertyChangedByClr(nameof(Policy), value); } }

        private FhirInstant? _recorded;
        [JsonPropertyName("recorded")]
        public FhirInstant? Recorded { get => _recorded; set { _recorded = value; OnPropertyChangedByClr(nameof(Recorded), value); } }

        private List<Signature>? _signature;
        [JsonPropertyName("signature")]
        public List<Signature>? Signature { get => _signature; set { _signature = value; OnPropertyChangedByClr(nameof(Signature), value); } }

        private List<ReferenceType> _target = new();
        [JsonPropertyName("target")]
        public List<ReferenceType> Target { get => _target; set { _target = value; OnPropertyChangedByClr(nameof(Target), value); } }

        private Narrative? _text;
        [JsonPropertyName("text")]
        public Narrative? Text { get => _text; set { _text = value; OnPropertyChangedByClr(nameof(Text), value); } }

    }
}
