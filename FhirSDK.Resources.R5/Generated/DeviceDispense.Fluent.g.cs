// <auto-generated>
#nullable enable
using System.Collections.Generic;
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
namespace FhirSDK.Resources.R5
{
    public static class DeviceDispenseFluentExtensions
    {
        public static DeviceDispense AddBasedOn(this DeviceDispense r, ReferenceType item) { r.BasedOn ??= new List<ReferenceType>(); r.BasedOn!.Add(item); return r; }
        public static DeviceDispense AddCategory(this DeviceDispense r, CodeableConcept item) { r.Category ??= new List<CodeableConcept>(); r.Category!.Add(item); return r; }
        public static DeviceDispense AddContained(this DeviceDispense r, Resource item) { r.Contained ??= new List<Resource>(); r.Contained!.Add(item); return r; }
        public static DeviceDispense WithDestination(this DeviceDispense r, ReferenceType value) { r.Destination = value; return r; }
        public static DeviceDispense WithDevice(this DeviceDispense r, CodeableReference value) { r.Device = value; return r; }
        public static DeviceDispense WithEncounter(this DeviceDispense r, ReferenceType value) { r.Encounter = value; return r; }
        public static DeviceDispense AddEventHistory(this DeviceDispense r, ReferenceType item) { r.EventHistory ??= new List<ReferenceType>(); r.EventHistory!.Add(item); return r; }
        public static DeviceDispense AddIdentifier(this DeviceDispense r, Identifier item) { r.Identifier ??= new List<Identifier>(); r.Identifier!.Add(item); return r; }
        public static DeviceDispense WithLocation(this DeviceDispense r, ReferenceType value) { r.Location = value; return r; }
        public static DeviceDispense AddNote(this DeviceDispense r, Annotation item) { r.Note ??= new List<Annotation>(); r.Note!.Add(item); return r; }
        public static DeviceDispense AddPartOf(this DeviceDispense r, ReferenceType item) { r.PartOf ??= new List<ReferenceType>(); r.PartOf!.Add(item); return r; }
        public static DeviceDispense AddPerformer(this DeviceDispense r, BackboneElement item) { r.Performer ??= new List<BackboneElement>(); r.Performer!.Add(item); return r; }
        public static DeviceDispense WithPreparedDate(this DeviceDispense r, FhirDateTime value) { r.PreparedDate = value; return r; }
        public static DeviceDispense WithQuantity(this DeviceDispense r, Quantity value) { r.Quantity = value; return r; }
        public static DeviceDispense WithReceiver(this DeviceDispense r, ReferenceType value) { r.Receiver = value; return r; }
        public static DeviceDispense WithStatus(this DeviceDispense r, FhirCode value) { r.Status = value; return r; }
        public static DeviceDispense WithStatusReason(this DeviceDispense r, CodeableReference value) { r.StatusReason = value; return r; }
        public static DeviceDispense WithSubject(this DeviceDispense r, ReferenceType value) { r.Subject = value; return r; }
        public static DeviceDispense AddSupportingInformation(this DeviceDispense r, ReferenceType item) { r.SupportingInformation ??= new List<ReferenceType>(); r.SupportingInformation!.Add(item); return r; }
        public static DeviceDispense WithText(this DeviceDispense r, Narrative value) { r.Text = value; return r; }
        public static DeviceDispense WithType(this DeviceDispense r, CodeableConcept value) { r.Type = value; return r; }
        public static DeviceDispense WithUsageInstruction(this DeviceDispense r, FhirMarkdown value) { r.UsageInstruction = value; return r; }
        public static DeviceDispense WithWhenHandedOver(this DeviceDispense r, FhirDateTime value) { r.WhenHandedOver = value; return r; }
    }
}
