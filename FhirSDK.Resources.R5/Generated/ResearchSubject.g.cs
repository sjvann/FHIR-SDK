// <auto-generated>
#nullable enable
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
using System.Text.Json.Nodes;
using System.Text.Json.Serialization;
using System.Linq;
using FhirCore.Base;
using DataTypeServices.TypeFramework;
using DataTypeServices.DataTypes.MetaTypes;
namespace FhirSDK.Resources.R5
{
    /// <summary>
    /// Participant or object which is the recipient of investigative activities in a study
    /// </summary>
    public partial class ResearchSubject : ResourceBase
    {
        public override string ResourceType => "ResearchSubject";

        public ResearchSubject() { }
        public ResearchSubject(string json) { SetRawFrom(JsonNode.Parse(json)); }
        public ResearchSubject(JsonNode? source) { SetRawFrom(source); }
        protected override void OnPropertyChanged(string propertyName, object? newValue) { base.OnPropertyChanged(propertyName, newValue); }

        private FhirId? _actualComparisonGroup;
        [JsonPropertyName("actualComparisonGroup")]
        public FhirId? ActualComparisonGroup { get => _actualComparisonGroup; set { _actualComparisonGroup = value; OnPropertyChangedByClr(nameof(ActualComparisonGroup), value); } }

        private FhirId? _assignedComparisonGroup;
        [JsonPropertyName("assignedComparisonGroup")]
        public FhirId? AssignedComparisonGroup { get => _assignedComparisonGroup; set { _assignedComparisonGroup = value; OnPropertyChangedByClr(nameof(AssignedComparisonGroup), value); } }

        private List<ReferenceType>? _consent;
        [JsonPropertyName("consent")]
        public List<ReferenceType>? Consent { get => _consent; set { _consent = value; OnPropertyChangedByClr(nameof(Consent), value); } }

        private List<Resource>? _contained;
        [JsonPropertyName("contained")]
        public List<Resource>? Contained { get => _contained; set { _contained = value; OnPropertyChangedByClr(nameof(Contained), value); } }

        private List<Identifier>? _identifier;
        [JsonPropertyName("identifier")]
        public List<Identifier>? Identifier { get => _identifier; set { _identifier = value; OnPropertyChangedByClr(nameof(Identifier), value); } }

        private Period? _period;
        [JsonPropertyName("period")]
        public Period? Period { get => _period; set { _period = value; OnPropertyChangedByClr(nameof(Period), value); } }

        private List<ResearchSubject_Progress>? _progress;
        [JsonPropertyName("progress")]
        public List<ResearchSubject_Progress>? Progress { get => _progress; set { _progress = value; OnPropertyChangedByClr(nameof(Progress), value); } }

        /// <summary>
        /// Subject status
        /// </summary>
        public partial class ResearchSubject_Progress : BackboneElement<ResearchSubject_Progress>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "ResearchSubject_Progress" : "researchSubject_Progress";
            private FhirDateTime? _endDate;
        [JsonPropertyName("endDate")]
        public FhirDateTime? EndDate { get => _endDate; set { _endDate = value; } }

            private CodeableConcept? _milestone;
        [JsonPropertyName("milestone")]
        public CodeableConcept? Milestone { get => _milestone; set { _milestone = value; } }

            private CodeableConcept? _reason;
        [JsonPropertyName("reason")]
        public CodeableConcept? Reason { get => _reason; set { _reason = value; } }

            private FhirDateTime? _startDate;
        [JsonPropertyName("startDate")]
        public FhirDateTime? StartDate { get => _startDate; set { _startDate = value; } }

            private CodeableConcept? _subjectState;
        [JsonPropertyName("subjectState")]
        public CodeableConcept? SubjectState { get => _subjectState; set { _subjectState = value; } }

            private CodeableConcept? _type;
        [JsonPropertyName("type")]
        public CodeableConcept? Type { get => _type; set { _type = value; } }

        }

        private FhirCode? _status;
        [JsonPropertyName("status")]
        public FhirCode Status { get => _status ?? throw new InvalidOperationException("Status is required"); set { _status = value; OnPropertyChangedByClr(nameof(Status), value); } }

        private ReferenceType? _study;
        [JsonPropertyName("study")]
        public ReferenceType Study { get => _study ?? throw new InvalidOperationException("Study is required"); set { _study = value; OnPropertyChangedByClr(nameof(Study), value); } }

        private ReferenceType? _subject;
        [JsonPropertyName("subject")]
        public ReferenceType Subject { get => _subject ?? throw new InvalidOperationException("Subject is required"); set { _subject = value; OnPropertyChangedByClr(nameof(Subject), value); } }

        private Narrative? _text;
        [JsonPropertyName("text")]
        public Narrative? Text { get => _text; set { _text = value; OnPropertyChangedByClr(nameof(Text), value); } }

    }
}
