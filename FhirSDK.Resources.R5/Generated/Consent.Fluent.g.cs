// <auto-generated>
#nullable enable
using System.Collections.Generic;
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
namespace FhirSDK.Resources.R5
{
    public static class ConsentFluentExtensions
    {
        public static Consent AddCategory(this Consent r, CodeableConcept item) { r.Category ??= new List<CodeableConcept>(); r.Category!.Add(item); return r; }
        public static Consent AddContained(this Consent r, Resource item) { r.Contained ??= new List<Resource>(); r.Contained!.Add(item); return r; }
        public static Consent AddController(this Consent r, ReferenceType item) { r.Controller ??= new List<ReferenceType>(); r.Controller!.Add(item); return r; }
        public static Consent WithDate(this Consent r, FhirDate value) { r.Date = value; return r; }
        public static Consent WithDecision(this Consent r, FhirCode value) { r.Decision = value; return r; }
        public static Consent AddGrantee(this Consent r, ReferenceType item) { r.Grantee ??= new List<ReferenceType>(); r.Grantee!.Add(item); return r; }
        public static Consent AddGrantor(this Consent r, ReferenceType item) { r.Grantor ??= new List<ReferenceType>(); r.Grantor!.Add(item); return r; }
        public static Consent AddIdentifier(this Consent r, Identifier item) { r.Identifier ??= new List<Identifier>(); r.Identifier!.Add(item); return r; }
        public static Consent AddManager(this Consent r, ReferenceType item) { r.Manager ??= new List<ReferenceType>(); r.Manager!.Add(item); return r; }
        public static Consent WithPeriod(this Consent r, Period value) { r.Period = value; return r; }
        public static Consent WithPolicyBasis(this Consent r, BackboneElement value) { r.PolicyBasis = value; return r; }
        public static Consent AddPolicyText(this Consent r, ReferenceType item) { r.PolicyText ??= new List<ReferenceType>(); r.PolicyText!.Add(item); return r; }
        public static Consent AddProvision(this Consent r, BackboneElement item) { r.Provision ??= new List<BackboneElement>(); r.Provision!.Add(item); return r; }
        public static Consent AddRegulatoryBasis(this Consent r, CodeableConcept item) { r.RegulatoryBasis ??= new List<CodeableConcept>(); r.RegulatoryBasis!.Add(item); return r; }
        public static Consent AddSourceAttachment(this Consent r, Attachment item) { r.SourceAttachment ??= new List<Attachment>(); r.SourceAttachment!.Add(item); return r; }
        public static Consent AddSourceReference(this Consent r, ReferenceType item) { r.SourceReference ??= new List<ReferenceType>(); r.SourceReference!.Add(item); return r; }
        public static Consent WithStatus(this Consent r, FhirCode value) { r.Status = value; return r; }
        public static Consent WithSubject(this Consent r, ReferenceType value) { r.Subject = value; return r; }
        public static Consent WithText(this Consent r, Narrative value) { r.Text = value; return r; }
        public static Consent AddVerification(this Consent r, BackboneElement item) { r.Verification ??= new List<BackboneElement>(); r.Verification!.Add(item); return r; }
    }
}
