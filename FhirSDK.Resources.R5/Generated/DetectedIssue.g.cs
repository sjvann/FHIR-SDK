// <auto-generated>
#nullable enable
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
using System.Text.Json.Nodes;
using System.Text.Json.Serialization;
using System.Linq;
using FhirCore.Base;
using DataTypeServices.TypeFramework;
using DataTypeServices.DataTypes.MetaTypes;
namespace FhirSDK.Resources.R5
{
    /// <summary>
    /// Clinical issue with action
    /// </summary>
    public partial class DetectedIssue : ResourceBase
    {
        public override string ResourceType => "DetectedIssue";

        public DetectedIssue() { }
        public DetectedIssue(string json) { SetRawFrom(JsonNode.Parse(json)); }
        public DetectedIssue(JsonNode? source) { SetRawFrom(source); }
        protected override void OnPropertyChanged(string propertyName, object? newValue) { base.OnPropertyChanged(propertyName, newValue); }

        private ReferenceType? _author;
        [JsonPropertyName("author")]
        public ReferenceType? Author { get => _author; set { _author = value; OnPropertyChangedByClr(nameof(Author), value); } }

        private List<CodeableConcept>? _category;
        [JsonPropertyName("category")]
        public List<CodeableConcept>? Category { get => _category; set { _category = value; OnPropertyChangedByClr(nameof(Category), value); } }

        private CodeableConcept? _code;
        [JsonPropertyName("code")]
        public CodeableConcept? Code { get => _code; set { _code = value; OnPropertyChangedByClr(nameof(Code), value); } }

        private List<Resource>? _contained;
        [JsonPropertyName("contained")]
        public List<Resource>? Contained { get => _contained; set { _contained = value; OnPropertyChangedByClr(nameof(Contained), value); } }

        private FhirMarkdown? _detail;
        [JsonPropertyName("detail")]
        public FhirMarkdown? Detail { get => _detail; set { _detail = value; OnPropertyChangedByClr(nameof(Detail), value); } }

        private ReferenceType? _encounter;
        [JsonPropertyName("encounter")]
        public ReferenceType? Encounter { get => _encounter; set { _encounter = value; OnPropertyChangedByClr(nameof(Encounter), value); } }

        private List<DetectedIssue_Evidence>? _evidence;
        [JsonPropertyName("evidence")]
        public List<DetectedIssue_Evidence>? Evidence { get => _evidence; set { _evidence = value; OnPropertyChangedByClr(nameof(Evidence), value); } }

        /// <summary>
        /// Supporting evidence
        /// </summary>
        public partial class DetectedIssue_Evidence : BackboneElement<DetectedIssue_Evidence>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "DetectedIssue_Evidence" : "detectedIssue_Evidence";
            private List<CodeableConcept>? _code;
        [JsonPropertyName("code")]
        public List<CodeableConcept>? Code { get => _code; set { _code = value; } }

            private List<ReferenceType>? _detail;
        [JsonPropertyName("detail")]
        public List<ReferenceType>? Detail { get => _detail; set { _detail = value; } }

        }

        private FhirDateTime? _identifiedDateTime;
        [JsonPropertyName("identifiedDateTime")]
        public FhirDateTime? IdentifiedDateTime { get => _identifiedDateTime; set { _identifiedDateTime = value; if (value != null) {{ _identifiedPeriod = null; OnPropertyChangedByClr(nameof(IdentifiedPeriod), null); }}; OnPropertyChangedByClr(nameof(IdentifiedDateTime), value); } }

        private Period? _identifiedPeriod;
        [JsonPropertyName("identifiedPeriod")]
        public Period? IdentifiedPeriod { get => _identifiedPeriod; set { _identifiedPeriod = value; if (value != null) {{ _identifiedDateTime = null; OnPropertyChangedByClr(nameof(IdentifiedDateTime), null); }}; OnPropertyChangedByClr(nameof(IdentifiedPeriod), value); } }

        private List<Identifier>? _identifier;
        [JsonPropertyName("identifier")]
        public List<Identifier>? Identifier { get => _identifier; set { _identifier = value; OnPropertyChangedByClr(nameof(Identifier), value); } }

        private List<ReferenceType>? _implicated;
        [JsonPropertyName("implicated")]
        public List<ReferenceType>? Implicated { get => _implicated; set { _implicated = value; OnPropertyChangedByClr(nameof(Implicated), value); } }

        private List<DetectedIssue_Mitigation>? _mitigation;
        [JsonPropertyName("mitigation")]
        public List<DetectedIssue_Mitigation>? Mitigation { get => _mitigation; set { _mitigation = value; OnPropertyChangedByClr(nameof(Mitigation), value); } }

        /// <summary>
        /// Step taken to address
        /// </summary>
        public partial class DetectedIssue_Mitigation : BackboneElement<DetectedIssue_Mitigation>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "DetectedIssue_Mitigation" : "detectedIssue_Mitigation";
            private CodeableConcept? _action;
        [JsonPropertyName("action")]
        public CodeableConcept Action { get => _action ?? throw new InvalidOperationException("Action is required"); set { _action = value; } }

            private ReferenceType? _author;
        [JsonPropertyName("author")]
        public ReferenceType? Author { get => _author; set { _author = value; } }

            private FhirDateTime? _date;
        [JsonPropertyName("date")]
        public FhirDateTime? Date { get => _date; set { _date = value; } }

            private List<Annotation>? _note;
        [JsonPropertyName("note")]
        public List<Annotation>? Note { get => _note; set { _note = value; } }

        }

        private FhirUri? _reference;
        [JsonPropertyName("reference")]
        public FhirUri? Reference { get => _reference; set { _reference = value; OnPropertyChangedByClr(nameof(Reference), value); } }

        private FhirCode? _severity;
        [JsonPropertyName("severity")]
        public FhirCode? Severity { get => _severity; set { _severity = value; OnPropertyChangedByClr(nameof(Severity), value); } }

        private FhirCode? _status;
        [JsonPropertyName("status")]
        public FhirCode Status { get => _status ?? throw new InvalidOperationException("Status is required"); set { _status = value; OnPropertyChangedByClr(nameof(Status), value); } }

        private ReferenceType? _subject;
        [JsonPropertyName("subject")]
        public ReferenceType? Subject { get => _subject; set { _subject = value; OnPropertyChangedByClr(nameof(Subject), value); } }

        private Narrative? _text;
        [JsonPropertyName("text")]
        public Narrative? Text { get => _text; set { _text = value; OnPropertyChangedByClr(nameof(Text), value); } }

    }
}
