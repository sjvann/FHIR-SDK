// <auto-generated>
#nullable enable
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
using System.Text.Json.Nodes;
using System.Text.Json.Serialization;
using System.Linq;
using FhirCore.Base;
using DataTypeServices.TypeFramework;
using DataTypeServices.DataTypes.MetaTypes;
namespace FhirSDK.Resources.R5
{
    /// <summary>
    /// Allergy or Intolerance (generally: Risk of adverse reaction to a substance)
    /// </summary>
    public partial class AllergyIntolerance : ResourceBase
    {
        public override string ResourceType => "AllergyIntolerance";

        public AllergyIntolerance() { }
        public AllergyIntolerance(string json) { SetRawFrom(JsonNode.Parse(json)); }
        public AllergyIntolerance(JsonNode? source) { SetRawFrom(source); }
        protected override void OnPropertyChanged(string propertyName, object? newValue) { base.OnPropertyChanged(propertyName, newValue); }

        private List<FhirCode>? _category;
        [JsonPropertyName("category")]
        public List<FhirCode>? Category { get => _category; set { _category = value; OnPropertyChangedByClr(nameof(Category), value); } }

        private CodeableConcept? _clinicalStatus;
        [JsonPropertyName("clinicalStatus")]
        public CodeableConcept? ClinicalStatus { get => _clinicalStatus; set { _clinicalStatus = value; OnPropertyChangedByClr(nameof(ClinicalStatus), value); } }

        private CodeableConcept? _code;
        [JsonPropertyName("code")]
        public CodeableConcept? Code { get => _code; set { _code = value; OnPropertyChangedByClr(nameof(Code), value); } }

        private List<Resource>? _contained;
        [JsonPropertyName("contained")]
        public List<Resource>? Contained { get => _contained; set { _contained = value; OnPropertyChangedByClr(nameof(Contained), value); } }

        private FhirCode? _criticality;
        [JsonPropertyName("criticality")]
        public FhirCode? Criticality { get => _criticality; set { _criticality = value; OnPropertyChangedByClr(nameof(Criticality), value); } }

        private ReferenceType? _encounter;
        [JsonPropertyName("encounter")]
        public ReferenceType? Encounter { get => _encounter; set { _encounter = value; OnPropertyChangedByClr(nameof(Encounter), value); } }

        private List<Identifier>? _identifier;
        [JsonPropertyName("identifier")]
        public List<Identifier>? Identifier { get => _identifier; set { _identifier = value; OnPropertyChangedByClr(nameof(Identifier), value); } }

        private FhirDateTime? _lastOccurrence;
        [JsonPropertyName("lastOccurrence")]
        public FhirDateTime? LastOccurrence { get => _lastOccurrence; set { _lastOccurrence = value; OnPropertyChangedByClr(nameof(LastOccurrence), value); } }

        private List<Annotation>? _note;
        [JsonPropertyName("note")]
        public List<Annotation>? Note { get => _note; set { _note = value; OnPropertyChangedByClr(nameof(Note), value); } }

        private FhirDateTime? _onsetDateTime;
        [JsonPropertyName("onsetDateTime")]
        public FhirDateTime? OnsetDateTime { get => _onsetDateTime; set { _onsetDateTime = value; if (value != null) {{ _onsetAge = null; OnPropertyChangedByClr(nameof(OnsetAge), null); _onsetPeriod = null; OnPropertyChangedByClr(nameof(OnsetPeriod), null); _onsetRange = null; OnPropertyChangedByClr(nameof(OnsetRange), null); _onsetString = null; OnPropertyChangedByClr(nameof(OnsetString), null); }}; OnPropertyChangedByClr(nameof(OnsetDateTime), value); } }

        private Age? _onsetAge;
        [JsonPropertyName("onsetAge")]
        public Age? OnsetAge { get => _onsetAge; set { _onsetAge = value; if (value != null) {{ _onsetDateTime = null; OnPropertyChangedByClr(nameof(OnsetDateTime), null); _onsetPeriod = null; OnPropertyChangedByClr(nameof(OnsetPeriod), null); _onsetRange = null; OnPropertyChangedByClr(nameof(OnsetRange), null); _onsetString = null; OnPropertyChangedByClr(nameof(OnsetString), null); }}; OnPropertyChangedByClr(nameof(OnsetAge), value); } }

        private Period? _onsetPeriod;
        [JsonPropertyName("onsetPeriod")]
        public Period? OnsetPeriod { get => _onsetPeriod; set { _onsetPeriod = value; if (value != null) {{ _onsetDateTime = null; OnPropertyChangedByClr(nameof(OnsetDateTime), null); _onsetAge = null; OnPropertyChangedByClr(nameof(OnsetAge), null); _onsetRange = null; OnPropertyChangedByClr(nameof(OnsetRange), null); _onsetString = null; OnPropertyChangedByClr(nameof(OnsetString), null); }}; OnPropertyChangedByClr(nameof(OnsetPeriod), value); } }

        private DataTypeServices.DataTypes.ComplexTypes.Range? _onsetRange;
        [JsonPropertyName("onsetRange")]
        public DataTypeServices.DataTypes.ComplexTypes.Range? OnsetRange { get => _onsetRange; set { _onsetRange = value; if (value != null) {{ _onsetDateTime = null; OnPropertyChangedByClr(nameof(OnsetDateTime), null); _onsetAge = null; OnPropertyChangedByClr(nameof(OnsetAge), null); _onsetPeriod = null; OnPropertyChangedByClr(nameof(OnsetPeriod), null); _onsetString = null; OnPropertyChangedByClr(nameof(OnsetString), null); }}; OnPropertyChangedByClr(nameof(OnsetRange), value); } }

        private FhirString? _onsetString;
        [JsonPropertyName("onsetString")]
        public FhirString? OnsetString { get => _onsetString; set { _onsetString = value; if (value != null) {{ _onsetDateTime = null; OnPropertyChangedByClr(nameof(OnsetDateTime), null); _onsetAge = null; OnPropertyChangedByClr(nameof(OnsetAge), null); _onsetPeriod = null; OnPropertyChangedByClr(nameof(OnsetPeriod), null); _onsetRange = null; OnPropertyChangedByClr(nameof(OnsetRange), null); }}; OnPropertyChangedByClr(nameof(OnsetString), value); } }

        private List<AllergyIntolerance_Participant>? _participant;
        [JsonPropertyName("participant")]
        public List<AllergyIntolerance_Participant>? Participant { get => _participant; set { _participant = value; OnPropertyChangedByClr(nameof(Participant), value); } }

        /// <summary>
        /// Who or what participated in the activities related to the allergy or intolerance and how they were involved
        /// </summary>
        public partial class AllergyIntolerance_Participant : BackboneElement<AllergyIntolerance_Participant>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "AllergyIntolerance_Participant" : "allergyIntolerance_Participant";
            private ReferenceType? _actor;
        [JsonPropertyName("actor")]
        public ReferenceType Actor { get => _actor ?? throw new InvalidOperationException("Actor is required"); set { _actor = value; } }

            private CodeableConcept? _function;
        [JsonPropertyName("function")]
        public CodeableConcept? Function { get => _function; set { _function = value; } }

        }

        private ReferenceType? _patient;
        [JsonPropertyName("patient")]
        public ReferenceType Patient { get => _patient ?? throw new InvalidOperationException("Patient is required"); set { _patient = value; OnPropertyChangedByClr(nameof(Patient), value); } }

        private List<AllergyIntolerance_Reaction>? _reaction;
        [JsonPropertyName("reaction")]
        public List<AllergyIntolerance_Reaction>? Reaction { get => _reaction; set { _reaction = value; OnPropertyChangedByClr(nameof(Reaction), value); } }

        /// <summary>
        /// Adverse Reaction Events linked to exposure to substance
        /// </summary>
        public partial class AllergyIntolerance_Reaction : BackboneElement<AllergyIntolerance_Reaction>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "AllergyIntolerance_Reaction" : "allergyIntolerance_Reaction";
            private FhirString? _description;
        [JsonPropertyName("description")]
        public FhirString? Description { get => _description; set { _description = value; } }

            private CodeableConcept? _exposureRoute;
        [JsonPropertyName("exposureRoute")]
        public CodeableConcept? ExposureRoute { get => _exposureRoute; set { _exposureRoute = value; } }

            private List<CodeableReference> _manifestation = new();
        [JsonPropertyName("manifestation")]
        public List<CodeableReference> Manifestation { get => _manifestation; set { _manifestation = value; } }

            private List<Annotation>? _note;
        [JsonPropertyName("note")]
        public List<Annotation>? Note { get => _note; set { _note = value; } }

            private FhirDateTime? _onset;
        [JsonPropertyName("onset")]
        public FhirDateTime? Onset { get => _onset; set { _onset = value; } }

            private FhirCode? _severity;
        [JsonPropertyName("severity")]
        public FhirCode? Severity { get => _severity; set { _severity = value; } }

            private CodeableConcept? _substance;
        [JsonPropertyName("substance")]
        public CodeableConcept? Substance { get => _substance; set { _substance = value; } }

        }

        private FhirDateTime? _recordedDate;
        [JsonPropertyName("recordedDate")]
        public FhirDateTime? RecordedDate { get => _recordedDate; set { _recordedDate = value; OnPropertyChangedByClr(nameof(RecordedDate), value); } }

        private Narrative? _text;
        [JsonPropertyName("text")]
        public Narrative? Text { get => _text; set { _text = value; OnPropertyChangedByClr(nameof(Text), value); } }

        private CodeableConcept? _type;
        [JsonPropertyName("type")]
        public CodeableConcept? Type { get => _type; set { _type = value; OnPropertyChangedByClr(nameof(Type), value); } }

        private CodeableConcept? _verificationStatus;
        [JsonPropertyName("verificationStatus")]
        public CodeableConcept? VerificationStatus { get => _verificationStatus; set { _verificationStatus = value; OnPropertyChangedByClr(nameof(VerificationStatus), value); } }

    }
}
