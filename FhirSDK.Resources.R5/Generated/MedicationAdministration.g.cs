// <auto-generated>
#nullable enable
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
using System.Text.Json.Nodes;
using System.Text.Json.Serialization;
using System.Linq;
using FhirCore.Base;
using DataTypeServices.TypeFramework;
using DataTypeServices.DataTypes.MetaTypes;
namespace FhirSDK.Resources.R5
{
    /// <summary>
    /// Administration of medication to a patient
    /// </summary>
    public partial class MedicationAdministration : ResourceBase
    {
        public override string ResourceType => "MedicationAdministration";

        public MedicationAdministration() { }
        public MedicationAdministration(string json) { SetRawFrom(JsonNode.Parse(json)); }
        public MedicationAdministration(JsonNode? source) { SetRawFrom(source); }
        protected override void OnPropertyChanged(string propertyName, object? newValue) { base.OnPropertyChanged(propertyName, newValue); }

        private List<ReferenceType>? _basedOn;
        [JsonPropertyName("basedOn")]
        public List<ReferenceType>? BasedOn { get => _basedOn; set { _basedOn = value; OnPropertyChangedByClr(nameof(BasedOn), value); } }

        private List<CodeableConcept>? _category;
        [JsonPropertyName("category")]
        public List<CodeableConcept>? Category { get => _category; set { _category = value; OnPropertyChangedByClr(nameof(Category), value); } }

        private List<Resource>? _contained;
        [JsonPropertyName("contained")]
        public List<Resource>? Contained { get => _contained; set { _contained = value; OnPropertyChangedByClr(nameof(Contained), value); } }

        private List<CodeableReference>? _device;
        [JsonPropertyName("device")]
        public List<CodeableReference>? Device { get => _device; set { _device = value; OnPropertyChangedByClr(nameof(Device), value); } }

        private MedicationAdministration_Dosage? _dosage;
        [JsonPropertyName("dosage")]
        public MedicationAdministration_Dosage? Dosage { get => _dosage; set { _dosage = value; OnPropertyChangedByClr(nameof(Dosage), value); } }

        /// <summary>
        /// Details of how medication was taken
        /// </summary>
        public partial class MedicationAdministration_Dosage : BackboneElement<MedicationAdministration_Dosage>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "MedicationAdministration_Dosage" : "medicationAdministration_Dosage";
            private Quantity? _dose;
        [JsonPropertyName("dose")]
        public Quantity? Dose { get => _dose; set { _dose = value; } }

            private CodeableConcept? _method;
        [JsonPropertyName("method")]
        public CodeableConcept? Method { get => _method; set { _method = value; } }

            private Ratio? _rateRatio;
        [JsonPropertyName("rateRatio")]
        public Ratio? RateRatio { get => _rateRatio; set { _rateRatio = value; if (value != null) {{ _rateQuantity = null; OnPropertyChanged("rateQuantity", null); }}; OnPropertyChanged("rateRatio", value); } }

            private Quantity? _rateQuantity;
        [JsonPropertyName("rateQuantity")]
        public Quantity? RateQuantity { get => _rateQuantity; set { _rateQuantity = value; if (value != null) {{ _rateRatio = null; OnPropertyChanged("rateRatio", null); }}; OnPropertyChanged("rateQuantity", value); } }

            private CodeableConcept? _route;
        [JsonPropertyName("route")]
        public CodeableConcept? Route { get => _route; set { _route = value; } }

            private CodeableConcept? _site;
        [JsonPropertyName("site")]
        public CodeableConcept? Site { get => _site; set { _site = value; } }

            private FhirString? _text;
        [JsonPropertyName("text")]
        public FhirString? Text { get => _text; set { _text = value; } }

        }

        private ReferenceType? _encounter;
        [JsonPropertyName("encounter")]
        public ReferenceType? Encounter { get => _encounter; set { _encounter = value; OnPropertyChangedByClr(nameof(Encounter), value); } }

        private List<ReferenceType>? _eventHistory;
        [JsonPropertyName("eventHistory")]
        public List<ReferenceType>? EventHistory { get => _eventHistory; set { _eventHistory = value; OnPropertyChangedByClr(nameof(EventHistory), value); } }

        private List<Identifier>? _identifier;
        [JsonPropertyName("identifier")]
        public List<Identifier>? Identifier { get => _identifier; set { _identifier = value; OnPropertyChangedByClr(nameof(Identifier), value); } }

        private FhirBoolean? _isSubPotent;
        [JsonPropertyName("isSubPotent")]
        public FhirBoolean? IsSubPotent { get => _isSubPotent; set { _isSubPotent = value; OnPropertyChangedByClr(nameof(IsSubPotent), value); } }

        private CodeableReference? _medication;
        [JsonPropertyName("medication")]
        public CodeableReference Medication { get => _medication ?? throw new InvalidOperationException("Medication is required"); set { _medication = value; OnPropertyChangedByClr(nameof(Medication), value); } }

        private List<Annotation>? _note;
        [JsonPropertyName("note")]
        public List<Annotation>? Note { get => _note; set { _note = value; OnPropertyChangedByClr(nameof(Note), value); } }

        private FhirDateTime? _occurenceDateTime;
        [JsonPropertyName("occurenceDateTime")]
        public FhirDateTime? OccurenceDateTime { get => _occurenceDateTime; set { _occurenceDateTime = value; if (value != null) {{ _occurencePeriod = null; OnPropertyChangedByClr(nameof(OccurencePeriod), null); _occurenceTiming = null; OnPropertyChangedByClr(nameof(OccurenceTiming), null); }}; OnPropertyChangedByClr(nameof(OccurenceDateTime), value); } }

        private Period? _occurencePeriod;
        [JsonPropertyName("occurencePeriod")]
        public Period? OccurencePeriod { get => _occurencePeriod; set { _occurencePeriod = value; if (value != null) {{ _occurenceDateTime = null; OnPropertyChangedByClr(nameof(OccurenceDateTime), null); _occurenceTiming = null; OnPropertyChangedByClr(nameof(OccurenceTiming), null); }}; OnPropertyChangedByClr(nameof(OccurencePeriod), value); } }

        private Timing? _occurenceTiming;
        [JsonPropertyName("occurenceTiming")]
        public Timing? OccurenceTiming { get => _occurenceTiming; set { _occurenceTiming = value; if (value != null) {{ _occurenceDateTime = null; OnPropertyChangedByClr(nameof(OccurenceDateTime), null); _occurencePeriod = null; OnPropertyChangedByClr(nameof(OccurencePeriod), null); }}; OnPropertyChangedByClr(nameof(OccurenceTiming), value); } }

        private List<ReferenceType>? _partOf;
        [JsonPropertyName("partOf")]
        public List<ReferenceType>? PartOf { get => _partOf; set { _partOf = value; OnPropertyChangedByClr(nameof(PartOf), value); } }

        private List<MedicationAdministration_Performer>? _performer;
        [JsonPropertyName("performer")]
        public List<MedicationAdministration_Performer>? Performer { get => _performer; set { _performer = value; OnPropertyChangedByClr(nameof(Performer), value); } }

        /// <summary>
        /// Who or what performed the medication administration and what type of performance they did
        /// </summary>
        public partial class MedicationAdministration_Performer : BackboneElement<MedicationAdministration_Performer>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "MedicationAdministration_Performer" : "medicationAdministration_Performer";
            private CodeableReference? _actor;
        [JsonPropertyName("actor")]
        public CodeableReference Actor { get => _actor ?? throw new InvalidOperationException("Actor is required"); set { _actor = value; } }

            private CodeableConcept? _function;
        [JsonPropertyName("function")]
        public CodeableConcept? Function { get => _function; set { _function = value; } }

        }

        private List<CodeableReference>? _reason;
        [JsonPropertyName("reason")]
        public List<CodeableReference>? Reason { get => _reason; set { _reason = value; OnPropertyChangedByClr(nameof(Reason), value); } }

        private FhirDateTime? _recorded;
        [JsonPropertyName("recorded")]
        public FhirDateTime? Recorded { get => _recorded; set { _recorded = value; OnPropertyChangedByClr(nameof(Recorded), value); } }

        private ReferenceType? _request;
        [JsonPropertyName("request")]
        public ReferenceType? Request { get => _request; set { _request = value; OnPropertyChangedByClr(nameof(Request), value); } }

        private FhirCode? _status;
        [JsonPropertyName("status")]
        public FhirCode Status { get => _status ?? throw new InvalidOperationException("Status is required"); set { _status = value; OnPropertyChangedByClr(nameof(Status), value); } }

        private List<CodeableConcept>? _statusReason;
        [JsonPropertyName("statusReason")]
        public List<CodeableConcept>? StatusReason { get => _statusReason; set { _statusReason = value; OnPropertyChangedByClr(nameof(StatusReason), value); } }

        private ReferenceType? _subject;
        [JsonPropertyName("subject")]
        public ReferenceType Subject { get => _subject ?? throw new InvalidOperationException("Subject is required"); set { _subject = value; OnPropertyChangedByClr(nameof(Subject), value); } }

        private List<CodeableConcept>? _subPotentReason;
        [JsonPropertyName("subPotentReason")]
        public List<CodeableConcept>? SubPotentReason { get => _subPotentReason; set { _subPotentReason = value; OnPropertyChangedByClr(nameof(SubPotentReason), value); } }

        private List<ReferenceType>? _supportingInformation;
        [JsonPropertyName("supportingInformation")]
        public List<ReferenceType>? SupportingInformation { get => _supportingInformation; set { _supportingInformation = value; OnPropertyChangedByClr(nameof(SupportingInformation), value); } }

        private Narrative? _text;
        [JsonPropertyName("text")]
        public Narrative? Text { get => _text; set { _text = value; OnPropertyChangedByClr(nameof(Text), value); } }

    }
}
