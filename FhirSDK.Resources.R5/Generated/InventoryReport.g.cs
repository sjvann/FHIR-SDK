// <auto-generated>
#nullable enable
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
using System.Text.Json.Nodes;
using System.Text.Json.Serialization;
using System.Linq;
using FhirCore.Base;
using DataTypeServices.TypeFramework;
using DataTypeServices.DataTypes.MetaTypes;
namespace FhirSDK.Resources.R5
{
    /// <summary>
    /// A report of inventory or stock items
    /// </summary>
    public partial class InventoryReport : ResourceBase
    {
        public override string ResourceType => "InventoryReport";

        public InventoryReport() { }
        public InventoryReport(string json) { SetRawFrom(JsonNode.Parse(json)); }
        public InventoryReport(JsonNode? source) { SetRawFrom(source); }
        protected override void OnPropertyChanged(string propertyName, object? newValue) { base.OnPropertyChanged(propertyName, newValue); }

        private List<Resource>? _contained;
        [JsonPropertyName("contained")]
        public List<Resource>? Contained { get => _contained; set { _contained = value; OnPropertyChangedByClr(nameof(Contained), value); } }

        private FhirCode? _countType;
        [JsonPropertyName("countType")]
        public FhirCode CountType { get => _countType ?? throw new InvalidOperationException("CountType is required"); set { _countType = value; OnPropertyChangedByClr(nameof(CountType), value); } }

        private List<Identifier>? _identifier;
        [JsonPropertyName("identifier")]
        public List<Identifier>? Identifier { get => _identifier; set { _identifier = value; OnPropertyChangedByClr(nameof(Identifier), value); } }

        private List<InventoryReport_InventoryListing>? _inventoryListing;
        [JsonPropertyName("inventoryListing")]
        public List<InventoryReport_InventoryListing>? InventoryListing { get => _inventoryListing; set { _inventoryListing = value; OnPropertyChangedByClr(nameof(InventoryListing), value); } }

        /// <summary>
        /// An inventory listing section (grouped by any of the attributes)
        /// </summary>
        public partial class InventoryReport_InventoryListing : BackboneElement<InventoryReport_InventoryListing>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "InventoryReport_InventoryListing" : "inventoryReport_InventoryListing";
            private FhirDateTime? _countingDateTime;
        [JsonPropertyName("countingDateTime")]
        public FhirDateTime? CountingDateTime { get => _countingDateTime; set { _countingDateTime = value; } }

            private List<InventoryReport_InventoryListing_Item>? _item;
        [JsonPropertyName("item")]
        public List<InventoryReport_InventoryListing_Item>? Item { get => _item; set { _item = value; } }

            /// <summary>
            /// The item or items in this listing
            /// </summary>
            public partial class InventoryReport_InventoryListing_Item : BackboneElement<InventoryReport_InventoryListing_Item>
            {
                public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "InventoryReport_InventoryListing_Item" : "inventoryReport_InventoryListing_Item";
                private CodeableConcept? _category;
        [JsonPropertyName("category")]
        public CodeableConcept? Category { get => _category; set { _category = value; } }

                private CodeableReference? _item;
        [JsonPropertyName("item")]
        public CodeableReference Item { get => _item ?? throw new InvalidOperationException("Item is required"); set { _item = value; } }

                private Quantity? _quantity;
        [JsonPropertyName("quantity")]
        public Quantity Quantity { get => _quantity ?? throw new InvalidOperationException("Quantity is required"); set { _quantity = value; } }

            }

            private CodeableConcept? _itemStatus;
        [JsonPropertyName("itemStatus")]
        public CodeableConcept? ItemStatus { get => _itemStatus; set { _itemStatus = value; } }

            private ReferenceType? _location;
        [JsonPropertyName("location")]
        public ReferenceType? Location { get => _location; set { _location = value; } }

        }

        private List<Annotation>? _note;
        [JsonPropertyName("note")]
        public List<Annotation>? Note { get => _note; set { _note = value; OnPropertyChangedByClr(nameof(Note), value); } }

        private CodeableConcept? _operationType;
        [JsonPropertyName("operationType")]
        public CodeableConcept? OperationType { get => _operationType; set { _operationType = value; OnPropertyChangedByClr(nameof(OperationType), value); } }

        private CodeableConcept? _operationTypeReason;
        [JsonPropertyName("operationTypeReason")]
        public CodeableConcept? OperationTypeReason { get => _operationTypeReason; set { _operationTypeReason = value; OnPropertyChangedByClr(nameof(OperationTypeReason), value); } }

        private FhirDateTime? _reportedDateTime;
        [JsonPropertyName("reportedDateTime")]
        public FhirDateTime ReportedDateTime { get => _reportedDateTime ?? throw new InvalidOperationException("ReportedDateTime is required"); set { _reportedDateTime = value; OnPropertyChangedByClr(nameof(ReportedDateTime), value); } }

        private ReferenceType? _reporter;
        [JsonPropertyName("reporter")]
        public ReferenceType? Reporter { get => _reporter; set { _reporter = value; OnPropertyChangedByClr(nameof(Reporter), value); } }

        private Period? _reportingPeriod;
        [JsonPropertyName("reportingPeriod")]
        public Period? ReportingPeriod { get => _reportingPeriod; set { _reportingPeriod = value; OnPropertyChangedByClr(nameof(ReportingPeriod), value); } }

        private FhirCode? _status;
        [JsonPropertyName("status")]
        public FhirCode Status { get => _status ?? throw new InvalidOperationException("Status is required"); set { _status = value; OnPropertyChangedByClr(nameof(Status), value); } }

        private Narrative? _text;
        [JsonPropertyName("text")]
        public Narrative? Text { get => _text; set { _text = value; OnPropertyChangedByClr(nameof(Text), value); } }

    }
}
