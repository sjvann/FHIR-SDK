// <auto-generated>
#nullable enable
using System.Collections.Generic;
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
namespace FhirSDK.Resources.R5
{
    public static class ScheduleFluentExtensions
    {
        public static Schedule WithActive(this Schedule r, FhirBoolean value) { r.Active = value; return r; }
        public static Schedule AddActor(this Schedule r, ReferenceType item) { r.Actor ??= new List<ReferenceType>(); r.Actor!.Add(item); return r; }
        public static Schedule WithComment(this Schedule r, FhirMarkdown value) { r.Comment = value; return r; }
        public static Schedule AddContained(this Schedule r, Resource item) { r.Contained ??= new List<Resource>(); r.Contained!.Add(item); return r; }
        public static Schedule AddIdentifier(this Schedule r, Identifier item) { r.Identifier ??= new List<Identifier>(); r.Identifier!.Add(item); return r; }
        public static Schedule WithName(this Schedule r, FhirString value) { r.Name = value; return r; }
        public static Schedule WithPlanningHorizon(this Schedule r, Period value) { r.PlanningHorizon = value; return r; }
        public static Schedule AddServiceCategory(this Schedule r, CodeableConcept item) { r.ServiceCategory ??= new List<CodeableConcept>(); r.ServiceCategory!.Add(item); return r; }
        public static Schedule AddServiceType(this Schedule r, CodeableReference item) { r.ServiceType ??= new List<CodeableReference>(); r.ServiceType!.Add(item); return r; }
        public static Schedule AddSpecialty(this Schedule r, CodeableConcept item) { r.Specialty ??= new List<CodeableConcept>(); r.Specialty!.Add(item); return r; }
        public static Schedule WithText(this Schedule r, Narrative value) { r.Text = value; return r; }
    }
}
