// <auto-generated>
#nullable enable
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
using System.Text.Json.Nodes;
using System.Text.Json.Serialization;
using System.Linq;
using FhirCore.Base;
using DataTypeServices.TypeFramework;
using DataTypeServices.DataTypes.MetaTypes;
namespace FhirSDK.Resources.R5
{
    /// <summary>
    /// Definition of an operation or a named query
    /// </summary>
    public partial class OperationDefinition : ResourceBase
    {
        public override string ResourceType => "OperationDefinition";

        public OperationDefinition() { }
        public OperationDefinition(string json) { SetRawFrom(JsonNode.Parse(json)); }
        public OperationDefinition(JsonNode? source) { SetRawFrom(source); }
        protected override void OnPropertyChanged(string propertyName, object? newValue) { base.OnPropertyChanged(propertyName, newValue); }

        private FhirBoolean? _affectsState;
        [JsonPropertyName("affectsState")]
        public FhirBoolean? AffectsState { get => _affectsState; set { _affectsState = value; OnPropertyChangedByClr(nameof(AffectsState), value); } }

        private FhirCanonical? _base;
        [JsonPropertyName("base")]
        public FhirCanonical? Base { get => _base; set { _base = value; OnPropertyChangedByClr(nameof(Base), value); } }

        private FhirCode? _code;
        [JsonPropertyName("code")]
        public FhirCode Code { get => _code ?? throw new InvalidOperationException("Code is required"); set { _code = value; OnPropertyChangedByClr(nameof(Code), value); } }

        private FhirMarkdown? _comment;
        [JsonPropertyName("comment")]
        public FhirMarkdown? Comment { get => _comment; set { _comment = value; OnPropertyChangedByClr(nameof(Comment), value); } }

        private List<ContactDetail>? _contact;
        [JsonPropertyName("contact")]
        public List<ContactDetail>? Contact { get => _contact; set { _contact = value; OnPropertyChangedByClr(nameof(Contact), value); } }

        private List<Resource>? _contained;
        [JsonPropertyName("contained")]
        public List<Resource>? Contained { get => _contained; set { _contained = value; OnPropertyChangedByClr(nameof(Contained), value); } }

        private FhirMarkdown? _copyright;
        [JsonPropertyName("copyright")]
        public FhirMarkdown? Copyright { get => _copyright; set { _copyright = value; OnPropertyChangedByClr(nameof(Copyright), value); } }

        private FhirString? _copyrightLabel;
        [JsonPropertyName("copyrightLabel")]
        public FhirString? CopyrightLabel { get => _copyrightLabel; set { _copyrightLabel = value; OnPropertyChangedByClr(nameof(CopyrightLabel), value); } }

        private FhirDateTime? _date;
        [JsonPropertyName("date")]
        public FhirDateTime? Date { get => _date; set { _date = value; OnPropertyChangedByClr(nameof(Date), value); } }

        private FhirMarkdown? _description;
        [JsonPropertyName("description")]
        public FhirMarkdown? Description { get => _description; set { _description = value; OnPropertyChangedByClr(nameof(Description), value); } }

        private FhirBoolean? _experimental;
        [JsonPropertyName("experimental")]
        public FhirBoolean? Experimental { get => _experimental; set { _experimental = value; OnPropertyChangedByClr(nameof(Experimental), value); } }

        private List<Identifier>? _identifier;
        [JsonPropertyName("identifier")]
        public List<Identifier>? Identifier { get => _identifier; set { _identifier = value; OnPropertyChangedByClr(nameof(Identifier), value); } }

        private FhirCanonical? _inputProfile;
        [JsonPropertyName("inputProfile")]
        public FhirCanonical? InputProfile { get => _inputProfile; set { _inputProfile = value; OnPropertyChangedByClr(nameof(InputProfile), value); } }

        private FhirBoolean? _instance;
        [JsonPropertyName("instance")]
        public FhirBoolean Instance { get => _instance ?? throw new InvalidOperationException("Instance is required"); set { _instance = value; OnPropertyChangedByClr(nameof(Instance), value); } }

        private List<CodeableConcept>? _jurisdiction;
        [JsonPropertyName("jurisdiction")]
        public List<CodeableConcept>? Jurisdiction { get => _jurisdiction; set { _jurisdiction = value; OnPropertyChangedByClr(nameof(Jurisdiction), value); } }

        private FhirCode? _kind;
        [JsonPropertyName("kind")]
        public FhirCode Kind { get => _kind ?? throw new InvalidOperationException("Kind is required"); set { _kind = value; OnPropertyChangedByClr(nameof(Kind), value); } }

        private FhirString? _name;
        [JsonPropertyName("name")]
        public FhirString Name { get => _name ?? throw new InvalidOperationException("Name is required"); set { _name = value; OnPropertyChangedByClr(nameof(Name), value); } }

        private FhirCanonical? _outputProfile;
        [JsonPropertyName("outputProfile")]
        public FhirCanonical? OutputProfile { get => _outputProfile; set { _outputProfile = value; OnPropertyChangedByClr(nameof(OutputProfile), value); } }

        private List<OperationDefinition_Overload>? _overload;
        [JsonPropertyName("overload")]
        public List<OperationDefinition_Overload>? Overload { get => _overload; set { _overload = value; OnPropertyChangedByClr(nameof(Overload), value); } }

        /// <summary>
        /// Define overloaded variants for when  generating code
        /// </summary>
        public partial class OperationDefinition_Overload : BackboneElement<OperationDefinition_Overload>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "OperationDefinition_Overload" : "operationDefinition_Overload";
            private FhirString? _comment;
        [JsonPropertyName("comment")]
        public FhirString? Comment { get => _comment; set { _comment = value; } }

            private List<FhirString>? _parameterName;
        [JsonPropertyName("parameterName")]
        public List<FhirString>? ParameterName { get => _parameterName; set { _parameterName = value; } }

        }

        private List<OperationDefinition_Parameter>? _parameter;
        [JsonPropertyName("parameter")]
        public List<OperationDefinition_Parameter>? Parameter { get => _parameter; set { _parameter = value; OnPropertyChangedByClr(nameof(Parameter), value); } }

        /// <summary>
        /// Parameters for the operation/query
        /// </summary>
        public partial class OperationDefinition_Parameter : BackboneElement<OperationDefinition_Parameter>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "OperationDefinition_Parameter" : "operationDefinition_Parameter";
            private List<FhirCode>? _allowedType;
        [JsonPropertyName("allowedType")]
        public List<FhirCode>? AllowedType { get => _allowedType; set { _allowedType = value; } }

            private OperationDefinition_Parameter_Binding? _binding;
        [JsonPropertyName("binding")]
        public OperationDefinition_Parameter_Binding? Binding { get => _binding; set { _binding = value; } }

            /// <summary>
            /// ValueSet details if this is coded
            /// </summary>
            public partial class OperationDefinition_Parameter_Binding : BackboneElement<OperationDefinition_Parameter_Binding>
            {
                public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "OperationDefinition_Parameter_Binding" : "operationDefinition_Parameter_Binding";
                private FhirCode? _strength;
        [JsonPropertyName("strength")]
        public FhirCode Strength { get => _strength ?? throw new InvalidOperationException("Strength is required"); set { _strength = value; } }

                private FhirCanonical? _valueSet;
        [JsonPropertyName("valueSet")]
        public FhirCanonical ValueSet { get => _valueSet ?? throw new InvalidOperationException("ValueSet is required"); set { _valueSet = value; } }

            }

            private FhirMarkdown? _documentation;
        [JsonPropertyName("documentation")]
        public FhirMarkdown? Documentation { get => _documentation; set { _documentation = value; } }

            private FhirString? _max;
        [JsonPropertyName("max")]
        public FhirString Max { get => _max ?? throw new InvalidOperationException("Max is required"); set { _max = value; } }

            private FhirInteger? _min;
        [JsonPropertyName("min")]
        public FhirInteger Min { get => _min ?? throw new InvalidOperationException("Min is required"); set { _min = value; } }

            private FhirCode? _name;
        [JsonPropertyName("name")]
        public FhirCode Name { get => _name ?? throw new InvalidOperationException("Name is required"); set { _name = value; } }

            private List<FhirString>? _part;
        [JsonPropertyName("part")]
        public List<FhirString>? Part { get => _part; set { _part = value; } }

            private List<OperationDefinition_Parameter_ReferencedFrom>? _referencedFrom;
        [JsonPropertyName("referencedFrom")]
        public List<OperationDefinition_Parameter_ReferencedFrom>? ReferencedFrom { get => _referencedFrom; set { _referencedFrom = value; } }

            /// <summary>
            /// References to this parameter
            /// </summary>
            public partial class OperationDefinition_Parameter_ReferencedFrom : BackboneElement<OperationDefinition_Parameter_ReferencedFrom>
            {
                public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "OperationDefinition_Parameter_ReferencedFrom" : "operationDefinition_Parameter_ReferencedFrom";
                private FhirString? _source;
        [JsonPropertyName("source")]
        public FhirString Source { get => _source ?? throw new InvalidOperationException("Source is required"); set { _source = value; } }

                private FhirString? _sourceId;
        [JsonPropertyName("sourceId")]
        public FhirString? SourceId { get => _sourceId; set { _sourceId = value; } }

            }

            private List<FhirCode>? _scope;
        [JsonPropertyName("scope")]
        public List<FhirCode>? Scope { get => _scope; set { _scope = value; } }

            private FhirCode? _searchType;
        [JsonPropertyName("searchType")]
        public FhirCode? SearchType { get => _searchType; set { _searchType = value; } }

            private List<FhirCanonical>? _targetProfile;
        [JsonPropertyName("targetProfile")]
        public List<FhirCanonical>? TargetProfile { get => _targetProfile; set { _targetProfile = value; } }

            private FhirCode? _type;
        [JsonPropertyName("type")]
        public FhirCode? Type { get => _type; set { _type = value; } }

            private FhirCode? _use;
        [JsonPropertyName("use")]
        public FhirCode Use { get => _use ?? throw new InvalidOperationException("Use is required"); set { _use = value; } }

        }

        private FhirString? _publisher;
        [JsonPropertyName("publisher")]
        public FhirString? Publisher { get => _publisher; set { _publisher = value; OnPropertyChangedByClr(nameof(Publisher), value); } }

        private FhirMarkdown? _purpose;
        [JsonPropertyName("purpose")]
        public FhirMarkdown? Purpose { get => _purpose; set { _purpose = value; OnPropertyChangedByClr(nameof(Purpose), value); } }

        private List<FhirCode>? _resource;
        [JsonPropertyName("resource")]
        public List<FhirCode>? Resource { get => _resource; set { _resource = value; OnPropertyChangedByClr(nameof(Resource), value); } }

        private FhirCode? _status;
        [JsonPropertyName("status")]
        public FhirCode Status { get => _status ?? throw new InvalidOperationException("Status is required"); set { _status = value; OnPropertyChangedByClr(nameof(Status), value); } }

        private FhirBoolean? _system;
        [JsonPropertyName("system")]
        public FhirBoolean System { get => _system ?? throw new InvalidOperationException("System is required"); set { _system = value; OnPropertyChangedByClr(nameof(System), value); } }

        private Narrative? _text;
        [JsonPropertyName("text")]
        public Narrative? Text { get => _text; set { _text = value; OnPropertyChangedByClr(nameof(Text), value); } }

        private FhirString? _title;
        [JsonPropertyName("title")]
        public FhirString? Title { get => _title; set { _title = value; OnPropertyChangedByClr(nameof(Title), value); } }

        private FhirBoolean? _type;
        [JsonPropertyName("type")]
        public FhirBoolean Type { get => _type ?? throw new InvalidOperationException("Type is required"); set { _type = value; OnPropertyChangedByClr(nameof(Type), value); } }

        private FhirUri? _url;
        [JsonPropertyName("url")]
        public FhirUri? Url { get => _url; set { _url = value; OnPropertyChangedByClr(nameof(Url), value); } }

        private List<UsageContext>? _useContext;
        [JsonPropertyName("useContext")]
        public List<UsageContext>? UseContext { get => _useContext; set { _useContext = value; OnPropertyChangedByClr(nameof(UseContext), value); } }

        private FhirString? _version;
        [JsonPropertyName("version")]
        public FhirString? Version { get => _version; set { _version = value; OnPropertyChangedByClr(nameof(Version), value); } }

        private FhirString? _versionAlgorithmString;
        [JsonPropertyName("versionAlgorithmString")]
        public FhirString? VersionAlgorithmString { get => _versionAlgorithmString; set { _versionAlgorithmString = value; if (value != null) {{ _versionAlgorithmCoding = null; OnPropertyChangedByClr(nameof(VersionAlgorithmCoding), null); }}; OnPropertyChangedByClr(nameof(VersionAlgorithmString), value); } }

        private Coding? _versionAlgorithmCoding;
        [JsonPropertyName("versionAlgorithmCoding")]
        public Coding? VersionAlgorithmCoding { get => _versionAlgorithmCoding; set { _versionAlgorithmCoding = value; if (value != null) {{ _versionAlgorithmString = null; OnPropertyChangedByClr(nameof(VersionAlgorithmString), null); }}; OnPropertyChangedByClr(nameof(VersionAlgorithmCoding), value); } }

    }
}
