// <auto-generated>
#nullable enable
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
using System.Text.Json.Nodes;
using System.Text.Json.Serialization;
using System.Linq;
using FhirCore.Base;
using DataTypeServices.TypeFramework;
using DataTypeServices.DataTypes.MetaTypes;
namespace FhirSDK.Resources.R5
{
    /// <summary>
    /// The formal response to a guidance request
    /// </summary>
    public partial class GuidanceResponse : ResourceBase
    {
        public override string ResourceType => "GuidanceResponse";

        public GuidanceResponse() { }
        public GuidanceResponse(string json) { SetRawFrom(JsonNode.Parse(json)); }
        public GuidanceResponse(JsonNode? source) { SetRawFrom(source); }
        protected override void OnPropertyChanged(string propertyName, object? newValue) { base.OnPropertyChanged(propertyName, newValue); }

        private List<Resource>? _contained;
        [JsonPropertyName("contained")]
        public List<Resource>? Contained { get => _contained; set { _contained = value; OnPropertyChangedByClr(nameof(Contained), value); } }

        private List<DataRequirement>? _dataRequirement;
        [JsonPropertyName("dataRequirement")]
        public List<DataRequirement>? DataRequirement { get => _dataRequirement; set { _dataRequirement = value; OnPropertyChangedByClr(nameof(DataRequirement), value); } }

        private ReferenceType? _encounter;
        [JsonPropertyName("encounter")]
        public ReferenceType? Encounter { get => _encounter; set { _encounter = value; OnPropertyChangedByClr(nameof(Encounter), value); } }

        private ReferenceType? _evaluationMessage;
        [JsonPropertyName("evaluationMessage")]
        public ReferenceType? EvaluationMessage { get => _evaluationMessage; set { _evaluationMessage = value; OnPropertyChangedByClr(nameof(EvaluationMessage), value); } }

        private List<Identifier>? _identifier;
        [JsonPropertyName("identifier")]
        public List<Identifier>? Identifier { get => _identifier; set { _identifier = value; OnPropertyChangedByClr(nameof(Identifier), value); } }

        private FhirUri? _moduleuri;
        [JsonPropertyName("moduleuri")]
        public FhirUri? Moduleuri { get => _moduleuri; set { _moduleuri = value; if (value != null) {{ _modulecanonical = null; OnPropertyChangedByClr(nameof(Modulecanonical), null); _moduleCodeableConcept = null; OnPropertyChangedByClr(nameof(ModuleCodeableConcept), null); }}; OnPropertyChangedByClr(nameof(Moduleuri), value); } }

        private FhirCanonical? _modulecanonical;
        [JsonPropertyName("modulecanonical")]
        public FhirCanonical? Modulecanonical { get => _modulecanonical; set { _modulecanonical = value; if (value != null) {{ _moduleuri = null; OnPropertyChangedByClr(nameof(Moduleuri), null); _moduleCodeableConcept = null; OnPropertyChangedByClr(nameof(ModuleCodeableConcept), null); }}; OnPropertyChangedByClr(nameof(Modulecanonical), value); } }

        private CodeableConcept? _moduleCodeableConcept;
        [JsonPropertyName("moduleCodeableConcept")]
        public CodeableConcept? ModuleCodeableConcept { get => _moduleCodeableConcept; set { _moduleCodeableConcept = value; if (value != null) {{ _moduleuri = null; OnPropertyChangedByClr(nameof(Moduleuri), null); _modulecanonical = null; OnPropertyChangedByClr(nameof(Modulecanonical), null); }}; OnPropertyChangedByClr(nameof(ModuleCodeableConcept), value); } }

        private List<Annotation>? _note;
        [JsonPropertyName("note")]
        public List<Annotation>? Note { get => _note; set { _note = value; OnPropertyChangedByClr(nameof(Note), value); } }

        private FhirDateTime? _occurrenceDateTime;
        [JsonPropertyName("occurrenceDateTime")]
        public FhirDateTime? OccurrenceDateTime { get => _occurrenceDateTime; set { _occurrenceDateTime = value; OnPropertyChangedByClr(nameof(OccurrenceDateTime), value); } }

        private ReferenceType? _outputParameters;
        [JsonPropertyName("outputParameters")]
        public ReferenceType? OutputParameters { get => _outputParameters; set { _outputParameters = value; OnPropertyChangedByClr(nameof(OutputParameters), value); } }

        private ReferenceType? _performer;
        [JsonPropertyName("performer")]
        public ReferenceType? Performer { get => _performer; set { _performer = value; OnPropertyChangedByClr(nameof(Performer), value); } }

        private List<CodeableReference>? _reason;
        [JsonPropertyName("reason")]
        public List<CodeableReference>? Reason { get => _reason; set { _reason = value; OnPropertyChangedByClr(nameof(Reason), value); } }

        private Identifier? _requestIdentifier;
        [JsonPropertyName("requestIdentifier")]
        public Identifier? RequestIdentifier { get => _requestIdentifier; set { _requestIdentifier = value; OnPropertyChangedByClr(nameof(RequestIdentifier), value); } }

        private List<ReferenceType>? _result;
        [JsonPropertyName("result")]
        public List<ReferenceType>? Result { get => _result; set { _result = value; OnPropertyChangedByClr(nameof(Result), value); } }

        private FhirCode? _status;
        [JsonPropertyName("status")]
        public FhirCode Status { get => _status ?? throw new InvalidOperationException("Status is required"); set { _status = value; OnPropertyChangedByClr(nameof(Status), value); } }

        private ReferenceType? _subject;
        [JsonPropertyName("subject")]
        public ReferenceType? Subject { get => _subject; set { _subject = value; OnPropertyChangedByClr(nameof(Subject), value); } }

        private Narrative? _text;
        [JsonPropertyName("text")]
        public Narrative? Text { get => _text; set { _text = value; OnPropertyChangedByClr(nameof(Text), value); } }

    }
}
