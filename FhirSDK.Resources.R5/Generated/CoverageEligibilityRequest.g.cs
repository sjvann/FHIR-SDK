// <auto-generated>
#nullable enable
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
using System.Text.Json.Nodes;
using System.Text.Json.Serialization;
using System.Linq;
using FhirCore.Base;
using DataTypeServices.TypeFramework;
using DataTypeServices.DataTypes.MetaTypes;
namespace FhirSDK.Resources.R5
{
    /// <summary>
    /// CoverageEligibilityRequest resource
    /// </summary>
    public partial class CoverageEligibilityRequest : ResourceBase
    {
        public override string ResourceType => "CoverageEligibilityRequest";

        public CoverageEligibilityRequest() { }
        public CoverageEligibilityRequest(string json) { SetRawFrom(JsonNode.Parse(json)); }
        public CoverageEligibilityRequest(JsonNode? source) { SetRawFrom(source); }
        protected override void OnPropertyChanged(string propertyName, object? newValue) { base.OnPropertyChanged(propertyName, newValue); }

        private List<Resource>? _contained;
        [JsonPropertyName("contained")]
        public List<Resource>? Contained { get => _contained; set { _contained = value; OnPropertyChangedByClr(nameof(Contained), value); } }

        private FhirDateTime? _created;
        [JsonPropertyName("created")]
        public FhirDateTime Created { get => _created ?? throw new InvalidOperationException("Created is required"); set { _created = value; OnPropertyChangedByClr(nameof(Created), value); } }

        private ReferenceType? _enterer;
        [JsonPropertyName("enterer")]
        public ReferenceType? Enterer { get => _enterer; set { _enterer = value; OnPropertyChangedByClr(nameof(Enterer), value); } }

        private List<CoverageEligibilityRequest_Event>? _event;
        [JsonPropertyName("event")]
        public List<CoverageEligibilityRequest_Event>? Event { get => _event; set { _event = value; OnPropertyChangedByClr(nameof(Event), value); } }

        /// <summary>
        /// Event information
        /// </summary>
        public partial class CoverageEligibilityRequest_Event : BackboneElement<CoverageEligibilityRequest_Event>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "CoverageEligibilityRequest_Event" : "coverageEligibilityRequest_Event";
            private CodeableConcept? _type;
        [JsonPropertyName("type")]
        public CodeableConcept Type { get => _type ?? throw new InvalidOperationException("Type is required"); set { _type = value; } }

            private FhirDateTime? _whenDateTime;
        [JsonPropertyName("whenDateTime")]
        public FhirDateTime? WhenDateTime { get => _whenDateTime; set { _whenDateTime = value; if (value != null) {{ _whenPeriod = null; OnPropertyChanged("whenPeriod", null); }}; OnPropertyChanged("whenDateTime", value); } }

            private Period? _whenPeriod;
        [JsonPropertyName("whenPeriod")]
        public Period? WhenPeriod { get => _whenPeriod; set { _whenPeriod = value; if (value != null) {{ _whenDateTime = null; OnPropertyChanged("whenDateTime", null); }}; OnPropertyChanged("whenPeriod", value); } }

        }

        private ReferenceType? _facility;
        [JsonPropertyName("facility")]
        public ReferenceType? Facility { get => _facility; set { _facility = value; OnPropertyChangedByClr(nameof(Facility), value); } }

        private List<Identifier>? _identifier;
        [JsonPropertyName("identifier")]
        public List<Identifier>? Identifier { get => _identifier; set { _identifier = value; OnPropertyChangedByClr(nameof(Identifier), value); } }

        private List<CoverageEligibilityRequest_Insurance>? _insurance;
        [JsonPropertyName("insurance")]
        public List<CoverageEligibilityRequest_Insurance>? Insurance { get => _insurance; set { _insurance = value; OnPropertyChangedByClr(nameof(Insurance), value); } }

        /// <summary>
        /// Patient insurance information
        /// </summary>
        public partial class CoverageEligibilityRequest_Insurance : BackboneElement<CoverageEligibilityRequest_Insurance>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "CoverageEligibilityRequest_Insurance" : "coverageEligibilityRequest_Insurance";
            private FhirString? _businessArrangement;
        [JsonPropertyName("businessArrangement")]
        public FhirString? BusinessArrangement { get => _businessArrangement; set { _businessArrangement = value; } }

            private ReferenceType? _coverage;
        [JsonPropertyName("coverage")]
        public ReferenceType Coverage { get => _coverage ?? throw new InvalidOperationException("Coverage is required"); set { _coverage = value; } }

            private FhirBoolean? _focal;
        [JsonPropertyName("focal")]
        public FhirBoolean? Focal { get => _focal; set { _focal = value; } }

        }

        private ReferenceType? _insurer;
        [JsonPropertyName("insurer")]
        public ReferenceType Insurer { get => _insurer ?? throw new InvalidOperationException("Insurer is required"); set { _insurer = value; OnPropertyChangedByClr(nameof(Insurer), value); } }

        private List<CoverageEligibilityRequest_Item>? _item;
        [JsonPropertyName("item")]
        public List<CoverageEligibilityRequest_Item>? Item { get => _item; set { _item = value; OnPropertyChangedByClr(nameof(Item), value); } }

        /// <summary>
        /// Item to be evaluated for eligibiity
        /// </summary>
        public partial class CoverageEligibilityRequest_Item : BackboneElement<CoverageEligibilityRequest_Item>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "CoverageEligibilityRequest_Item" : "coverageEligibilityRequest_Item";
            private CodeableConcept? _category;
        [JsonPropertyName("category")]
        public CodeableConcept? Category { get => _category; set { _category = value; } }

            private List<ReferenceType>? _detail;
        [JsonPropertyName("detail")]
        public List<ReferenceType>? Detail { get => _detail; set { _detail = value; } }

            private List<CoverageEligibilityRequest_Item_Diagnosis>? _diagnosis;
        [JsonPropertyName("diagnosis")]
        public List<CoverageEligibilityRequest_Item_Diagnosis>? Diagnosis { get => _diagnosis; set { _diagnosis = value; } }

            /// <summary>
            /// Applicable diagnosis
            /// </summary>
            public partial class CoverageEligibilityRequest_Item_Diagnosis : BackboneElement<CoverageEligibilityRequest_Item_Diagnosis>
            {
                public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "CoverageEligibilityRequest_Item_Diagnosis" : "coverageEligibilityRequest_Item_Diagnosis";
                private CodeableConcept? _diagnosisCodeableConcept;
        [JsonPropertyName("diagnosisCodeableConcept")]
        public CodeableConcept? DiagnosisCodeableConcept { get => _diagnosisCodeableConcept; set { _diagnosisCodeableConcept = value; if (value != null) {{ _diagnosisReference = null; OnPropertyChanged("diagnosisReference", null); }}; OnPropertyChanged("diagnosisCodeableConcept", value); } }

                private ReferenceType? _diagnosisReference;
        [JsonPropertyName("diagnosisReference")]
        public ReferenceType? DiagnosisReference { get => _diagnosisReference; set { _diagnosisReference = value; if (value != null) {{ _diagnosisCodeableConcept = null; OnPropertyChanged("diagnosisCodeableConcept", null); }}; OnPropertyChanged("diagnosisReference", value); } }

            }

            private ReferenceType? _facility;
        [JsonPropertyName("facility")]
        public ReferenceType? Facility { get => _facility; set { _facility = value; } }

            private List<CodeableConcept>? _modifier;
        [JsonPropertyName("modifier")]
        public List<CodeableConcept>? Modifier { get => _modifier; set { _modifier = value; } }

            private CodeableConcept? _productOrService;
        [JsonPropertyName("productOrService")]
        public CodeableConcept? ProductOrService { get => _productOrService; set { _productOrService = value; } }

            private ReferenceType? _provider;
        [JsonPropertyName("provider")]
        public ReferenceType? Provider { get => _provider; set { _provider = value; } }

            private Quantity? _quantity;
        [JsonPropertyName("quantity")]
        public Quantity? Quantity { get => _quantity; set { _quantity = value; } }

            private List<FhirPositiveInt>? _supportingInfoSequence;
        [JsonPropertyName("supportingInfoSequence")]
        public List<FhirPositiveInt>? SupportingInfoSequence { get => _supportingInfoSequence; set { _supportingInfoSequence = value; } }

            private Money? _unitPrice;
        [JsonPropertyName("unitPrice")]
        public Money? UnitPrice { get => _unitPrice; set { _unitPrice = value; } }

        }

        private ReferenceType? _patient;
        [JsonPropertyName("patient")]
        public ReferenceType Patient { get => _patient ?? throw new InvalidOperationException("Patient is required"); set { _patient = value; OnPropertyChangedByClr(nameof(Patient), value); } }

        private CodeableConcept? _priority;
        [JsonPropertyName("priority")]
        public CodeableConcept? Priority { get => _priority; set { _priority = value; OnPropertyChangedByClr(nameof(Priority), value); } }

        private ReferenceType? _provider;
        [JsonPropertyName("provider")]
        public ReferenceType? Provider { get => _provider; set { _provider = value; OnPropertyChangedByClr(nameof(Provider), value); } }

        private List<FhirCode> _purpose = new();
        [JsonPropertyName("purpose")]
        public List<FhirCode> Purpose { get => _purpose; set { _purpose = value; OnPropertyChangedByClr(nameof(Purpose), value); } }

        private FhirDate? _serviceddate;
        [JsonPropertyName("serviceddate")]
        public FhirDate? Serviceddate { get => _serviceddate; set { _serviceddate = value; if (value != null) {{ _servicedPeriod = null; OnPropertyChangedByClr(nameof(ServicedPeriod), null); }}; OnPropertyChangedByClr(nameof(Serviceddate), value); } }

        private Period? _servicedPeriod;
        [JsonPropertyName("servicedPeriod")]
        public Period? ServicedPeriod { get => _servicedPeriod; set { _servicedPeriod = value; if (value != null) {{ _serviceddate = null; OnPropertyChangedByClr(nameof(Serviceddate), null); }}; OnPropertyChangedByClr(nameof(ServicedPeriod), value); } }

        private FhirCode? _status;
        [JsonPropertyName("status")]
        public FhirCode Status { get => _status ?? throw new InvalidOperationException("Status is required"); set { _status = value; OnPropertyChangedByClr(nameof(Status), value); } }

        private List<CoverageEligibilityRequest_SupportingInfo>? _supportingInfo;
        [JsonPropertyName("supportingInfo")]
        public List<CoverageEligibilityRequest_SupportingInfo>? SupportingInfo { get => _supportingInfo; set { _supportingInfo = value; OnPropertyChangedByClr(nameof(SupportingInfo), value); } }

        /// <summary>
        /// Supporting information
        /// </summary>
        public partial class CoverageEligibilityRequest_SupportingInfo : BackboneElement<CoverageEligibilityRequest_SupportingInfo>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "CoverageEligibilityRequest_SupportingInfo" : "coverageEligibilityRequest_SupportingInfo";
            private FhirBoolean? _appliesToAll;
        [JsonPropertyName("appliesToAll")]
        public FhirBoolean? AppliesToAll { get => _appliesToAll; set { _appliesToAll = value; } }

            private ReferenceType? _information;
        [JsonPropertyName("information")]
        public ReferenceType Information { get => _information ?? throw new InvalidOperationException("Information is required"); set { _information = value; } }

            private FhirPositiveInt? _sequence;
        [JsonPropertyName("sequence")]
        public FhirPositiveInt Sequence { get => _sequence ?? throw new InvalidOperationException("Sequence is required"); set { _sequence = value; } }

        }

        private Narrative? _text;
        [JsonPropertyName("text")]
        public Narrative? Text { get => _text; set { _text = value; OnPropertyChangedByClr(nameof(Text), value); } }

    }
}
