// <auto-generated>
#nullable enable
using System.Collections.Generic;
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
namespace FhirSDK.Resources.R5
{
    public static class RequirementsFluentExtensions
    {
        public static Requirements AddActor(this Requirements r, FhirCanonical item) { r.Actor ??= new List<FhirCanonical>(); r.Actor!.Add(item); return r; }
        public static Requirements AddContact(this Requirements r, ContactDetail item) { r.Contact ??= new List<ContactDetail>(); r.Contact!.Add(item); return r; }
        public static Requirements AddContained(this Requirements r, Resource item) { r.Contained ??= new List<Resource>(); r.Contained!.Add(item); return r; }
        public static Requirements WithCopyright(this Requirements r, FhirMarkdown value) { r.Copyright = value; return r; }
        public static Requirements WithCopyrightLabel(this Requirements r, FhirString value) { r.CopyrightLabel = value; return r; }
        public static Requirements WithDate(this Requirements r, FhirDateTime value) { r.Date = value; return r; }
        public static Requirements AddDerivedFrom(this Requirements r, FhirCanonical item) { r.DerivedFrom ??= new List<FhirCanonical>(); r.DerivedFrom!.Add(item); return r; }
        public static Requirements WithDescription(this Requirements r, FhirMarkdown value) { r.Description = value; return r; }
        public static Requirements WithExperimental(this Requirements r, FhirBoolean value) { r.Experimental = value; return r; }
        public static Requirements AddIdentifier(this Requirements r, Identifier item) { r.Identifier ??= new List<Identifier>(); r.Identifier!.Add(item); return r; }
        public static Requirements AddJurisdiction(this Requirements r, CodeableConcept item) { r.Jurisdiction ??= new List<CodeableConcept>(); r.Jurisdiction!.Add(item); return r; }
        public static Requirements WithName(this Requirements r, FhirString value) { r.Name = value; return r; }
        public static Requirements WithPublisher(this Requirements r, FhirString value) { r.Publisher = value; return r; }
        public static Requirements WithPurpose(this Requirements r, FhirMarkdown value) { r.Purpose = value; return r; }
        public static Requirements AddReference(this Requirements r, FhirUrl item) { r.Reference ??= new List<FhirUrl>(); r.Reference!.Add(item); return r; }
        public static Requirements AddStatement(this Requirements r, BackboneElement item) { r.Statement ??= new List<BackboneElement>(); r.Statement!.Add(item); return r; }
        public static Requirements WithStatus(this Requirements r, FhirCode value) { r.Status = value; return r; }
        public static Requirements WithText(this Requirements r, Narrative value) { r.Text = value; return r; }
        public static Requirements WithTitle(this Requirements r, FhirString value) { r.Title = value; return r; }
        public static Requirements WithUrl(this Requirements r, FhirUri value) { r.Url = value; return r; }
        public static Requirements AddUseContext(this Requirements r, UsageContext item) { r.UseContext ??= new List<UsageContext>(); r.UseContext!.Add(item); return r; }
        public static Requirements WithVersion(this Requirements r, FhirString value) { r.Version = value; return r; }
        public static Requirements WithVersionAlgorithmString(this Requirements r, FhirString value) { r.VersionAlgorithmString = value; return r; }
        public static Requirements WithVersionAlgorithmCoding(this Requirements r, Coding value) { r.VersionAlgorithmCoding = value; return r; }
    }
}
