// <auto-generated>
#nullable enable
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
using System.Text.Json.Nodes;
using System.Text.Json.Serialization;
using System.Linq;
using FhirCore.Base;
using DataTypeServices.TypeFramework;
using DataTypeServices.DataTypes.MetaTypes;
namespace FhirSDK.Resources.R5
{
    /// <summary>
    /// Item used in healthcare
    /// </summary>
    public partial class Device : ResourceBase
    {
        public override string ResourceType => "Device";

        public Device() { }
        public Device(string json) { SetRawFrom(JsonNode.Parse(json)); }
        public Device(JsonNode? source) { SetRawFrom(source); }
        protected override void OnPropertyChanged(string propertyName, object? newValue) { base.OnPropertyChanged(propertyName, newValue); }

        private CodeableConcept? _availabilityStatus;
        [JsonPropertyName("availabilityStatus")]
        public CodeableConcept? AvailabilityStatus { get => _availabilityStatus; set { _availabilityStatus = value; OnPropertyChangedByClr(nameof(AvailabilityStatus), value); } }

        private Identifier? _biologicalSourceEvent;
        [JsonPropertyName("biologicalSourceEvent")]
        public Identifier? BiologicalSourceEvent { get => _biologicalSourceEvent; set { _biologicalSourceEvent = value; OnPropertyChangedByClr(nameof(BiologicalSourceEvent), value); } }

        private List<CodeableConcept>? _category;
        [JsonPropertyName("category")]
        public List<CodeableConcept>? Category { get => _category; set { _category = value; OnPropertyChangedByClr(nameof(Category), value); } }

        private List<Device_ConformsTo>? _conformsTo;
        [JsonPropertyName("conformsTo")]
        public List<Device_ConformsTo>? ConformsTo { get => _conformsTo; set { _conformsTo = value; OnPropertyChangedByClr(nameof(ConformsTo), value); } }

        /// <summary>
        /// Identifies the standards, specifications, or formal guidances for the capabilities supported by the device
        /// </summary>
        public partial class Device_ConformsTo : BackboneElement<Device_ConformsTo>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "Device_ConformsTo" : "device_ConformsTo";
            private CodeableConcept? _category;
        [JsonPropertyName("category")]
        public CodeableConcept? Category { get => _category; set { _category = value; } }

            private CodeableConcept? _specification;
        [JsonPropertyName("specification")]
        public CodeableConcept Specification { get => _specification ?? throw new InvalidOperationException("Specification is required"); set { _specification = value; } }

            private FhirString? _version;
        [JsonPropertyName("version")]
        public FhirString? Version { get => _version; set { _version = value; } }

        }

        private List<ContactPoint>? _contact;
        [JsonPropertyName("contact")]
        public List<ContactPoint>? Contact { get => _contact; set { _contact = value; OnPropertyChangedByClr(nameof(Contact), value); } }

        private List<Resource>? _contained;
        [JsonPropertyName("contained")]
        public List<Resource>? Contained { get => _contained; set { _contained = value; OnPropertyChangedByClr(nameof(Contained), value); } }

        private Count? _cycle;
        [JsonPropertyName("cycle")]
        public Count? Cycle { get => _cycle; set { _cycle = value; OnPropertyChangedByClr(nameof(Cycle), value); } }

        private CodeableReference? _definition;
        [JsonPropertyName("definition")]
        public CodeableReference? Definition { get => _definition; set { _definition = value; OnPropertyChangedByClr(nameof(Definition), value); } }

        private FhirString? _displayName;
        [JsonPropertyName("displayName")]
        public FhirString? DisplayName { get => _displayName; set { _displayName = value; OnPropertyChangedByClr(nameof(DisplayName), value); } }

        private Duration? _duration;
        [JsonPropertyName("duration")]
        public Duration? Duration { get => _duration; set { _duration = value; OnPropertyChangedByClr(nameof(Duration), value); } }

        private List<ReferenceType>? _endpoint;
        [JsonPropertyName("endpoint")]
        public List<ReferenceType>? Endpoint { get => _endpoint; set { _endpoint = value; OnPropertyChangedByClr(nameof(Endpoint), value); } }

        private FhirDateTime? _expirationDate;
        [JsonPropertyName("expirationDate")]
        public FhirDateTime? ExpirationDate { get => _expirationDate; set { _expirationDate = value; OnPropertyChangedByClr(nameof(ExpirationDate), value); } }

        private List<CodeableReference>? _gateway;
        [JsonPropertyName("gateway")]
        public List<CodeableReference>? Gateway { get => _gateway; set { _gateway = value; OnPropertyChangedByClr(nameof(Gateway), value); } }

        private List<Identifier>? _identifier;
        [JsonPropertyName("identifier")]
        public List<Identifier>? Identifier { get => _identifier; set { _identifier = value; OnPropertyChangedByClr(nameof(Identifier), value); } }

        private ReferenceType? _location;
        [JsonPropertyName("location")]
        public ReferenceType? Location { get => _location; set { _location = value; OnPropertyChangedByClr(nameof(Location), value); } }

        private FhirString? _lotNumber;
        [JsonPropertyName("lotNumber")]
        public FhirString? LotNumber { get => _lotNumber; set { _lotNumber = value; OnPropertyChangedByClr(nameof(LotNumber), value); } }

        private FhirDateTime? _manufactureDate;
        [JsonPropertyName("manufactureDate")]
        public FhirDateTime? ManufactureDate { get => _manufactureDate; set { _manufactureDate = value; OnPropertyChangedByClr(nameof(ManufactureDate), value); } }

        private FhirString? _manufacturer;
        [JsonPropertyName("manufacturer")]
        public FhirString? Manufacturer { get => _manufacturer; set { _manufacturer = value; OnPropertyChangedByClr(nameof(Manufacturer), value); } }

        private CodeableConcept? _mode;
        [JsonPropertyName("mode")]
        public CodeableConcept? Mode { get => _mode; set { _mode = value; OnPropertyChangedByClr(nameof(Mode), value); } }

        private FhirString? _modelNumber;
        [JsonPropertyName("modelNumber")]
        public FhirString? ModelNumber { get => _modelNumber; set { _modelNumber = value; OnPropertyChangedByClr(nameof(ModelNumber), value); } }

        private List<Device_Name>? _name;
        [JsonPropertyName("name")]
        public List<Device_Name>? Name { get => _name; set { _name = value; OnPropertyChangedByClr(nameof(Name), value); } }

        /// <summary>
        /// The name or names of the device as known to the manufacturer and/or patient
        /// </summary>
        public partial class Device_Name : BackboneElement<Device_Name>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "Device_Name" : "device_Name";
            private FhirBoolean? _display;
        [JsonPropertyName("display")]
        public FhirBoolean? Display { get => _display; set { _display = value; } }

            private FhirCode? _type;
        [JsonPropertyName("type")]
        public FhirCode Type { get => _type ?? throw new InvalidOperationException("Type is required"); set { _type = value; } }

            private FhirString? _value;
        [JsonPropertyName("value")]
        public FhirString Value { get => _value ?? throw new InvalidOperationException("Value is required"); set { _value = value; } }

        }

        private List<Annotation>? _note;
        [JsonPropertyName("note")]
        public List<Annotation>? Note { get => _note; set { _note = value; OnPropertyChangedByClr(nameof(Note), value); } }

        private ReferenceType? _owner;
        [JsonPropertyName("owner")]
        public ReferenceType? Owner { get => _owner; set { _owner = value; OnPropertyChangedByClr(nameof(Owner), value); } }

        private ReferenceType? _parent;
        [JsonPropertyName("parent")]
        public ReferenceType? Parent { get => _parent; set { _parent = value; OnPropertyChangedByClr(nameof(Parent), value); } }

        private FhirString? _partNumber;
        [JsonPropertyName("partNumber")]
        public FhirString? PartNumber { get => _partNumber; set { _partNumber = value; OnPropertyChangedByClr(nameof(PartNumber), value); } }

        private List<Device_Property>? _property;
        [JsonPropertyName("property")]
        public List<Device_Property>? Property { get => _property; set { _property = value; OnPropertyChangedByClr(nameof(Property), value); } }

        /// <summary>
        /// Inherent, essentially fixed, characteristics of the device.  e.g., time properties, size, material, etc.
        /// </summary>
        public partial class Device_Property : BackboneElement<Device_Property>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "Device_Property" : "device_Property";
            private CodeableConcept? _type;
        [JsonPropertyName("type")]
        public CodeableConcept Type { get => _type ?? throw new InvalidOperationException("Type is required"); set { _type = value; } }

            private Quantity? _valueQuantity;
        [JsonPropertyName("valueQuantity")]
        public Quantity? ValueQuantity { get => _valueQuantity; set { _valueQuantity = value; if (value != null) {{ _valueCodeableConcept = null; OnPropertyChanged("valueCodeableConcept", null); _valueString = null; OnPropertyChanged("valueString", null); _valueBoolean = null; OnPropertyChanged("valueBoolean", null); _valueInteger = null; OnPropertyChanged("valueInteger", null); _valueRange = null; OnPropertyChanged("valueRange", null); _valueAttachment = null; OnPropertyChanged("valueAttachment", null); }}; OnPropertyChanged("valueQuantity", value); } }

            private CodeableConcept? _valueCodeableConcept;
        [JsonPropertyName("valueCodeableConcept")]
        public CodeableConcept? ValueCodeableConcept { get => _valueCodeableConcept; set { _valueCodeableConcept = value; if (value != null) {{ _valueQuantity = null; OnPropertyChanged("valueQuantity", null); _valueString = null; OnPropertyChanged("valueString", null); _valueBoolean = null; OnPropertyChanged("valueBoolean", null); _valueInteger = null; OnPropertyChanged("valueInteger", null); _valueRange = null; OnPropertyChanged("valueRange", null); _valueAttachment = null; OnPropertyChanged("valueAttachment", null); }}; OnPropertyChanged("valueCodeableConcept", value); } }

            private FhirString? _valueString;
        [JsonPropertyName("valueString")]
        public FhirString? ValueString { get => _valueString; set { _valueString = value; if (value != null) {{ _valueQuantity = null; OnPropertyChanged("valueQuantity", null); _valueCodeableConcept = null; OnPropertyChanged("valueCodeableConcept", null); _valueBoolean = null; OnPropertyChanged("valueBoolean", null); _valueInteger = null; OnPropertyChanged("valueInteger", null); _valueRange = null; OnPropertyChanged("valueRange", null); _valueAttachment = null; OnPropertyChanged("valueAttachment", null); }}; OnPropertyChanged("valueString", value); } }

            private FhirBoolean? _valueBoolean;
        [JsonPropertyName("valueBoolean")]
        public FhirBoolean? ValueBoolean { get => _valueBoolean; set { _valueBoolean = value; if (value != null) {{ _valueQuantity = null; OnPropertyChanged("valueQuantity", null); _valueCodeableConcept = null; OnPropertyChanged("valueCodeableConcept", null); _valueString = null; OnPropertyChanged("valueString", null); _valueInteger = null; OnPropertyChanged("valueInteger", null); _valueRange = null; OnPropertyChanged("valueRange", null); _valueAttachment = null; OnPropertyChanged("valueAttachment", null); }}; OnPropertyChanged("valueBoolean", value); } }

            private FhirInteger? _valueInteger;
        [JsonPropertyName("valueInteger")]
        public FhirInteger? ValueInteger { get => _valueInteger; set { _valueInteger = value; if (value != null) {{ _valueQuantity = null; OnPropertyChanged("valueQuantity", null); _valueCodeableConcept = null; OnPropertyChanged("valueCodeableConcept", null); _valueString = null; OnPropertyChanged("valueString", null); _valueBoolean = null; OnPropertyChanged("valueBoolean", null); _valueRange = null; OnPropertyChanged("valueRange", null); _valueAttachment = null; OnPropertyChanged("valueAttachment", null); }}; OnPropertyChanged("valueInteger", value); } }

            private DataTypeServices.DataTypes.ComplexTypes.Range? _valueRange;
        [JsonPropertyName("valueRange")]
        public DataTypeServices.DataTypes.ComplexTypes.Range? ValueRange { get => _valueRange; set { _valueRange = value; if (value != null) {{ _valueQuantity = null; OnPropertyChanged("valueQuantity", null); _valueCodeableConcept = null; OnPropertyChanged("valueCodeableConcept", null); _valueString = null; OnPropertyChanged("valueString", null); _valueBoolean = null; OnPropertyChanged("valueBoolean", null); _valueInteger = null; OnPropertyChanged("valueInteger", null); _valueAttachment = null; OnPropertyChanged("valueAttachment", null); }}; OnPropertyChanged("valueRange", value); } }

            private Attachment? _valueAttachment;
        [JsonPropertyName("valueAttachment")]
        public Attachment? ValueAttachment { get => _valueAttachment; set { _valueAttachment = value; if (value != null) {{ _valueQuantity = null; OnPropertyChanged("valueQuantity", null); _valueCodeableConcept = null; OnPropertyChanged("valueCodeableConcept", null); _valueString = null; OnPropertyChanged("valueString", null); _valueBoolean = null; OnPropertyChanged("valueBoolean", null); _valueInteger = null; OnPropertyChanged("valueInteger", null); _valueRange = null; OnPropertyChanged("valueRange", null); }}; OnPropertyChanged("valueAttachment", value); } }

        }

        private List<CodeableConcept>? _safety;
        [JsonPropertyName("safety")]
        public List<CodeableConcept>? Safety { get => _safety; set { _safety = value; OnPropertyChangedByClr(nameof(Safety), value); } }

        private FhirString? _serialNumber;
        [JsonPropertyName("serialNumber")]
        public FhirString? SerialNumber { get => _serialNumber; set { _serialNumber = value; OnPropertyChangedByClr(nameof(SerialNumber), value); } }

        private FhirCode? _status;
        [JsonPropertyName("status")]
        public FhirCode? Status { get => _status; set { _status = value; OnPropertyChangedByClr(nameof(Status), value); } }

        private Narrative? _text;
        [JsonPropertyName("text")]
        public Narrative? Text { get => _text; set { _text = value; OnPropertyChangedByClr(nameof(Text), value); } }

        private List<CodeableConcept>? _type;
        [JsonPropertyName("type")]
        public List<CodeableConcept>? Type { get => _type; set { _type = value; OnPropertyChangedByClr(nameof(Type), value); } }

        private List<Device_UdiCarrier>? _udiCarrier;
        [JsonPropertyName("udiCarrier")]
        public List<Device_UdiCarrier>? UdiCarrier { get => _udiCarrier; set { _udiCarrier = value; OnPropertyChangedByClr(nameof(UdiCarrier), value); } }

        /// <summary>
        /// Unique Device Identifier (UDI) Barcode string
        /// </summary>
        public partial class Device_UdiCarrier : BackboneElement<Device_UdiCarrier>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "Device_UdiCarrier" : "device_UdiCarrier";
            private FhirBase64Binary? _carrierAIDC;
        [JsonPropertyName("carrierAIDC")]
        public FhirBase64Binary? CarrierAIDC { get => _carrierAIDC; set { _carrierAIDC = value; } }

            private FhirString? _carrierHRF;
        [JsonPropertyName("carrierHRF")]
        public FhirString? CarrierHRF { get => _carrierHRF; set { _carrierHRF = value; } }

            private FhirString? _deviceIdentifier;
        [JsonPropertyName("deviceIdentifier")]
        public FhirString DeviceIdentifier { get => _deviceIdentifier ?? throw new InvalidOperationException("DeviceIdentifier is required"); set { _deviceIdentifier = value; } }

            private FhirCode? _entryType;
        [JsonPropertyName("entryType")]
        public FhirCode? EntryType { get => _entryType; set { _entryType = value; } }

            private FhirUri? _issuer;
        [JsonPropertyName("issuer")]
        public FhirUri Issuer { get => _issuer ?? throw new InvalidOperationException("Issuer is required"); set { _issuer = value; } }

            private FhirUri? _jurisdiction;
        [JsonPropertyName("jurisdiction")]
        public FhirUri? Jurisdiction { get => _jurisdiction; set { _jurisdiction = value; } }

        }

        private FhirUri? _url;
        [JsonPropertyName("url")]
        public FhirUri? Url { get => _url; set { _url = value; OnPropertyChangedByClr(nameof(Url), value); } }

        private List<Device_Version>? _version;
        [JsonPropertyName("version")]
        public List<Device_Version>? Version { get => _version; set { _version = value; OnPropertyChangedByClr(nameof(Version), value); } }

        /// <summary>
        /// The actual design of the device or software version running on the device
        /// </summary>
        public partial class Device_Version : BackboneElement<Device_Version>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "Device_Version" : "device_Version";
            private Identifier? _component;
        [JsonPropertyName("component")]
        public Identifier? Component { get => _component; set { _component = value; } }

            private FhirDateTime? _installDate;
        [JsonPropertyName("installDate")]
        public FhirDateTime? InstallDate { get => _installDate; set { _installDate = value; } }

            private CodeableConcept? _type;
        [JsonPropertyName("type")]
        public CodeableConcept? Type { get => _type; set { _type = value; } }

            private FhirString? _value;
        [JsonPropertyName("value")]
        public FhirString Value { get => _value ?? throw new InvalidOperationException("Value is required"); set { _value = value; } }

        }

    }
}
