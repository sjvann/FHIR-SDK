// <auto-generated>
#nullable enable
using System.Collections.Generic;
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
namespace FhirSDK.Resources.R5
{
    public static class InvoiceFluentExtensions
    {
        public static Invoice WithAccount(this Invoice r, ReferenceType value) { r.Account = value; return r; }
        public static Invoice WithCancelledReason(this Invoice r, FhirString value) { r.CancelledReason = value; return r; }
        public static Invoice AddContained(this Invoice r, Resource item) { r.Contained ??= new List<Resource>(); r.Contained!.Add(item); return r; }
        public static Invoice WithCreation(this Invoice r, FhirDateTime value) { r.Creation = value; return r; }
        public static Invoice WithDate(this Invoice r, FhirDateTime value) { r.Date = value; return r; }
        public static Invoice AddIdentifier(this Invoice r, Identifier item) { r.Identifier ??= new List<Identifier>(); r.Identifier!.Add(item); return r; }
        public static Invoice WithIssuer(this Invoice r, ReferenceType value) { r.Issuer = value; return r; }
        public static Invoice AddLineItem(this Invoice r, BackboneElement item) { r.LineItem ??= new List<BackboneElement>(); r.LineItem!.Add(item); return r; }
        public static Invoice AddNote(this Invoice r, Annotation item) { r.Note ??= new List<Annotation>(); r.Note!.Add(item); return r; }
        public static Invoice AddParticipant(this Invoice r, BackboneElement item) { r.Participant ??= new List<BackboneElement>(); r.Participant!.Add(item); return r; }
        public static Invoice WithPaymentTerms(this Invoice r, FhirMarkdown value) { r.PaymentTerms = value; return r; }
        public static Invoice WithPerioddate(this Invoice r, FhirDate value) { r.Perioddate = value; return r; }
        public static Invoice WithPeriodPeriod(this Invoice r, Period value) { r.PeriodPeriod = value; return r; }
        public static Invoice WithRecipient(this Invoice r, ReferenceType value) { r.Recipient = value; return r; }
        public static Invoice WithStatus(this Invoice r, FhirCode value) { r.Status = value; return r; }
        public static Invoice WithSubject(this Invoice r, ReferenceType value) { r.Subject = value; return r; }
        public static Invoice WithText(this Invoice r, Narrative value) { r.Text = value; return r; }
        public static Invoice WithTotalGross(this Invoice r, Money value) { r.TotalGross = value; return r; }
        public static Invoice WithTotalNet(this Invoice r, Money value) { r.TotalNet = value; return r; }
        public static Invoice AddTotalPriceComponent(this Invoice r, MonetaryComponent item) { r.TotalPriceComponent ??= new List<MonetaryComponent>(); r.TotalPriceComponent!.Add(item); return r; }
        public static Invoice WithType(this Invoice r, CodeableConcept value) { r.Type = value; return r; }
    }
}
