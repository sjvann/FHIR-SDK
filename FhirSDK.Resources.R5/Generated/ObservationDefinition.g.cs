// <auto-generated>
#nullable enable
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
using System.Text.Json.Nodes;
using System.Text.Json.Serialization;
using System.Linq;
using FhirCore.Base;
using DataTypeServices.TypeFramework;
using DataTypeServices.DataTypes.MetaTypes;
namespace FhirSDK.Resources.R5
{
    /// <summary>
    /// Definition of an observation
    /// </summary>
    public partial class ObservationDefinition : ResourceBase
    {
        public override string ResourceType => "ObservationDefinition";

        public ObservationDefinition() { }
        public ObservationDefinition(string json) { SetRawFrom(JsonNode.Parse(json)); }
        public ObservationDefinition(JsonNode? source) { SetRawFrom(source); }
        protected override void OnPropertyChanged(string propertyName, object? newValue) { base.OnPropertyChanged(propertyName, newValue); }

        private FhirDate? _approvalDate;
        [JsonPropertyName("approvalDate")]
        public FhirDate? ApprovalDate { get => _approvalDate; set { _approvalDate = value; OnPropertyChangedByClr(nameof(ApprovalDate), value); } }

        private CodeableConcept? _bodySite;
        [JsonPropertyName("bodySite")]
        public CodeableConcept? BodySite { get => _bodySite; set { _bodySite = value; OnPropertyChangedByClr(nameof(BodySite), value); } }

        private List<CodeableConcept>? _category;
        [JsonPropertyName("category")]
        public List<CodeableConcept>? Category { get => _category; set { _category = value; OnPropertyChangedByClr(nameof(Category), value); } }

        private CodeableConcept? _code;
        [JsonPropertyName("code")]
        public CodeableConcept Code { get => _code ?? throw new InvalidOperationException("Code is required"); set { _code = value; OnPropertyChangedByClr(nameof(Code), value); } }

        private List<ObservationDefinition_Component>? _component;
        [JsonPropertyName("component")]
        public List<ObservationDefinition_Component>? Component { get => _component; set { _component = value; OnPropertyChangedByClr(nameof(Component), value); } }

        /// <summary>
        /// Component results
        /// </summary>
        public partial class ObservationDefinition_Component : BackboneElement<ObservationDefinition_Component>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "ObservationDefinition_Component" : "observationDefinition_Component";
            private CodeableConcept? _code;
        [JsonPropertyName("code")]
        public CodeableConcept Code { get => _code ?? throw new InvalidOperationException("Code is required"); set { _code = value; } }

            private List<FhirCode>? _permittedDataType;
        [JsonPropertyName("permittedDataType")]
        public List<FhirCode>? PermittedDataType { get => _permittedDataType; set { _permittedDataType = value; } }

            private List<Coding>? _permittedUnit;
        [JsonPropertyName("permittedUnit")]
        public List<Coding>? PermittedUnit { get => _permittedUnit; set { _permittedUnit = value; } }

            private List<FhirString>? _qualifiedValue;
        [JsonPropertyName("qualifiedValue")]
        public List<FhirString>? QualifiedValue { get => _qualifiedValue; set { _qualifiedValue = value; } }

        }

        private List<ContactDetail>? _contact;
        [JsonPropertyName("contact")]
        public List<ContactDetail>? Contact { get => _contact; set { _contact = value; OnPropertyChangedByClr(nameof(Contact), value); } }

        private List<Resource>? _contained;
        [JsonPropertyName("contained")]
        public List<Resource>? Contained { get => _contained; set { _contained = value; OnPropertyChangedByClr(nameof(Contained), value); } }

        private FhirMarkdown? _copyright;
        [JsonPropertyName("copyright")]
        public FhirMarkdown? Copyright { get => _copyright; set { _copyright = value; OnPropertyChangedByClr(nameof(Copyright), value); } }

        private FhirString? _copyrightLabel;
        [JsonPropertyName("copyrightLabel")]
        public FhirString? CopyrightLabel { get => _copyrightLabel; set { _copyrightLabel = value; OnPropertyChangedByClr(nameof(CopyrightLabel), value); } }

        private FhirDateTime? _date;
        [JsonPropertyName("date")]
        public FhirDateTime? Date { get => _date; set { _date = value; OnPropertyChangedByClr(nameof(Date), value); } }

        private List<FhirCanonical>? _derivedFromCanonical;
        [JsonPropertyName("derivedFromCanonical")]
        public List<FhirCanonical>? DerivedFromCanonical { get => _derivedFromCanonical; set { _derivedFromCanonical = value; OnPropertyChangedByClr(nameof(DerivedFromCanonical), value); } }

        private List<FhirUri>? _derivedFromUri;
        [JsonPropertyName("derivedFromUri")]
        public List<FhirUri>? DerivedFromUri { get => _derivedFromUri; set { _derivedFromUri = value; OnPropertyChangedByClr(nameof(DerivedFromUri), value); } }

        private FhirMarkdown? _description;
        [JsonPropertyName("description")]
        public FhirMarkdown? Description { get => _description; set { _description = value; OnPropertyChangedByClr(nameof(Description), value); } }

        private List<ReferenceType>? _device;
        [JsonPropertyName("device")]
        public List<ReferenceType>? Device { get => _device; set { _device = value; OnPropertyChangedByClr(nameof(Device), value); } }

        private Period? _effectivePeriod;
        [JsonPropertyName("effectivePeriod")]
        public Period? EffectivePeriod { get => _effectivePeriod; set { _effectivePeriod = value; OnPropertyChangedByClr(nameof(EffectivePeriod), value); } }

        private FhirBoolean? _experimental;
        [JsonPropertyName("experimental")]
        public FhirBoolean? Experimental { get => _experimental; set { _experimental = value; OnPropertyChangedByClr(nameof(Experimental), value); } }

        private List<ReferenceType>? _hasMember;
        [JsonPropertyName("hasMember")]
        public List<ReferenceType>? HasMember { get => _hasMember; set { _hasMember = value; OnPropertyChangedByClr(nameof(HasMember), value); } }

        private Identifier? _identifier;
        [JsonPropertyName("identifier")]
        public Identifier? Identifier { get => _identifier; set { _identifier = value; OnPropertyChangedByClr(nameof(Identifier), value); } }

        private List<CodeableConcept>? _jurisdiction;
        [JsonPropertyName("jurisdiction")]
        public List<CodeableConcept>? Jurisdiction { get => _jurisdiction; set { _jurisdiction = value; OnPropertyChangedByClr(nameof(Jurisdiction), value); } }

        private FhirDate? _lastReviewDate;
        [JsonPropertyName("lastReviewDate")]
        public FhirDate? LastReviewDate { get => _lastReviewDate; set { _lastReviewDate = value; OnPropertyChangedByClr(nameof(LastReviewDate), value); } }

        private CodeableConcept? _method;
        [JsonPropertyName("method")]
        public CodeableConcept? Method { get => _method; set { _method = value; OnPropertyChangedByClr(nameof(Method), value); } }

        private FhirBoolean? _multipleResultsAllowed;
        [JsonPropertyName("multipleResultsAllowed")]
        public FhirBoolean? MultipleResultsAllowed { get => _multipleResultsAllowed; set { _multipleResultsAllowed = value; OnPropertyChangedByClr(nameof(MultipleResultsAllowed), value); } }

        private FhirString? _name;
        [JsonPropertyName("name")]
        public FhirString? Name { get => _name; set { _name = value; OnPropertyChangedByClr(nameof(Name), value); } }

        private CodeableConcept? _performerType;
        [JsonPropertyName("performerType")]
        public CodeableConcept? PerformerType { get => _performerType; set { _performerType = value; OnPropertyChangedByClr(nameof(PerformerType), value); } }

        private List<FhirCode>? _permittedDataType;
        [JsonPropertyName("permittedDataType")]
        public List<FhirCode>? PermittedDataType { get => _permittedDataType; set { _permittedDataType = value; OnPropertyChangedByClr(nameof(PermittedDataType), value); } }

        private List<Coding>? _permittedUnit;
        [JsonPropertyName("permittedUnit")]
        public List<Coding>? PermittedUnit { get => _permittedUnit; set { _permittedUnit = value; OnPropertyChangedByClr(nameof(PermittedUnit), value); } }

        private FhirString? _preferredReportName;
        [JsonPropertyName("preferredReportName")]
        public FhirString? PreferredReportName { get => _preferredReportName; set { _preferredReportName = value; OnPropertyChangedByClr(nameof(PreferredReportName), value); } }

        private FhirString? _publisher;
        [JsonPropertyName("publisher")]
        public FhirString? Publisher { get => _publisher; set { _publisher = value; OnPropertyChangedByClr(nameof(Publisher), value); } }

        private FhirMarkdown? _purpose;
        [JsonPropertyName("purpose")]
        public FhirMarkdown? Purpose { get => _purpose; set { _purpose = value; OnPropertyChangedByClr(nameof(Purpose), value); } }

        private List<ObservationDefinition_QualifiedValue>? _qualifiedValue;
        [JsonPropertyName("qualifiedValue")]
        public List<ObservationDefinition_QualifiedValue>? QualifiedValue { get => _qualifiedValue; set { _qualifiedValue = value; OnPropertyChangedByClr(nameof(QualifiedValue), value); } }

        /// <summary>
        /// Set of qualified values for observation results
        /// </summary>
        public partial class ObservationDefinition_QualifiedValue : BackboneElement<ObservationDefinition_QualifiedValue>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "ObservationDefinition_QualifiedValue" : "observationDefinition_QualifiedValue";
            private FhirCanonical? _abnormalCodedValueSet;
        [JsonPropertyName("abnormalCodedValueSet")]
        public FhirCanonical? AbnormalCodedValueSet { get => _abnormalCodedValueSet; set { _abnormalCodedValueSet = value; } }

            private DataTypeServices.DataTypes.ComplexTypes.Range? _age;
        [JsonPropertyName("age")]
        public DataTypeServices.DataTypes.ComplexTypes.Range? Age { get => _age; set { _age = value; } }

            private List<CodeableConcept>? _appliesTo;
        [JsonPropertyName("appliesTo")]
        public List<CodeableConcept>? AppliesTo { get => _appliesTo; set { _appliesTo = value; } }

            private FhirString? _condition;
        [JsonPropertyName("condition")]
        public FhirString? Condition { get => _condition; set { _condition = value; } }

            private CodeableConcept? _context;
        [JsonPropertyName("context")]
        public CodeableConcept? Context { get => _context; set { _context = value; } }

            private FhirCanonical? _criticalCodedValueSet;
        [JsonPropertyName("criticalCodedValueSet")]
        public FhirCanonical? CriticalCodedValueSet { get => _criticalCodedValueSet; set { _criticalCodedValueSet = value; } }

            private FhirCode? _gender;
        [JsonPropertyName("gender")]
        public FhirCode? Gender { get => _gender; set { _gender = value; } }

            private DataTypeServices.DataTypes.ComplexTypes.Range? _gestationalAge;
        [JsonPropertyName("gestationalAge")]
        public DataTypeServices.DataTypes.ComplexTypes.Range? GestationalAge { get => _gestationalAge; set { _gestationalAge = value; } }

            private FhirCanonical? _normalCodedValueSet;
        [JsonPropertyName("normalCodedValueSet")]
        public FhirCanonical? NormalCodedValueSet { get => _normalCodedValueSet; set { _normalCodedValueSet = value; } }

            private DataTypeServices.DataTypes.ComplexTypes.Range? _range;
        [JsonPropertyName("range")]
        public DataTypeServices.DataTypes.ComplexTypes.Range? Range { get => _range; set { _range = value; } }

            private FhirCode? _rangeCategory;
        [JsonPropertyName("rangeCategory")]
        public FhirCode? RangeCategory { get => _rangeCategory; set { _rangeCategory = value; } }

            private FhirCanonical? _validCodedValueSet;
        [JsonPropertyName("validCodedValueSet")]
        public FhirCanonical? ValidCodedValueSet { get => _validCodedValueSet; set { _validCodedValueSet = value; } }

        }

        private List<ReferenceType>? _specimen;
        [JsonPropertyName("specimen")]
        public List<ReferenceType>? Specimen { get => _specimen; set { _specimen = value; OnPropertyChangedByClr(nameof(Specimen), value); } }

        private FhirCode? _status;
        [JsonPropertyName("status")]
        public FhirCode Status { get => _status ?? throw new InvalidOperationException("Status is required"); set { _status = value; OnPropertyChangedByClr(nameof(Status), value); } }

        private List<CodeableConcept>? _subject;
        [JsonPropertyName("subject")]
        public List<CodeableConcept>? Subject { get => _subject; set { _subject = value; OnPropertyChangedByClr(nameof(Subject), value); } }

        private Narrative? _text;
        [JsonPropertyName("text")]
        public Narrative? Text { get => _text; set { _text = value; OnPropertyChangedByClr(nameof(Text), value); } }

        private FhirString? _title;
        [JsonPropertyName("title")]
        public FhirString? Title { get => _title; set { _title = value; OnPropertyChangedByClr(nameof(Title), value); } }

        private FhirUri? _url;
        [JsonPropertyName("url")]
        public FhirUri? Url { get => _url; set { _url = value; OnPropertyChangedByClr(nameof(Url), value); } }

        private List<UsageContext>? _useContext;
        [JsonPropertyName("useContext")]
        public List<UsageContext>? UseContext { get => _useContext; set { _useContext = value; OnPropertyChangedByClr(nameof(UseContext), value); } }

        private FhirString? _version;
        [JsonPropertyName("version")]
        public FhirString? Version { get => _version; set { _version = value; OnPropertyChangedByClr(nameof(Version), value); } }

        private FhirString? _versionAlgorithmString;
        [JsonPropertyName("versionAlgorithmString")]
        public FhirString? VersionAlgorithmString { get => _versionAlgorithmString; set { _versionAlgorithmString = value; if (value != null) {{ _versionAlgorithmCoding = null; OnPropertyChangedByClr(nameof(VersionAlgorithmCoding), null); }}; OnPropertyChangedByClr(nameof(VersionAlgorithmString), value); } }

        private Coding? _versionAlgorithmCoding;
        [JsonPropertyName("versionAlgorithmCoding")]
        public Coding? VersionAlgorithmCoding { get => _versionAlgorithmCoding; set { _versionAlgorithmCoding = value; if (value != null) {{ _versionAlgorithmString = null; OnPropertyChangedByClr(nameof(VersionAlgorithmString), null); }}; OnPropertyChangedByClr(nameof(VersionAlgorithmCoding), value); } }

    }
}
