// <auto-generated>
#nullable enable
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
using System.Text.Json.Nodes;
using System.Text.Json.Serialization;
using System.Linq;
using FhirCore.Base;
using DataTypeServices.TypeFramework;
using DataTypeServices.DataTypes.MetaTypes;
namespace FhirSDK.Resources.R5
{
    /// <summary>
    /// A medically related item or items, in a container or package
    /// </summary>
    public partial class PackagedProductDefinition : ResourceBase
    {
        public override string ResourceType => "PackagedProductDefinition";

        public PackagedProductDefinition() { }
        public PackagedProductDefinition(string json) { SetRawFrom(JsonNode.Parse(json)); }
        public PackagedProductDefinition(JsonNode? source) { SetRawFrom(source); }
        protected override void OnPropertyChanged(string propertyName, object? newValue) { base.OnPropertyChanged(propertyName, newValue); }

        private List<ReferenceType>? _attachedDocument;
        [JsonPropertyName("attachedDocument")]
        public List<ReferenceType>? AttachedDocument { get => _attachedDocument; set { _attachedDocument = value; OnPropertyChangedByClr(nameof(AttachedDocument), value); } }

        private List<FhirString>? _characteristic;
        [JsonPropertyName("characteristic")]
        public List<FhirString>? Characteristic { get => _characteristic; set { _characteristic = value; OnPropertyChangedByClr(nameof(Characteristic), value); } }

        private List<Resource>? _contained;
        [JsonPropertyName("contained")]
        public List<Resource>? Contained { get => _contained; set { _contained = value; OnPropertyChangedByClr(nameof(Contained), value); } }

        private List<Quantity>? _containedItemQuantity;
        [JsonPropertyName("containedItemQuantity")]
        public List<Quantity>? ContainedItemQuantity { get => _containedItemQuantity; set { _containedItemQuantity = value; OnPropertyChangedByClr(nameof(ContainedItemQuantity), value); } }

        private FhirBoolean? _copackagedIndicator;
        [JsonPropertyName("copackagedIndicator")]
        public FhirBoolean? CopackagedIndicator { get => _copackagedIndicator; set { _copackagedIndicator = value; OnPropertyChangedByClr(nameof(CopackagedIndicator), value); } }

        private FhirMarkdown? _description;
        [JsonPropertyName("description")]
        public FhirMarkdown? Description { get => _description; set { _description = value; OnPropertyChangedByClr(nameof(Description), value); } }

        private List<Identifier>? _identifier;
        [JsonPropertyName("identifier")]
        public List<Identifier>? Identifier { get => _identifier; set { _identifier = value; OnPropertyChangedByClr(nameof(Identifier), value); } }

        private List<PackagedProductDefinition_LegalStatusOfSupply>? _legalStatusOfSupply;
        [JsonPropertyName("legalStatusOfSupply")]
        public List<PackagedProductDefinition_LegalStatusOfSupply>? LegalStatusOfSupply { get => _legalStatusOfSupply; set { _legalStatusOfSupply = value; OnPropertyChangedByClr(nameof(LegalStatusOfSupply), value); } }

        /// <summary>
        /// The legal status of supply of the packaged item as classified by the regulator
        /// </summary>
        public partial class PackagedProductDefinition_LegalStatusOfSupply : BackboneElement<PackagedProductDefinition_LegalStatusOfSupply>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "PackagedProductDefinition_LegalStatusOfSupply" : "packagedProductDefinition_LegalStatusOfSupply";
            private CodeableConcept? _code;
        [JsonPropertyName("code")]
        public CodeableConcept? Code { get => _code; set { _code = value; } }

            private CodeableConcept? _jurisdiction;
        [JsonPropertyName("jurisdiction")]
        public CodeableConcept? Jurisdiction { get => _jurisdiction; set { _jurisdiction = value; } }

        }

        private List<ReferenceType>? _manufacturer;
        [JsonPropertyName("manufacturer")]
        public List<ReferenceType>? Manufacturer { get => _manufacturer; set { _manufacturer = value; OnPropertyChangedByClr(nameof(Manufacturer), value); } }

        private List<MarketingStatus>? _marketingStatus;
        [JsonPropertyName("marketingStatus")]
        public List<MarketingStatus>? MarketingStatus { get => _marketingStatus; set { _marketingStatus = value; OnPropertyChangedByClr(nameof(MarketingStatus), value); } }

        private FhirString? _name;
        [JsonPropertyName("name")]
        public FhirString? Name { get => _name; set { _name = value; OnPropertyChangedByClr(nameof(Name), value); } }

        private List<ReferenceType>? _packageFor;
        [JsonPropertyName("packageFor")]
        public List<ReferenceType>? PackageFor { get => _packageFor; set { _packageFor = value; OnPropertyChangedByClr(nameof(PackageFor), value); } }

        private PackagedProductDefinition_Packaging? _packaging;
        [JsonPropertyName("packaging")]
        public PackagedProductDefinition_Packaging? Packaging { get => _packaging; set { _packaging = value; OnPropertyChangedByClr(nameof(Packaging), value); } }

        /// <summary>
        /// A packaging item, as a container for medically related items, possibly with other packaging items within, or a packaging component, such as bottle cap
        /// </summary>
        public partial class PackagedProductDefinition_Packaging : BackboneElement<PackagedProductDefinition_Packaging>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "PackagedProductDefinition_Packaging" : "packagedProductDefinition_Packaging";
            private List<CodeableConcept>? _alternateMaterial;
        [JsonPropertyName("alternateMaterial")]
        public List<CodeableConcept>? AlternateMaterial { get => _alternateMaterial; set { _alternateMaterial = value; } }

            private FhirBoolean? _componentPart;
        [JsonPropertyName("componentPart")]
        public FhirBoolean? ComponentPart { get => _componentPart; set { _componentPart = value; } }

            private List<PackagedProductDefinition_Packaging_ContainedItem>? _containedItem;
        [JsonPropertyName("containedItem")]
        public List<PackagedProductDefinition_Packaging_ContainedItem>? ContainedItem { get => _containedItem; set { _containedItem = value; } }

            /// <summary>
            /// The item(s) within the packaging
            /// </summary>
            public partial class PackagedProductDefinition_Packaging_ContainedItem : BackboneElement<PackagedProductDefinition_Packaging_ContainedItem>
            {
                public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "PackagedProductDefinition_Packaging_ContainedItem" : "packagedProductDefinition_Packaging_ContainedItem";
                private Quantity? _amount;
        [JsonPropertyName("amount")]
        public Quantity? Amount { get => _amount; set { _amount = value; } }

                private CodeableReference? _item;
        [JsonPropertyName("item")]
        public CodeableReference Item { get => _item ?? throw new InvalidOperationException("Item is required"); set { _item = value; } }

            }

            private List<Identifier>? _identifier;
        [JsonPropertyName("identifier")]
        public List<Identifier>? Identifier { get => _identifier; set { _identifier = value; } }

            private List<ReferenceType>? _manufacturer;
        [JsonPropertyName("manufacturer")]
        public List<ReferenceType>? Manufacturer { get => _manufacturer; set { _manufacturer = value; } }

            private List<CodeableConcept>? _material;
        [JsonPropertyName("material")]
        public List<CodeableConcept>? Material { get => _material; set { _material = value; } }

            private List<FhirString>? _packaging;
        [JsonPropertyName("packaging")]
        public List<FhirString>? Packaging { get => _packaging; set { _packaging = value; } }

            private List<PackagedProductDefinition_Packaging_Property>? _property;
        [JsonPropertyName("property")]
        public List<PackagedProductDefinition_Packaging_Property>? Property { get => _property; set { _property = value; } }

            /// <summary>
            /// General characteristics of this item
            /// </summary>
            public partial class PackagedProductDefinition_Packaging_Property : BackboneElement<PackagedProductDefinition_Packaging_Property>
            {
                public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "PackagedProductDefinition_Packaging_Property" : "packagedProductDefinition_Packaging_Property";
                private CodeableConcept? _type;
        [JsonPropertyName("type")]
        public CodeableConcept Type { get => _type ?? throw new InvalidOperationException("Type is required"); set { _type = value; } }

                private CodeableConcept? _valueCodeableConcept;
        [JsonPropertyName("valueCodeableConcept")]
        public CodeableConcept? ValueCodeableConcept { get => _valueCodeableConcept; set { _valueCodeableConcept = value; if (value != null) {{ _valueQuantity = null; OnPropertyChanged("valueQuantity", null); _valuedate = null; OnPropertyChanged("valuedate", null); _valueBoolean = null; OnPropertyChanged("valueBoolean", null); _valueAttachment = null; OnPropertyChanged("valueAttachment", null); }}; OnPropertyChanged("valueCodeableConcept", value); } }

                private Quantity? _valueQuantity;
        [JsonPropertyName("valueQuantity")]
        public Quantity? ValueQuantity { get => _valueQuantity; set { _valueQuantity = value; if (value != null) {{ _valueCodeableConcept = null; OnPropertyChanged("valueCodeableConcept", null); _valuedate = null; OnPropertyChanged("valuedate", null); _valueBoolean = null; OnPropertyChanged("valueBoolean", null); _valueAttachment = null; OnPropertyChanged("valueAttachment", null); }}; OnPropertyChanged("valueQuantity", value); } }

                private FhirDate? _valuedate;
        [JsonPropertyName("valuedate")]
        public FhirDate? Valuedate { get => _valuedate; set { _valuedate = value; if (value != null) {{ _valueCodeableConcept = null; OnPropertyChanged("valueCodeableConcept", null); _valueQuantity = null; OnPropertyChanged("valueQuantity", null); _valueBoolean = null; OnPropertyChanged("valueBoolean", null); _valueAttachment = null; OnPropertyChanged("valueAttachment", null); }}; OnPropertyChanged("valuedate", value); } }

                private FhirBoolean? _valueBoolean;
        [JsonPropertyName("valueBoolean")]
        public FhirBoolean? ValueBoolean { get => _valueBoolean; set { _valueBoolean = value; if (value != null) {{ _valueCodeableConcept = null; OnPropertyChanged("valueCodeableConcept", null); _valueQuantity = null; OnPropertyChanged("valueQuantity", null); _valuedate = null; OnPropertyChanged("valuedate", null); _valueAttachment = null; OnPropertyChanged("valueAttachment", null); }}; OnPropertyChanged("valueBoolean", value); } }

                private Attachment? _valueAttachment;
        [JsonPropertyName("valueAttachment")]
        public Attachment? ValueAttachment { get => _valueAttachment; set { _valueAttachment = value; if (value != null) {{ _valueCodeableConcept = null; OnPropertyChanged("valueCodeableConcept", null); _valueQuantity = null; OnPropertyChanged("valueQuantity", null); _valuedate = null; OnPropertyChanged("valuedate", null); _valueBoolean = null; OnPropertyChanged("valueBoolean", null); }}; OnPropertyChanged("valueAttachment", value); } }

            }

            private FhirInteger? _quantity;
        [JsonPropertyName("quantity")]
        public FhirInteger? Quantity { get => _quantity; set { _quantity = value; } }

            private List<ProductShelfLife>? _shelfLifeStorage;
        [JsonPropertyName("shelfLifeStorage")]
        public List<ProductShelfLife>? ShelfLifeStorage { get => _shelfLifeStorage; set { _shelfLifeStorage = value; } }

            private CodeableConcept? _type;
        [JsonPropertyName("type")]
        public CodeableConcept? Type { get => _type; set { _type = value; } }

        }

        private CodeableConcept? _status;
        [JsonPropertyName("status")]
        public CodeableConcept? Status { get => _status; set { _status = value; OnPropertyChangedByClr(nameof(Status), value); } }

        private FhirDateTime? _statusDate;
        [JsonPropertyName("statusDate")]
        public FhirDateTime? StatusDate { get => _statusDate; set { _statusDate = value; OnPropertyChangedByClr(nameof(StatusDate), value); } }

        private Narrative? _text;
        [JsonPropertyName("text")]
        public Narrative? Text { get => _text; set { _text = value; OnPropertyChangedByClr(nameof(Text), value); } }

        private CodeableConcept? _type;
        [JsonPropertyName("type")]
        public CodeableConcept? Type { get => _type; set { _type = value; OnPropertyChangedByClr(nameof(Type), value); } }

    }
}
