// <auto-generated>
#nullable enable
using DataTypeServices.DataTypes.PrimitiveTypes;
using DataTypeServices.DataTypes.ComplexTypes;
using DataTypeServices.DataTypes.SpecialTypes;
using System.Text.Json.Nodes;
using System.Text.Json.Serialization;
using System.Linq;
using FhirCore.Base;
using DataTypeServices.TypeFramework;
using DataTypeServices.DataTypes.MetaTypes;
namespace FhirSDK.Resources.R5
{
    /// <summary>
    /// Kind of specimen
    /// </summary>
    public partial class SpecimenDefinition : ResourceBase
    {
        public override string ResourceType => "SpecimenDefinition";

        public SpecimenDefinition() { }
        public SpecimenDefinition(string json) { SetRawFrom(JsonNode.Parse(json)); }
        public SpecimenDefinition(JsonNode? source) { SetRawFrom(source); }
        protected override void OnPropertyChanged(string propertyName, object? newValue) { base.OnPropertyChanged(propertyName, newValue); }

        private FhirDate? _approvalDate;
        [JsonPropertyName("approvalDate")]
        public FhirDate? ApprovalDate { get => _approvalDate; set { _approvalDate = value; OnPropertyChangedByClr(nameof(ApprovalDate), value); } }

        private List<CodeableConcept>? _collection;
        [JsonPropertyName("collection")]
        public List<CodeableConcept>? Collection { get => _collection; set { _collection = value; OnPropertyChangedByClr(nameof(Collection), value); } }

        private List<ContactDetail>? _contact;
        [JsonPropertyName("contact")]
        public List<ContactDetail>? Contact { get => _contact; set { _contact = value; OnPropertyChangedByClr(nameof(Contact), value); } }

        private List<Resource>? _contained;
        [JsonPropertyName("contained")]
        public List<Resource>? Contained { get => _contained; set { _contained = value; OnPropertyChangedByClr(nameof(Contained), value); } }

        private FhirMarkdown? _copyright;
        [JsonPropertyName("copyright")]
        public FhirMarkdown? Copyright { get => _copyright; set { _copyright = value; OnPropertyChangedByClr(nameof(Copyright), value); } }

        private FhirString? _copyrightLabel;
        [JsonPropertyName("copyrightLabel")]
        public FhirString? CopyrightLabel { get => _copyrightLabel; set { _copyrightLabel = value; OnPropertyChangedByClr(nameof(CopyrightLabel), value); } }

        private FhirDateTime? _date;
        [JsonPropertyName("date")]
        public FhirDateTime? Date { get => _date; set { _date = value; OnPropertyChangedByClr(nameof(Date), value); } }

        private List<FhirCanonical>? _derivedFromCanonical;
        [JsonPropertyName("derivedFromCanonical")]
        public List<FhirCanonical>? DerivedFromCanonical { get => _derivedFromCanonical; set { _derivedFromCanonical = value; OnPropertyChangedByClr(nameof(DerivedFromCanonical), value); } }

        private List<FhirUri>? _derivedFromUri;
        [JsonPropertyName("derivedFromUri")]
        public List<FhirUri>? DerivedFromUri { get => _derivedFromUri; set { _derivedFromUri = value; OnPropertyChangedByClr(nameof(DerivedFromUri), value); } }

        private FhirMarkdown? _description;
        [JsonPropertyName("description")]
        public FhirMarkdown? Description { get => _description; set { _description = value; OnPropertyChangedByClr(nameof(Description), value); } }

        private Period? _effectivePeriod;
        [JsonPropertyName("effectivePeriod")]
        public Period? EffectivePeriod { get => _effectivePeriod; set { _effectivePeriod = value; OnPropertyChangedByClr(nameof(EffectivePeriod), value); } }

        private FhirBoolean? _experimental;
        [JsonPropertyName("experimental")]
        public FhirBoolean? Experimental { get => _experimental; set { _experimental = value; OnPropertyChangedByClr(nameof(Experimental), value); } }

        private Identifier? _identifier;
        [JsonPropertyName("identifier")]
        public Identifier? Identifier { get => _identifier; set { _identifier = value; OnPropertyChangedByClr(nameof(Identifier), value); } }

        private List<CodeableConcept>? _jurisdiction;
        [JsonPropertyName("jurisdiction")]
        public List<CodeableConcept>? Jurisdiction { get => _jurisdiction; set { _jurisdiction = value; OnPropertyChangedByClr(nameof(Jurisdiction), value); } }

        private FhirDate? _lastReviewDate;
        [JsonPropertyName("lastReviewDate")]
        public FhirDate? LastReviewDate { get => _lastReviewDate; set { _lastReviewDate = value; OnPropertyChangedByClr(nameof(LastReviewDate), value); } }

        private FhirString? _name;
        [JsonPropertyName("name")]
        public FhirString? Name { get => _name; set { _name = value; OnPropertyChangedByClr(nameof(Name), value); } }

        private List<CodeableConcept>? _patientPreparation;
        [JsonPropertyName("patientPreparation")]
        public List<CodeableConcept>? PatientPreparation { get => _patientPreparation; set { _patientPreparation = value; OnPropertyChangedByClr(nameof(PatientPreparation), value); } }

        private FhirString? _publisher;
        [JsonPropertyName("publisher")]
        public FhirString? Publisher { get => _publisher; set { _publisher = value; OnPropertyChangedByClr(nameof(Publisher), value); } }

        private FhirMarkdown? _purpose;
        [JsonPropertyName("purpose")]
        public FhirMarkdown? Purpose { get => _purpose; set { _purpose = value; OnPropertyChangedByClr(nameof(Purpose), value); } }

        private FhirCode? _status;
        [JsonPropertyName("status")]
        public FhirCode Status { get => _status ?? throw new InvalidOperationException("Status is required"); set { _status = value; OnPropertyChangedByClr(nameof(Status), value); } }

        private CodeableConcept? _subjectCodeableConcept;
        [JsonPropertyName("subjectCodeableConcept")]
        public CodeableConcept? SubjectCodeableConcept { get => _subjectCodeableConcept; set { _subjectCodeableConcept = value; if (value != null) {{ _subjectReference = null; OnPropertyChangedByClr(nameof(SubjectReference), null); }}; OnPropertyChangedByClr(nameof(SubjectCodeableConcept), value); } }

        private ReferenceType? _subjectReference;
        [JsonPropertyName("subjectReference")]
        public ReferenceType? SubjectReference { get => _subjectReference; set { _subjectReference = value; if (value != null) {{ _subjectCodeableConcept = null; OnPropertyChangedByClr(nameof(SubjectCodeableConcept), null); }}; OnPropertyChangedByClr(nameof(SubjectReference), value); } }

        private Narrative? _text;
        [JsonPropertyName("text")]
        public Narrative? Text { get => _text; set { _text = value; OnPropertyChangedByClr(nameof(Text), value); } }

        private FhirString? _timeAspect;
        [JsonPropertyName("timeAspect")]
        public FhirString? TimeAspect { get => _timeAspect; set { _timeAspect = value; OnPropertyChangedByClr(nameof(TimeAspect), value); } }

        private FhirString? _title;
        [JsonPropertyName("title")]
        public FhirString? Title { get => _title; set { _title = value; OnPropertyChangedByClr(nameof(Title), value); } }

        private CodeableConcept? _typeCollected;
        [JsonPropertyName("typeCollected")]
        public CodeableConcept? TypeCollected { get => _typeCollected; set { _typeCollected = value; OnPropertyChangedByClr(nameof(TypeCollected), value); } }

        private List<SpecimenDefinition_TypeTested>? _typeTested;
        [JsonPropertyName("typeTested")]
        public List<SpecimenDefinition_TypeTested>? TypeTested { get => _typeTested; set { _typeTested = value; OnPropertyChangedByClr(nameof(TypeTested), value); } }

        /// <summary>
        /// Specimen in container intended for testing by lab
        /// </summary>
        public partial class SpecimenDefinition_TypeTested : BackboneElement<SpecimenDefinition_TypeTested>
        {
            public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "SpecimenDefinition_TypeTested" : "specimenDefinition_TypeTested";
            private SpecimenDefinition_TypeTested_Container? _container;
        [JsonPropertyName("container")]
        public SpecimenDefinition_TypeTested_Container? Container { get => _container; set { _container = value; } }

            /// <summary>
            /// The specimen's container
            /// </summary>
            public partial class SpecimenDefinition_TypeTested_Container : BackboneElement<SpecimenDefinition_TypeTested_Container>
            {
                public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "SpecimenDefinition_TypeTested_Container" : "specimenDefinition_TypeTested_Container";
                private List<SpecimenDefinition_TypeTested_Container_Additive>? _additive;
        [JsonPropertyName("additive")]
        public List<SpecimenDefinition_TypeTested_Container_Additive>? Additive { get => _additive; set { _additive = value; } }

                /// <summary>
                /// Additive associated with container
                /// </summary>
                public partial class SpecimenDefinition_TypeTested_Container_Additive : BackboneElement<SpecimenDefinition_TypeTested_Container_Additive>
                {
                    public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "SpecimenDefinition_TypeTested_Container_Additive" : "specimenDefinition_TypeTested_Container_Additive";
                    private CodeableConcept? _additiveCodeableConcept;
        [JsonPropertyName("additiveCodeableConcept")]
        public CodeableConcept? AdditiveCodeableConcept { get => _additiveCodeableConcept; set { _additiveCodeableConcept = value; if (value != null) {{ }}; OnPropertyChanged("additiveCodeableConcept", value); } }

                    private ReferenceType? _additiveReference;
        [JsonPropertyName("additiveReference")]
        public ReferenceType? AdditiveReference { get => _additiveReference; set { _additiveReference = value; if (value != null) {{ _additiveCodeableConcept = null; OnPropertyChanged("additiveCodeableConcept", null); }}; OnPropertyChanged("additiveReference", value); } }

                }

                private CodeableConcept? _cap;
        [JsonPropertyName("cap")]
        public CodeableConcept? Cap { get => _cap; set { _cap = value; } }

                private Quantity? _capacity;
        [JsonPropertyName("capacity")]
        public Quantity? Capacity { get => _capacity; set { _capacity = value; } }

                private FhirMarkdown? _description;
        [JsonPropertyName("description")]
        public FhirMarkdown? Description { get => _description; set { _description = value; } }

                private CodeableConcept? _material;
        [JsonPropertyName("material")]
        public CodeableConcept? Material { get => _material; set { _material = value; } }

                private Quantity? _minimumVolumeQuantity;
        [JsonPropertyName("minimumVolumeQuantity")]
        public Quantity? MinimumVolumeQuantity { get => _minimumVolumeQuantity; set { _minimumVolumeQuantity = value; if (value != null) {{ _minimumVolumeString = null; OnPropertyChanged("minimumVolumeString", null); }}; OnPropertyChanged("minimumVolumeQuantity", value); } }

                private FhirString? _minimumVolumeString;
        [JsonPropertyName("minimumVolumeString")]
        public FhirString? MinimumVolumeString { get => _minimumVolumeString; set { _minimumVolumeString = value; if (value != null) {{ _minimumVolumeQuantity = null; OnPropertyChanged("minimumVolumeQuantity", null); }}; OnPropertyChanged("minimumVolumeString", value); } }

                private FhirMarkdown? _preparation;
        [JsonPropertyName("preparation")]
        public FhirMarkdown? Preparation { get => _preparation; set { _preparation = value; } }

                private CodeableConcept? _type;
        [JsonPropertyName("type")]
        public CodeableConcept? Type { get => _type; set { _type = value; } }

            }

            private List<SpecimenDefinition_TypeTested_Handling>? _handling;
        [JsonPropertyName("handling")]
        public List<SpecimenDefinition_TypeTested_Handling>? Handling { get => _handling; set { _handling = value; } }

            /// <summary>
            /// Specimen handling before testing
            /// </summary>
            public partial class SpecimenDefinition_TypeTested_Handling : BackboneElement<SpecimenDefinition_TypeTested_Handling>
            {
                public override string GetFhirTypeName(bool withCapital = true) => withCapital ? "SpecimenDefinition_TypeTested_Handling" : "specimenDefinition_TypeTested_Handling";
                private FhirMarkdown? _instruction;
        [JsonPropertyName("instruction")]
        public FhirMarkdown? Instruction { get => _instruction; set { _instruction = value; } }

                private Duration? _maxDuration;
        [JsonPropertyName("maxDuration")]
        public Duration? MaxDuration { get => _maxDuration; set { _maxDuration = value; } }

                private CodeableConcept? _temperatureQualifier;
        [JsonPropertyName("temperatureQualifier")]
        public CodeableConcept? TemperatureQualifier { get => _temperatureQualifier; set { _temperatureQualifier = value; } }

                private DataTypeServices.DataTypes.ComplexTypes.Range? _temperatureRange;
        [JsonPropertyName("temperatureRange")]
        public DataTypeServices.DataTypes.ComplexTypes.Range? TemperatureRange { get => _temperatureRange; set { _temperatureRange = value; } }

            }

            private FhirBoolean? _isDerived;
        [JsonPropertyName("isDerived")]
        public FhirBoolean? IsDerived { get => _isDerived; set { _isDerived = value; } }

            private FhirCode? _preference;
        [JsonPropertyName("preference")]
        public FhirCode Preference { get => _preference ?? throw new InvalidOperationException("Preference is required"); set { _preference = value; } }

            private List<CodeableConcept>? _rejectionCriterion;
        [JsonPropertyName("rejectionCriterion")]
        public List<CodeableConcept>? RejectionCriterion { get => _rejectionCriterion; set { _rejectionCriterion = value; } }

            private FhirMarkdown? _requirement;
        [JsonPropertyName("requirement")]
        public FhirMarkdown? Requirement { get => _requirement; set { _requirement = value; } }

            private Duration? _retentionTime;
        [JsonPropertyName("retentionTime")]
        public Duration? RetentionTime { get => _retentionTime; set { _retentionTime = value; } }

            private FhirBoolean? _singleUse;
        [JsonPropertyName("singleUse")]
        public FhirBoolean? SingleUse { get => _singleUse; set { _singleUse = value; } }

            private List<CodeableConcept>? _testingDestination;
        [JsonPropertyName("testingDestination")]
        public List<CodeableConcept>? TestingDestination { get => _testingDestination; set { _testingDestination = value; } }

            private CodeableConcept? _type;
        [JsonPropertyName("type")]
        public CodeableConcept? Type { get => _type; set { _type = value; } }

        }

        private FhirUri? _url;
        [JsonPropertyName("url")]
        public FhirUri? Url { get => _url; set { _url = value; OnPropertyChangedByClr(nameof(Url), value); } }

        private List<UsageContext>? _useContext;
        [JsonPropertyName("useContext")]
        public List<UsageContext>? UseContext { get => _useContext; set { _useContext = value; OnPropertyChangedByClr(nameof(UseContext), value); } }

        private FhirString? _version;
        [JsonPropertyName("version")]
        public FhirString? Version { get => _version; set { _version = value; OnPropertyChangedByClr(nameof(Version), value); } }

        private FhirString? _versionAlgorithmString;
        [JsonPropertyName("versionAlgorithmString")]
        public FhirString? VersionAlgorithmString { get => _versionAlgorithmString; set { _versionAlgorithmString = value; if (value != null) {{ _versionAlgorithmCoding = null; OnPropertyChangedByClr(nameof(VersionAlgorithmCoding), null); }}; OnPropertyChangedByClr(nameof(VersionAlgorithmString), value); } }

        private Coding? _versionAlgorithmCoding;
        [JsonPropertyName("versionAlgorithmCoding")]
        public Coding? VersionAlgorithmCoding { get => _versionAlgorithmCoding; set { _versionAlgorithmCoding = value; if (value != null) {{ _versionAlgorithmString = null; OnPropertyChangedByClr(nameof(VersionAlgorithmString), null); }}; OnPropertyChangedByClr(nameof(VersionAlgorithmCoding), value); } }

    }
}
