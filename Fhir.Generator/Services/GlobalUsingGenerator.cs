using System.Text;
using Fhir.Generator.Models;

namespace Fhir.Generator.Services;

/// <summary>
/// 自動生成 Global Using 檔案的服務
/// 解決手動宣告幾百個 Resource 的問題
/// </summary>
public class GlobalUsingGenerator
{
    /// <summary>
    /// 生成 Global Using 檔案
    /// </summary>
    /// <param name="schema">FHIR Schema</param>
    /// <param name="fhirVersion">FHIR 版本</param>
    /// <param name="outputPath">輸出路徑</param>
    public async Task GenerateGlobalUsingsAsync(FhirSchema schema, string fhirVersion, string outputPath)
    {
        var namespaceName = $"Fhir.{fhirVersion}.Models";
        
        var sb = new StringBuilder();
        
        // 檔案標頭
        sb.AppendLine("// <auto-generated />");
        sb.AppendLine($"// FHIR {fhirVersion} Global Using Aliases");
        sb.AppendLine("// This file is automatically generated. Do not edit manually.");
        sb.AppendLine($"// Generated on: {DateTime.UtcNow:yyyy-MM-dd HH:mm:ss} UTC");
        sb.AppendLine();
        
        // 共用命名空間
        sb.AppendLine("// Common namespaces");
        sb.AppendLine("global using System.ComponentModel.DataAnnotations;");
        sb.AppendLine("global using System.Text.Json.Serialization;");
        sb.AppendLine("global using Fhir.Abstractions;");
        sb.AppendLine("global using Fhir.Support.Base;");
        sb.AppendLine();
        
        // Resources
        sb.AppendLine("// FHIR Resources");
        var sortedResources = schema.Resources.Keys.OrderBy(x => x).ToList();
        foreach (var resourceName in sortedResources)
        {
            sb.AppendLine($"global using {resourceName} = {namespaceName}.Resources.{resourceName};");
        }
        sb.AppendLine();
        
        // DataTypes
        sb.AppendLine("// FHIR DataTypes");
        var sortedDataTypes = schema.DataTypes.Keys
            .Where(x => !IsPrimitiveType(x)) // 排除基本類型
            .OrderBy(x => x)
            .ToList();
            
        foreach (var dataTypeName in sortedDataTypes)
        {
            sb.AppendLine($"global using {dataTypeName} = {namespaceName}.DataTypes.{dataTypeName};");
        }
        sb.AppendLine();
        
        // 版本特定的別名
        sb.AppendLine($"// {fhirVersion} Version Aliases");
        sb.AppendLine($"global using FhirResource = {namespaceName}.Base.Resource;");
        sb.AppendLine($"global using FhirElement = {namespaceName}.Base.Element;");
        sb.AppendLine($"global using FhirExtension = {namespaceName}.DataTypes.Extension;");
        
        // 寫入檔案
        var globalUsingsPath = Path.Combine(outputPath, "GlobalUsings.g.cs");
        await File.WriteAllTextAsync(globalUsingsPath, sb.ToString());
        
        Console.WriteLine($"✅ Generated Global Usings: {globalUsingsPath}");
        Console.WriteLine($"   📄 {sortedResources.Count} Resources");
        Console.WriteLine($"   🔧 {sortedDataTypes.Count} DataTypes");
    }
    
    /// <summary>
    /// 生成版本切換指南
    /// </summary>
    /// <param name="fhirVersion">FHIR 版本</param>
    /// <param name="outputPath">輸出路徑</param>
    public async Task GenerateVersionSwitchGuideAsync(string fhirVersion, string outputPath)
    {
        var sb = new StringBuilder();
        
        sb.AppendLine($"# FHIR {fhirVersion} 版本切換指南");
        sb.AppendLine();
        sb.AppendLine("## 🎯 無縫版本切換");
        sb.AppendLine();
        sb.AppendLine("這個專案已經自動設定了所有 FHIR Resources 和 DataTypes 的 Global Using 別名。");
        sb.AppendLine();
        sb.AppendLine("### 使用方式");
        sb.AppendLine("```csharp");
        sb.AppendLine("// 直接使用，無需 using 語句");
        sb.AppendLine("var patient = new Patient();");
        sb.AppendLine("var observation = new Observation();");
        sb.AppendLine("var humanName = new HumanName();");
        sb.AppendLine("```");
        sb.AppendLine();
        sb.AppendLine("### 切換到其他版本");
        sb.AppendLine("1. 改變套件參照");
        sb.AppendLine("2. 重新生成程式碼");
        sb.AppendLine("3. 程式碼自動適用新版本！");
        sb.AppendLine();
        sb.AppendLine("### 版本資訊");
        sb.AppendLine($"- 當前版本: {fhirVersion}");
        sb.AppendLine($"- 生成時間: {DateTime.UtcNow:yyyy-MM-dd HH:mm:ss} UTC");
        sb.AppendLine($"- Global Using 檔案: GlobalUsings.g.cs");
        
        var guidePath = Path.Combine(outputPath, "VERSION_SWITCH_GUIDE.md");
        await File.WriteAllTextAsync(guidePath, sb.ToString());
        
        Console.WriteLine($"✅ Generated Version Switch Guide: {guidePath}");
    }
    
    /// <summary>
    /// 檢查是否為基本類型
    /// </summary>
    private static bool IsPrimitiveType(string typeName)
    {
        var primitiveTypes = new HashSet<string>
        {
            "boolean", "integer", "string", "decimal", "uri", "url", "canonical",
            "base64Binary", "instant", "date", "dateTime", "time", "code", "oid",
            "id", "markdown", "unsignedInt", "positiveInt", "uuid", "xhtml"
        };
        
        return primitiveTypes.Contains(typeName);
    }
}
