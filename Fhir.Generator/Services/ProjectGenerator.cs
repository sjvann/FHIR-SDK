using System.Text;
using Fhir.Generator.Models;

namespace Fhir.Generator.Services;

/// <summary>
/// 專案生成器
/// 生成完整的 Fhir.{版本}.Models 專案結構
/// </summary>
public class ProjectGenerator
{
    /// <summary>
    /// 生成完整的專案結構
    /// </summary>
    /// <param name="fhirVersion">FHIR 版本</param>
    /// <param name="outputDir">輸出目錄</param>
    public async Task GenerateProjectAsync(string fhirVersion, string outputDir)
    {
        Console.WriteLine($"📁 Generating project structure for {fhirVersion}...");
        
        // 建立專案目錄結構
        var resourcesDir = Path.Combine(outputDir, "Resources");
        var baseDir = Path.Combine(outputDir, "Base");
        
        Directory.CreateDirectory(outputDir);
        Directory.CreateDirectory(resourcesDir);
        Directory.CreateDirectory(baseDir);
        
        // 生成 .csproj 檔案
        await GenerateProjectFileAsync(outputDir, fhirVersion);
        
        // 生成 GlobalUsings.cs
        await GenerateGlobalUsingsAsync(outputDir, fhirVersion);
        
        // 生成基礎類別
        await GenerateBaseClassesAsync(baseDir, fhirVersion);
        
        Console.WriteLine($"✅ Project structure generated: {outputDir}");
    }
    
    /// <summary>
    /// 生成專案檔案
    /// </summary>
    private async Task GenerateProjectFileAsync(string projectDir, string fhirVersion)
    {
        var content = $@"<Project Sdk=""Microsoft.NET.Sdk"">

  <PropertyGroup>
    <TargetFramework>net9.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
    <RootNamespace>Fhir.{fhirVersion}.Models</RootNamespace>
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
    <DocumentationFile>bin\$(Configuration)\$(TargetFramework)\Fhir.{fhirVersion}.Models.xml</DocumentationFile>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include=""System.ComponentModel.Annotations"" Version=""5.0.0"" />
    <PackageReference Include=""System.Text.Json"" Version=""8.0.5"" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include=""..\Fhir.TypeFramework\Fhir.TypeFramework.csproj"" />
  </ItemGroup>

</Project>";

        var filePath = Path.Combine(projectDir, $"Fhir.{fhirVersion}.Models.csproj");
        await File.WriteAllTextAsync(filePath, content);
        Console.WriteLine($"  ✅ Generated: {filePath}");
    }
    
    /// <summary>
    /// 生成全域 using 語句
    /// </summary>
    private async Task GenerateGlobalUsingsAsync(string projectDir, string fhirVersion)
    {
        var content = $@"// <auto-generated />
// Global using statements for Fhir.{fhirVersion}.Models

global using System.ComponentModel.DataAnnotations;
global using System.Text.Json.Serialization;
global using Fhir.TypeFramework.DataTypes;
global using Fhir.TypeFramework.Base;

namespace Fhir.{fhirVersion}.Models;
";

        var filePath = Path.Combine(projectDir, "GlobalUsings.cs");
        await File.WriteAllTextAsync(filePath, content);
        Console.WriteLine($"  ✅ Generated: {filePath}");
    }
    
    /// <summary>
    /// 生成基礎類別
    /// </summary>
    private async Task GenerateBaseClassesAsync(string baseDir, string fhirVersion)
    {
        // 生成 Resource 基礎類別
        var resourceContent = $@"// <auto-generated />
// FHIR {fhirVersion} Base Resource Class

using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization;
using Fhir.TypeFramework.DataTypes;

namespace Fhir.{fhirVersion}.Models.Base;

/// <summary>
/// Base class for all FHIR resources.
/// </summary>
public abstract class Resource
{{
    /// <summary>
    /// Resource type name
    /// </summary>
    [JsonPropertyName(""resourceType"")]
    public abstract string ResourceType {{ get; }}

    /// <summary>
    /// Logical id of this artifact
    /// </summary>
    [JsonPropertyName(""id"")]
    public FhirId? Id {{ get; set; }}

    /// <summary>
    /// A human-readable narrative
    /// </summary>
    [JsonPropertyName(""text"")]
    public Narrative? Text {{ get; set; }}

    /// <summary>
    /// Additional content defined by implementations
    /// </summary>
    [JsonPropertyName(""extension"")]
    public List<Extension>? Extension {{ get; set; }}

    /// <summary>
    /// Extensions that cannot be ignored
    /// </summary>
    [JsonPropertyName(""modifierExtension"")]
    public List<Extension>? ModifierExtension {{ get; set; }}

    /// <summary>
    /// Validates this instance according to FHIR rules
    /// </summary>
    public virtual IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {{
        yield break;
    }}
}}

/// <summary>
/// Base class for domain resources.
/// </summary>
public abstract class DomainResource : Resource
{{
    /// <summary>
    /// Contained, inline Resources
    /// </summary>
    [JsonPropertyName(""contained"")]
    public List<Resource>? Contained {{ get; set; }}
}}
";

        var resourceFilePath = Path.Combine(baseDir, "Resource.cs");
        await File.WriteAllTextAsync(resourceFilePath, resourceContent);
        Console.WriteLine($"  ✅ Generated: {resourceFilePath}");
    }
} 