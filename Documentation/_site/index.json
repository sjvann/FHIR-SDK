{
  "docs/Advanced-User-Manual.html": {
    "href": "docs/Advanced-User-Manual.html",
    "title": "FHIR SDK 完整使用手冊",
    "summary": "FHIR SDK 完整使用手冊 目錄 概述 架構深度解析 核心功能 版本遷移 擴展開發 故障排除 概述 FHIR SDK 是一個企業級的.NET FHIR實現，專為需要高性能、可擴展和版本兼容的應用程式而設計。本手冊涵蓋了所有高級功能和最佳實踐。 核心價值主張 類型安全：強型別C#類別對應所有FHIR資源。 高性能序列化：在強型別物件與 JSON/XML 之間進行高效能轉換。 內建驗證：資源本身具備驗證能力，確保資料合規性。 版本管理：內建R5到R6的遷移路徑。 架構深度解析 分層架構 graph TD A[核心層] --> B[資料類型層] B --> C[資源層] C --> D[序列化/驗證層] subgraph core[核心層] E1[版本管理] E2[配置管理] E3[異常處理] end subgraph resources[資源層] C1[Patient] C2[Observation] C3[Practitioner] C4[Organization] end 關鍵組件 1. 版本管理系統 所有核心組件都實現了 IVersionAware 介面，允許在執行時期處理不同版本的 FHIR 資源。 public interface IVersionAware { FhirVersion SupportedVersion { get; } } 2. 序列化器 SDK 提供了高效的 JSON 和 XML 序列化器，可以輕鬆地在強型別物件和字串之間進行轉換。 // 將 Patient 物件序列化為 JSON 字串 var patient = new Patient { Id = \"123\" }; var json = new FhirJsonSerializer().SerializeToString(patient); // 將 XML 字串反序列化為 Observation 物件 var xml = \"<Observation><id value=\\\"456\\\"/></Observation>\"; var observation = new FhirXmlParser().Parse<Observation>(xml); 核心功能 資源的建立與操作 您可以像操作普通 C# 物件一樣建立和修改 FHIR 資源。 var patient = new Patient { Id = Guid.NewGuid().ToString(), Active = true, Name = new List<HumanName> { new HumanName { Use = HumanName.NameUse.Official, Family = \"陳\", Given = new List<string> { \"大文\" } } }, BirthDateElement = new Date(1990, 1, 1) }; patient.Gender = AdministrativeGender.Male; 內建驗證 所有 FHIR 資源物件都內建了 Validate() 方法，可以根據 FHIR 規範驗證其內容。 var validationResult = patient.Validate(); if (!validationResult.IsValid) { foreach (var issue in validationResult.Issues) { Console.WriteLine($\"驗證錯誤: {issue.Details} at {issue.Location}\"); } } 版本遷移 自定義遷移器實現 您可以實現自己的遷移器，處理不同版本之間的資源轉換邏輯。 public class CustomR5ToR6Migrator : BaseFhirMigrator { public override FhirVersion FromVersion => FhirVersion.R5; public override FhirVersion ToVersion => FhirVersion.R6; protected override JsonDocument MigrateInternal(JsonDocument source) { var root = source.RootElement; // ... 在此實現您的轉換邏輯 ... return ConvertPatient(root); } } 擴展開發 自定義資源類型 您可以透過繼承現有的資源類型來建立自己的擴充資源。 [ResourceType(\"CustomPatient\")] public class CustomPatient : Patient { [Element(\"customField\", Order = 10)] [FhirElement(\"customField\", InSummary = true)] public FhirString CustomField { get; set; } public override IDeepCopyable DeepCopy() { var dest = new CustomPatient(); base.CopyTo(dest); if (CustomField != null) dest.CustomField = (FhirString)CustomField.DeepCopy(); return dest; } } 自定義驗證器 您可以實現自己的驗證器，加入客製化的業務規則驗證。 public class CustomFhirValidator : IFhirValidator { public async Task<IValidationResult> ValidateResourceAsync<T>(T resource) where T : IFhirResource { var issues = new List<IValidationIssue>(); // ... 在此實現您的驗證邏輯 ... return new ValidationResult { IsValid = !issues.Any(), Issues = issues }; } } 故障排除 常見問題及解決方案 1. 序列化/反序列化錯誤 問題: Deserialization failed: Unexpected token when parsing... 解決方案: 檢查來源的 JSON/XML 格式是否正確。 確保 resourceType 屬性與您要反序列化的 C# 類型匹配。 2. 驗證失敗 問題: Validate() 回傳 IsValid = false。 解決方案: 仔細檢查 validationResult.Issues 中的詳細資訊，它會指出哪個欄位不符合規範。 對照 FHIR 官方文件，確認欄位的基數 (Cardinality) 和資料類型是否正確。"
  },
  "docs/Architecture.html": {
    "href": "docs/Architecture.html",
    "title": "SDK 架構說明",
    "summary": "SDK 架構說明 核心設計理念 本 FHIR .NET SDK 的核心設計理念是將版本特定的核心定義與通用的功能模組徹底分離。這個設計旨在提供一個清晰、可擴充且易於維護的架構，讓開發者能夠在同一個應用程式中無縫地處理多個 FHIR 版本。 版本特定的核心定義 (Core) 獨立的核心專案：每個 FHIR 版本 (如 R5, R6) 都有一個獨立的、強型別的 C# 類別庫，例如 Fhir.R5.Core。這個專案只包含該版本所有資源和資料類型的定義，不包含任何業務邏輯。 由 CLI 工具生成：當一個新的 FHIR 版本發布時，開發者可以使用本 SDK 提供的 fhir-generator CLI 工具，讀取官方發布的定義檔 (通常是 definitions.json.zip)，並自動生成對應版本的核心專案 (例如 Fhir.R6.Core)。 通用的功能模組 序列化 (Serialization)：提供 Fhir.Serialization.Json 和 Fhir.Serialization.Xml 兩個專案，負責處理強型別物件與 JSON/XML 之間的轉換。這些模組是**版本感知 (Version-Aware)**的，它們會根據開發者當前宣告使用的 FHIR 版本，來採用對應的序列化規則。 驗證 (Validation)：Fhir.Validation 專案提供了資源驗證的功能。它同樣是版本感知的，會根據當前宣告的版本，載入並執行該版本的驗證規則。 支援 (Support)：Fhir.Support 專案提供了一些共用的輔助函式、擴充方法和基礎介面 (如 IVersionAware)。 架構圖 graph TD subgraph \"通用功能模組\" A[Serialization.Json] B[Serialization.Xml] C[Validation] D[Support] end subgraph \"版本特定的核心定義\" E(Core) --> F[R5] E --> G[R6 (未來)] end A --> D B --> D C --> D A --> E B --> E C --> E 工作流程 宣告版本：開發者在應用程式的進入點 (例如，一個靜慶設定檔或啟動類別) 中，宣告要使用的 FHIR 版本。 FhirEnvironment.CurrentVersion = FhirVersion.R5; 使用 SDK：當開發者呼叫 new FhirJsonParser().Parse<Patient>(json) 時，FhirJsonParser 內部會檢查 FhirEnvironment.CurrentVersion。 它會發現當前版本是 R5。 它會動態地載入 Fhir.R5.Core 函式庫。 它會使用 R5 版本的 Patient 強型別定義來進行反序列化。 擴充新版本： 開發者取得 FHIR R6 的官方定義檔 r6-definitions.zip。 執行 CLI 工具：dotnet fhir-generator --version R6 --definition-file r6-definitions.zip。 CLI 工具會在 Core/ 資料夾下建立一個新的 R6/ 子資料夾，其中包含 Fhir.R6.Core.csproj。 開發者將 Fhir.R6.Core.csproj 加入到他們的方案檔中。 現在，開發者可以將應用程式中的版本宣告改為 FhirEnvironment.CurrentVersion = FhirVersion.R6;，SDK 的所有功能都會自動切換到 R6 的實作。 這個架構的最大優勢是可擴充性和關注點分離。通用功能模組的開發可以獨立於任何特定的 FHIR 版本，而對新版本的支援則可以透過 CLI 工具快速、自動地完成，大大降低了維護成本。"
  },
  "docs/Cli-Guide.html": {
    "href": "docs/Cli-Guide.html",
    "title": "CLI 工具指南",
    "summary": "CLI 工具指南 FHIR .NET SDK 提供了一個命令列介面 (CLI) 工具 fhir-generator，用於協助開發者從 FHIR 官方的定義檔自動生成特定版本的強型別核心專案。 安裝 (這部分需要您提供安裝 CLI 工具的具體說明，例如是透過 .NET Global Tool 或是其他方式) # 範例：如果是 .NET Global Tool dotnet tool install --global fhir-generator 使用方法 fhir-generator 的主要功能是讀取一個包含 FHIR 資源定義的檔案 (通常是 zip 檔)，並在 Core/ 目錄下生成對應的 C# 專案。 基本語法 dotnet fhir-generator --version <VERSION> --definition-file <PATH_TO_DEFINITIONS> 參數說明 --version <VERSION>: (必要) 指定要生成的 FHIR 版本號，例如 R6。這個名稱將會用作 Core/ 下的子目錄名稱。 --definition-file <PATH_TO_DEFINITIONS>: (必要) 指向官方 FHIR 定義檔的路徑 (zip 格式)。 範例 假設您已經下載了 FHIR R6 的定義檔 r6-definitions.zip，您可以使用以下命令來生成 Core/R6/ 專案： dotnet fhir-generator --version R6 --definition-file r6-definitions.zip 執行成功後，您的專案結構將會擴充如下： FHIR-SDK/ ├── Core/ │ ├── R5/ │ └── R6/ <-- 新生成的專案 ├── ... 注意事項 請確保您提供的定義檔是完整且未損壞的。 生成過程可能需要幾分鐘的時間，具體取決於定義檔的大小和您的機器性能。"
  },
  "docs/Implementation-Checklist.html": {
    "href": "docs/Implementation-Checklist.html",
    "title": "FHIR SDK 實施檢查清單",
    "summary": "FHIR SDK 實施檢查清單 ✅ 第一階段：核心功能 (已完成) 核心框架 [x] 升級到 .NET 9.0 [x] 啟用 Nullable Reference Types [x] 建立版本化基礎架構 (IVersionAware) [x] 建立強型別 FHIR R5 核心類別 核心功能 [x] JSON 序列化/反序列化 [x] XML 序列化/反序列化 [x] 資源內建驗證框架 \uD83D\uDD04 第二階段：功能完善 (進行中) 驗證系統 [ ] 完善所有 R5 資源的內建驗證規則 [ ] 支援 Profile Validation [ ] 支援 Terminology Validation (版本感知) 序列化增強 [ ] 提供更多序列化選項 (例如，摘要模式) [ ] 提升大規模資料的序列化性能 [ ] 處理自訂擴充的序列化 (版本感知) CLI 工具 [ ] Fhir.Generator 專案初始化 [ ] 從 Profile 生成 C# 類別 [ ] 管理 FHIR 版本定義檔 ⏳ 第三階段：R6 支援與生態系 (計劃中) R6 規範支援 [ ] 監控 R6 規範發展 [ ] 透過 CLI 工具生成 Fhir.R6.Core [ ] 測試 R5 和 R6 的並行支援 開發生態系 [ ] 發布 NuGet 套件 [ ] 建立完整的 API 文件 [ ] 提供更多實用範例 [ ] 撰寫貢獻指南 \uD83D\uDD27 疑難排解 常見問題 序列化/反序列化錯誤 原因：來源 JSON/XML 格式錯誤，或 resourceType 不匹配。 解決方案：使用線上工具檢查格式，並確認反序列化的類型正確。 驗證失敗 原因：資源的屬性不符合當前宣告的 FHIR 版本規範。 解決方案：檢查 ValidationResult.Issues 提供的詳細錯誤資訊，並對照官方文件進行修正。 \uD83C\uDFAF 下一步計劃 短期目標 (1-3個月) [ ] 完成所有 R5 資源的驗證規則。 [ ] 發布第一個 Alpha 版本的 NuGet 套件。 [ ] 完成 CLI 工具生成新版本核心的功能。 長期目標 (6-12個月) [ ] 完整支援 FHIR R6。 [ ] 提供對 GraphQL 的查詢支援 (版本感知)。 [ ] 建立一個活躍的開源社群。 \uD83D\uDCDE 支援 回報問題或建議：在 GitHub 上建立 Issue。 查閱文件：閱讀 docs 資料夾下的 README.md 和 Architecture.md。 最後更新：2024年7月26日"
  },
  "docs/Quick-Start-Guide.html": {
    "href": "docs/Quick-Start-Guide.html",
    "title": "FHIR SDK 快速入門指南",
    "summary": "FHIR SDK 快速入門指南 \uD83C\uDFAF 目標讀者 本指南專為想要在 .NET 環境中使用 FHIR 的開發者而設計，無論您是初學者還是有經驗的開發者，都能快速上手。 \uD83D\uDCDA 什麼是 FHIR？ FHIR (Fast Healthcare Interoperability Resources) 是一個現代化的醫療資訊交換標準，由 HL7 組織制定。它利用 RESTful API 和標準的 JSON/XML 格式，讓不同的醫療資訊系統能夠無縫地交換資料。 核心概念 資源 (Resources)：標準化的資料結構，如 Patient、Observation 等。 序列化：將 C# 物件轉換為 JSON 或 XML 字串。 反序列化：將 JSON 或 XML 字串轉換為 C# 物件。 驗證：確保資料符合 FHIR 規範。 \uD83D\uDE80 5分鐘快速開始 步驟1：建立新專案 # 建立一個新的主控台應用程式 dotnet new console -n MyFhirApp cd MyFhirApp # 安裝 FHIR SDK 套件 (假設已發布至 NuGet) dotnet add package Fhir.SDK 步驟2：讀取、驗證與轉換 假設您有一個 patient.json 檔案： { \"resourceType\": \"Patient\", \"id\": \"example\", \"name\": [ { \"use\": \"official\", \"family\": \"Chalmers\", \"given\": [ \"Peter\", \"James\" ] } ], \"gender\": \"male\", \"birthDate\": \"1974-12-25\" } 在 Program.cs 中撰寫以下程式碼： using System; using System.IO; using System.Linq; using Hl7.Fhir.Model; using Hl7.Fhir.Serialization; class Program { static void Main(string[] args) { // 1. 從 JSON 檔案讀取並反序列化 var jsonContent = File.ReadAllText(\"patient.json\"); var parser = new FhirJsonParser(); Patient patient = parser.Parse<Patient>(jsonContent); Console.WriteLine($\"成功讀取患者: {patient.Name.FirstOrDefault()}\"); // 2. 進行一些簡單的操作 patient.Active = true; // 3. 內建驗證 var validationResult = patient.Validate(); if (validationResult.IsValid) { Console.WriteLine(\"患者資料驗證通過！\"); } else { Console.WriteLine(\"患者資料驗證失敗：\"); foreach (var issue in validationResult.Issues) { Console.WriteLine($\"- {issue.Details}\"); } } // 4. 序列化為 XML var serializer = new FhirXmlSerializer(new SerializerSettings { Pretty = true // 輸出格式化的 XML }); var xmlContent = serializer.SerializeToString(patient); Console.WriteLine(\"\\n轉換為 XML 格式：\"); Console.WriteLine(xmlContent); // 5. 將 XML 寫入檔案 File.WriteAllText(\"patient.xml\", xmlContent); Console.WriteLine(\"\\n已將 XML 內容儲存至 patient.xml\"); } } 步驟3：運行應用程式 dotnet run \uD83D\uDD27 開發工具與資源 推薦工具 Visual Studio 2022 或 VS Code .NET 9 SDK FHIR Official Website：查閱官方規範文件 Simplifier.net：瀏覽和查找 FHIR 資源定義 偵錯技巧 使用 SerializerSettings 中的 Pretty = true 來輸出可讀性更高的 JSON/XML。 在偵錯模式下，檢查反序列化後物件的屬性，確保資料正確對應。 \uD83D\uDCD6 學習資源 FHIR 官方文件：所有 FHIR 資源的權威指南。 本 SDK 的進階使用手冊：深入了解本 SDK 的高級功能。 StackOverflow FHIR 標籤：尋求社群的幫助。 \uD83C\uDFAF 下一步 完成本指南後，您可以嘗試： 處理更複雜的 FHIR 資源，例如 Bundle。 探索如何使用本 SDK 處理自訂的 FHIR Profile 和擴充。 將本 SDK 整合到您現有的 .NET 應用程式中。"
  },
  "index.html": {
    "href": "index.html",
    "title": "FHIR .NET SDK - 強型別 FHIR 開發工具包",
    "summary": "FHIR .NET SDK - 強型別 FHIR 開發工具包 概述 FHIR .NET SDK 是一個為 .NET 開發者設計的高性能、強型別的 FHIR 開發函式庫。它旨在提供一個清晰、版本化的架構，讓開發者可以輕鬆地在應用程式中處理不同版本的 FHIR 資料。 本 SDK 的核心理念是版本特定的核心定義與通用的功能模組分離。開發者只需在使用時宣告所要使用的 FHIR 版本，SDK 內部即可自動處理對應的強型別物件、序列化和驗證規則。 \uD83D\uDE80 核心特性 多版本並行支援：在同一個應用程式中無縫使用 FHIR R5 或未來的 R6 版本。 強型別核心：每個 FHIR 版本都有其獨立的、強型別的 C# 類別庫 (例如 Fhir.R5.Core)。 通用功能模組：提供共用的序列化 (JSON/XML) 和驗證功能，這些功能會根據您所選的 FHIR 版本自動調整。 CLI 工具驅動的版本擴充：當新的 FHIR 版本發布時，可透過 CLI 工具讀取官方定義檔，自動生成對應版本的核心專案。 \uD83D\uDCE6 專案結構 FHIR-SDK/ ├── Fhir.Models/ │ ├── R5/ # FHIR R5 的核心強型別定義 │ │ └── Fhir.R5.Core.csproj │ └── Base/ # FHIR 通用核心 │ └── Fhir.Models.csproj ├── Fhir.Serialization.Json/ # 通用的 JSON 序列化模組 ├── Fhir.Serialization.Xml/ # 通用的 XML 序列化模組 ├── Fhir.Validation/ # 通用的驗證模組 ├── Fhir.Support/ # 共用的輔助函式庫 ├── Fhir.Generator/ # 用於生成新版本核心的 CLI 工具 ├── docs/ # 專案文件 ├── Fhir.Tests/ # 單元測試 └── FHIR Solution.sln # Visual Studio 方案檔 \uD83D\uDEE0️ 快速開始 1. 建立並設定 FHIR 上下文 在您的應用程式中，首先需要建立一個 IFhirContext 的實例，來決定您想要使用的 FHIR 版本。 using Fhir.Support; using Fhir.Support.Versioning; // 建立一個 R5 版本的上下文 IFhirContext fhirContext = new FhirContext(FhirVersion.R5); 2. 使用 SDK 將您建立的上下文實例傳遞給 SDK 的功能模組 (如序列化、驗證)。 using Fhir.Models.R5; using Fhir.Serialization.Json; using Fhir.Serialization.Xml; // 將上下文注入到 Parser 中 var parser = new JsonParser(fhirContext); Patient patient = parser.Parse<Patient>(jsonContent); // 驗證也會使用 R5 的規則 // var validator = new FhirValidator(fhirContext); // 範例 // var validationResult = validator.Validate(patient); // 序列化同樣遵循 R5 規範 // var serializer = new XmlSerializer(fhirContext); // 範例 // string xmlContent = serializer.SerializeToString(patient); 3. 未來擴充到 R6 當 HL7 發布 R6 版本時，您可以使用 CLI 工具來擴充 SDK： # 透過 CLI 工具生成 R6 的核心專案 dotnet fhir-generator --version R6 --definition-file r6-definitions.zip 執行後，您的專案結構會變為： FHIR-SDK/ ├── Fhir.Models/ │ ├── R5/ │ └── R6/ ├── Fhir.Serialization.Json/ # 通用的 JSON 序列化模組 ├── Fhir.Serialization.Xml/ # 通用的 XML 序列化模組 ├── Fhir.Validation/ # 通用的驗證模組 ├── Fhir.Support/ # 共用的輔助函式庫 ├── Fhir.Generator/ # 用於生成新版本核心的 CLI 工具 ├── docs/ # 專案文件 ├── Fhir.Tests/ # 單元測試 └── FHIR Solution.sln # Visual Studio 方案檔 接著，您只需將建立上下文的程式碼改為 new FhirContext(FhirVersion.R6)，即可在應用程式中使用 R6 的強型別物件和規則。 \uD83D\uDCDA 文件 快速入門指南 - 學習如何設定和使用 SDK。 架構說明 - 深入了解 SDK 的設計理念。 CLI 工具指南 - 學習如何使用 CLI 工具擴充新的 FHIR 版本。 \uD83E\uDD1D 貢獻 我們歡迎任何形式的貢獻！請參考 CONTRIBUTING.md 以了解如何參與。 \uD83D\uDCC4 授權 此專案使用 MIT 授權 - 詳見 LICENSE 檔案。"
  }
}