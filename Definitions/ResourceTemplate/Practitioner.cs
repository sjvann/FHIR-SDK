// <auto-generated />
// FHIR R4 Resource: Practitioner
// This file is automatically generated. Do not edit manually.

using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization;
using Fhir.Abstractions;
using Fhir.Support.Base;

namespace Fhir.R4.Models.Resources;

/// <summary>
/// A person who is directly or indirectly involved in the provisioning of healthcare.
/// </summary>
public class Practitioner : IDomainResource
{
    /// <summary>
    /// Resource type name
    /// </summary>
    [JsonPropertyName("resourceType")]
    public string ResourceType => "Practitioner";

    /// <summary>
    /// Logical id of this artifact
    /// </summary>
    [JsonPropertyName("id")]
    public string? Id { get; set; }

    /// <summary>
    /// A human-readable narrative
    /// </summary>
    [JsonPropertyName("text")]
    public object? Text { get; set; }

    /// <summary>
    /// Additional content defined by implementations
    /// </summary>
    [JsonPropertyName("extension")]
    public IList<object>? Extension { get; set; }

    /// <summary>
    /// Extensions that cannot be ignored
    /// </summary>
    [JsonPropertyName("modifierExtension")]
    public IList<object>? ModifierExtension { get; set; }

    /// <summary>
    /// An identifier for the person as this agent
    /// </summary>
    [JsonPropertyName("identifier")]
    public List<Identifier> IdentifierValue { get; set; }

    /// <summary>
    /// Whether this practitioner&apos;s record is in active use
    /// </summary>
    [JsonPropertyName("active")]
    public FhirBoolean Active { get; set; }

    /// <summary>
    /// The name(s) associated with the practitioner
    /// </summary>
    [JsonPropertyName("name")]
    public List<HumanName> Name { get; set; }

    /// <summary>
    /// A contact detail for the practitioner (that apply to all roles)
    /// </summary>
    [JsonPropertyName("telecom")]
    public List<ContactPoint> Telecom { get; set; }

    /// <summary>
    /// Address(es) of the practitioner that are not role specific (typically home address)
    /// </summary>
    [JsonPropertyName("address")]
    public List<Address> AddressValue { get; set; }

    /// <summary>
    /// male | female | other | unknown
    /// </summary>
    [JsonPropertyName("gender")]
    public FhirCode Gender { get; set; }

    /// <summary>
    /// The date  on which the practitioner was born
    /// </summary>
    [JsonPropertyName("birthDate")]
    public FhirDate BirthDate { get; set; }

    /// <summary>
    /// Image of the person
    /// </summary>
    [JsonPropertyName("photo")]
    public List<Attachment> Photo { get; set; }

    /// <summary>
    /// Certification, licenses, or training pertaining to the provision of care
    /// </summary>
    [JsonPropertyName("qualification")]
    public List<BackboneElement> Qualification { get; set; }

    /// <summary>
    /// An identifier for this qualification for the practitioner
    /// </summary>
    [JsonPropertyName("identifier")]
    public List<Identifier> IdentifierValue { get; set; }

    /// <summary>
    /// Coded representation of the qualification
    /// </summary>
    [Required]
    [JsonPropertyName("code")]
    public CodeableConcept Code { get; set; }

    /// <summary>
    /// Period during which the qualification is valid
    /// </summary>
    [JsonPropertyName("period")]
    public Period PeriodValue { get; set; }

    /// <summary>
    /// Organization that regulates and issues the qualification
    /// </summary>
    [JsonPropertyName("issuer")]
    public Reference Issuer { get; set; }

    /// <summary>
    /// A language the practitioner can use in patient communication
    /// </summary>
    [JsonPropertyName("communication")]
    public List<CodeableConcept> Communication { get; set; }

    /// <summary>
    /// Validates this instance according to FHIR rules
    /// </summary>
    public override IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        foreach (var result in base.Validate(validationContext))
            yield return result;

        // TODO: Add specific validation rules
    }

}
