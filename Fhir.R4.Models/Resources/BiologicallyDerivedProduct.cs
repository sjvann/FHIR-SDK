// <auto-generated />
// FHIR R4 Resource: BiologicallyDerivedProduct
// This file is automatically generated. Do not edit manually.

using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization;
using Fhir.R4.Models.Base;
using Fhir.TypeFramework.DataTypes;

namespace Fhir.R4.Models.Resources;

/// <summary>
/// A material substance originating from a biological entity intended to be transplanted or infused
into another (possibly the same) biological entity.
/// </summary>
public class BiologicallyDerivedProduct : DomainResource
{
    /// <summary>
    /// Resource type name
    /// </summary>
    [JsonPropertyName("resourceType")]
    public override string ResourceType => "BiologicallyDerivedProduct";

    /// <summary>
    /// External ids for this item
    /// </summary>
    [JsonPropertyName("identifier")]
    public List<Identifier>? IdentifierValue { get; set; }

    /// <summary>
    /// organ | tissue | fluid | cells | biologicalAgent
    /// </summary>
    [JsonPropertyName("productCategory")]
    public FhirCode ProductCategory { get; set; }

    /// <summary>
    /// What this biologically derived product is
    /// </summary>
    [JsonPropertyName("productCode")]
    public CodeableConcept ProductCode { get; set; }

    /// <summary>
    /// available | unavailable
    /// </summary>
    [JsonPropertyName("status")]
    public FhirCode Status { get; set; }

    /// <summary>
    /// Procedure request
    /// </summary>
    [JsonPropertyName("request")]
    public List<Reference>? Request { get; set; }

    /// <summary>
    /// The amount of this biologically derived product
    /// </summary>
    [JsonPropertyName("quantity")]
    public FhirInteger Quantity { get; set; }

    /// <summary>
    /// BiologicallyDerivedProduct parent
    /// </summary>
    [JsonPropertyName("parent")]
    public List<Reference>? Parent { get; set; }

    /// <summary>
    /// How this product was collected
    /// </summary>
    [JsonPropertyName("collection")]
    public BackboneElement Collection { get; set; }

    /// <summary>
    /// Individual performing collection
    /// </summary>
    [JsonPropertyName("collector")]
    public Reference Collector { get; set; }

    /// <summary>
    /// Who is product from
    /// </summary>
    [JsonPropertyName("source")]
    public Reference Source { get; set; }

    /// <summary>
    /// Any processing of the product during collection
    /// </summary>
    [JsonPropertyName("processing")]
    public List<BackboneElement>? Processing { get; set; }

    /// <summary>
    /// Description of of processing
    /// </summary>
    [JsonPropertyName("description")]
    public FhirString Description { get; set; }

    /// <summary>
    /// Procesing code
    /// </summary>
    [JsonPropertyName("procedure")]
    public CodeableConcept Procedure { get; set; }

    /// <summary>
    /// Substance added during processing
    /// </summary>
    [JsonPropertyName("additive")]
    public Reference Additive { get; set; }

    /// <summary>
    /// Any manipulation of product post-collection
    /// </summary>
    [JsonPropertyName("manipulation")]
    public BackboneElement Manipulation { get; set; }

    /// <summary>
    /// Description of manipulation
    /// </summary>
    [JsonPropertyName("description")]
    public FhirString Description { get; set; }

    /// <summary>
    /// Product storage
    /// </summary>
    [JsonPropertyName("storage")]
    public List<BackboneElement>? Storage { get; set; }

    /// <summary>
    /// Description of storage
    /// </summary>
    [JsonPropertyName("description")]
    public FhirString Description { get; set; }

    /// <summary>
    /// Storage temperature
    /// </summary>
    [JsonPropertyName("temperature")]
    public FhirDecimal Temperature { get; set; }

    /// <summary>
    /// farenheit | celsius | kelvin
    /// </summary>
    [JsonPropertyName("scale")]
    public FhirCode Scale { get; set; }

    /// <summary>
    /// Storage timeperiod
    /// </summary>
    [JsonPropertyName("duration")]
    public Period Duration { get; set; }

    /// <summary>
    /// Validates this instance according to FHIR rules
    /// </summary>
    public override IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        foreach (var result in base.Validate(validationContext))
            yield return result;

        // TODO: Add specific validation rules
    }

}
