// <auto-generated />
// FHIR R4 Resource: DiagnosticReport
// This file is automatically generated. Do not edit manually.

using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization;
using Fhir.R4.Models.Base;
using Fhir.TypeFramework.DataTypes;

namespace Fhir.R4.Models.Resources;

/// <summary>
/// The findings and interpretation of diagnostic  tests performed on patients, groups of patients, devices, and locations, and/or specimens derived from these. The report includes clinical context such as requesting and provider information, and some mix of atomic results, images, textual and coded interpretations, and formatted representation of diagnostic reports.
/// </summary>
public class DiagnosticReport : DomainResource
{
    /// <summary>
    /// Resource type name
    /// </summary>
    [JsonPropertyName("resourceType")]
    public override string ResourceType => "DiagnosticReport";

    /// <summary>
    /// Business identifier for report
    /// </summary>
    [JsonPropertyName("identifier")]
    public List<Identifier>? IdentifierValue { get; set; }

    /// <summary>
    /// What was requested
    /// </summary>
    [JsonPropertyName("basedOn")]
    public List<Reference>? BasedOn { get; set; }

    /// <summary>
    /// registered | partial | preliminary | final +
    /// </summary>
    [Required]
    [JsonPropertyName("status")]
    public FhirCode Status { get; set; }

    /// <summary>
    /// Service category
    /// </summary>
    [JsonPropertyName("category")]
    public List<CodeableConcept>? Category { get; set; }

    /// <summary>
    /// Name/Code for this diagnostic report
    /// </summary>
    [Required]
    [JsonPropertyName("code")]
    public CodeableConcept Code { get; set; }

    /// <summary>
    /// The subject of the report - usually, but not always, the patient
    /// </summary>
    [JsonPropertyName("subject")]
    public Reference Subject { get; set; }

    /// <summary>
    /// Health care event when test ordered
    /// </summary>
    [JsonPropertyName("encounter")]
    public Reference Encounter { get; set; }

    /// <summary>
    /// DateTime this version was made
    /// </summary>
    [JsonPropertyName("issued")]
    public FhirInstant Issued { get; set; }

    /// <summary>
    /// Responsible Diagnostic Service
    /// </summary>
    [JsonPropertyName("performer")]
    public List<Reference>? Performer { get; set; }

    /// <summary>
    /// Primary result interpreter
    /// </summary>
    [JsonPropertyName("resultsInterpreter")]
    public List<Reference>? ResultsInterpreter { get; set; }

    /// <summary>
    /// Specimens this report is based on
    /// </summary>
    [JsonPropertyName("specimen")]
    public List<Reference>? Specimen { get; set; }

    /// <summary>
    /// Observations
    /// </summary>
    [JsonPropertyName("result")]
    public List<Reference>? Result { get; set; }

    /// <summary>
    /// Reference to full details of imaging associated with the diagnostic report
    /// </summary>
    [JsonPropertyName("imagingStudy")]
    public List<Reference>? ImagingStudy { get; set; }

    /// <summary>
    /// Key images associated with this report
    /// </summary>
    [JsonPropertyName("media")]
    public List<BackboneElement>? Media { get; set; }

    /// <summary>
    /// Comment about the image (e.g. explanation)
    /// </summary>
    [JsonPropertyName("comment")]
    public FhirString Comment { get; set; }

    /// <summary>
    /// Reference to the image source
    /// </summary>
    [Required]
    [JsonPropertyName("link")]
    public Reference Link { get; set; }

    /// <summary>
    /// Clinical conclusion (interpretation) of test results
    /// </summary>
    [JsonPropertyName("conclusion")]
    public FhirString Conclusion { get; set; }

    /// <summary>
    /// Codes for the clinical conclusion of test results
    /// </summary>
    [JsonPropertyName("conclusionCode")]
    public List<CodeableConcept>? ConclusionCode { get; set; }

    /// <summary>
    /// Entire report as issued
    /// </summary>
    [JsonPropertyName("presentedForm")]
    public List<Attachment>? PresentedForm { get; set; }

    /// <summary>
    /// Validates this instance according to FHIR rules
    /// </summary>
    public override IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        foreach (var result in base.Validate(validationContext))
            yield return result;

        // TODO: Add specific validation rules
    }

}
