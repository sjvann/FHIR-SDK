// <auto-generated />
// FHIR R4 Resource: DeviceRequest
// This file is automatically generated. Do not edit manually.

using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization;
using Fhir.R4.Models.Base;
using Fhir.TypeFramework.DataTypes;

namespace Fhir.R4.Models.Resources;

/// <summary>
/// Represents a request for a patient to employ a medical device. The device may be an implantable device, or an external assistive device, such as a walker.
/// </summary>
public class DeviceRequest : DomainResource
{
    /// <summary>
    /// Resource type name
    /// </summary>
    [JsonPropertyName("resourceType")]
    public override string ResourceType => "DeviceRequest";

    /// <summary>
    /// External Request identifier
    /// </summary>
    [JsonPropertyName("identifier")]
    public List<Identifier>? IdentifierValue { get; set; }

    /// <summary>
    /// Instantiates FHIR protocol or definition
    /// </summary>
    [JsonPropertyName("instantiatesCanonical")]
    public List<FhirCanonical>? InstantiatesCanonical { get; set; }

    /// <summary>
    /// Instantiates external protocol or definition
    /// </summary>
    [JsonPropertyName("instantiatesUri")]
    public List<FhirUri>? InstantiatesUri { get; set; }

    /// <summary>
    /// What request fulfills
    /// </summary>
    [JsonPropertyName("basedOn")]
    public List<Reference>? BasedOn { get; set; }

    /// <summary>
    /// What request replaces
    /// </summary>
    [JsonPropertyName("priorRequest")]
    public List<Reference>? PriorRequest { get; set; }

    /// <summary>
    /// Identifier of composite request
    /// </summary>
    [JsonPropertyName("groupIdentifier")]
    public Identifier GroupIdentifier { get; set; }

    /// <summary>
    /// draft | active | on-hold | revoked | completed | entered-in-error | unknown
    /// </summary>
    [JsonPropertyName("status")]
    public FhirCode Status { get; set; }

    /// <summary>
    /// proposal | plan | directive | order | original-order | reflex-order | filler-order | instance-order | option
    /// </summary>
    [Required]
    [JsonPropertyName("intent")]
    public FhirCode Intent { get; set; }

    /// <summary>
    /// routine | urgent | asap | stat
    /// </summary>
    [JsonPropertyName("priority")]
    public FhirCode Priority { get; set; }

    /// <summary>
    /// Device details
    /// </summary>
    [JsonPropertyName("parameter")]
    public List<BackboneElement>? Parameter { get; set; }

    /// <summary>
    /// Focus of request
    /// </summary>
    [Required]
    [JsonPropertyName("subject")]
    public Reference Subject { get; set; }

    /// <summary>
    /// Encounter motivating request
    /// </summary>
    [JsonPropertyName("encounter")]
    public Reference Encounter { get; set; }

    /// <summary>
    /// When recorded
    /// </summary>
    [JsonPropertyName("authoredOn")]
    public FhirDateTime AuthoredOn { get; set; }

    /// <summary>
    /// Who/what is requesting diagnostics
    /// </summary>
    [JsonPropertyName("requester")]
    public Reference Requester { get; set; }

    /// <summary>
    /// Filler role
    /// </summary>
    [JsonPropertyName("performerType")]
    public CodeableConcept PerformerType { get; set; }

    /// <summary>
    /// Requested Filler
    /// </summary>
    [JsonPropertyName("performer")]
    public Reference Performer { get; set; }

    /// <summary>
    /// Coded Reason for request
    /// </summary>
    [JsonPropertyName("reasonCode")]
    public List<CodeableConcept>? ReasonCode { get; set; }

    /// <summary>
    /// Linked Reason for request
    /// </summary>
    [JsonPropertyName("reasonReference")]
    public List<Reference>? ReasonReference { get; set; }

    /// <summary>
    /// Associated insurance coverage
    /// </summary>
    [JsonPropertyName("insurance")]
    public List<Reference>? Insurance { get; set; }

    /// <summary>
    /// Additional clinical information
    /// </summary>
    [JsonPropertyName("supportingInfo")]
    public List<Reference>? SupportingInfo { get; set; }

    /// <summary>
    /// Notes or comments
    /// </summary>
    [JsonPropertyName("note")]
    public List<Annotation>? Note { get; set; }

    /// <summary>
    /// Request provenance
    /// </summary>
    [JsonPropertyName("relevantHistory")]
    public List<Reference>? RelevantHistory { get; set; }

    /// <summary>
    /// Validates this instance according to FHIR rules
    /// </summary>
    public override IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        foreach (var result in base.Validate(validationContext))
            yield return result;

        // TODO: Add specific validation rules
    }

}
