// <auto-generated />
// FHIR R4 Resource: Media
// This file is automatically generated. Do not edit manually.

using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization;
using Fhir.R4.Models.Base;
using Fhir.TypeFramework.DataTypes;

namespace Fhir.R4.Models.Resources;

/// <summary>
/// A photo, video, or audio recording acquired or used in healthcare. The actual content may be inline or provided by direct reference.
/// </summary>
public class Media : DomainResource
{
    /// <summary>
    /// Resource type name
    /// </summary>
    [JsonPropertyName("resourceType")]
    public override string ResourceType => "Media";

    /// <summary>
    /// Identifier(s) for the image
    /// </summary>
    [JsonPropertyName("identifier")]
    public List<Identifier>? IdentifierValue { get; set; }

    /// <summary>
    /// Procedure that caused this media to be created
    /// </summary>
    [JsonPropertyName("basedOn")]
    public List<Reference>? BasedOn { get; set; }

    /// <summary>
    /// Part of referenced event
    /// </summary>
    [JsonPropertyName("partOf")]
    public List<Reference>? PartOf { get; set; }

    /// <summary>
    /// preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown
    /// </summary>
    [Required]
    [JsonPropertyName("status")]
    public FhirCode Status { get; set; }

    /// <summary>
    /// Classification of media as image, video, or audio
    /// </summary>
    [JsonPropertyName("type")]
    public CodeableConcept Type { get; set; }

    /// <summary>
    /// The type of acquisition equipment/process
    /// </summary>
    [JsonPropertyName("modality")]
    public CodeableConcept Modality { get; set; }

    /// <summary>
    /// Imaging view, e.g. Lateral or Antero-posterior
    /// </summary>
    [JsonPropertyName("view")]
    public CodeableConcept View { get; set; }

    /// <summary>
    /// Who/What this Media is a record of
    /// </summary>
    [JsonPropertyName("subject")]
    public Reference Subject { get; set; }

    /// <summary>
    /// Encounter associated with media
    /// </summary>
    [JsonPropertyName("encounter")]
    public Reference Encounter { get; set; }

    /// <summary>
    /// Date/Time this version was made available
    /// </summary>
    [JsonPropertyName("issued")]
    public FhirInstant Issued { get; set; }

    /// <summary>
    /// The person who generated the image
    /// </summary>
    [JsonPropertyName("operator")]
    public Reference Operator { get; set; }

    /// <summary>
    /// Why was event performed?
    /// </summary>
    [JsonPropertyName("reasonCode")]
    public List<CodeableConcept>? ReasonCode { get; set; }

    /// <summary>
    /// Observed body part
    /// </summary>
    [JsonPropertyName("bodySite")]
    public CodeableConcept BodySite { get; set; }

    /// <summary>
    /// Name of the device/manufacturer
    /// </summary>
    [JsonPropertyName("deviceName")]
    public FhirString DeviceName { get; set; }

    /// <summary>
    /// Observing Device
    /// </summary>
    [JsonPropertyName("device")]
    public Reference Device { get; set; }

    /// <summary>
    /// Height of the image in pixels (photo/video)
    /// </summary>
    [JsonPropertyName("height")]
    public FhirPositiveInt Height { get; set; }

    /// <summary>
    /// Width of the image in pixels (photo/video)
    /// </summary>
    [JsonPropertyName("width")]
    public FhirPositiveInt Width { get; set; }

    /// <summary>
    /// Number of frames if &amp;gt; 1 (photo)
    /// </summary>
    [JsonPropertyName("frames")]
    public FhirPositiveInt Frames { get; set; }

    /// <summary>
    /// Length in seconds (audio / video)
    /// </summary>
    [JsonPropertyName("duration")]
    public FhirDecimal Duration { get; set; }

    /// <summary>
    /// Actual Media - reference or data
    /// </summary>
    [Required]
    [JsonPropertyName("content")]
    public Attachment Content { get; set; }

    /// <summary>
    /// Comments made about the media
    /// </summary>
    [JsonPropertyName("note")]
    public List<Annotation>? Note { get; set; }

    /// <summary>
    /// Validates this instance according to FHIR rules
    /// </summary>
    public override IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        foreach (var result in base.Validate(validationContext))
            yield return result;

        // TODO: Add specific validation rules
    }

}
