// <auto-generated />
// FHIR R4 Resource: Device
// This file is automatically generated. Do not edit manually.

using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization;
using Fhir.R4.Models.Base;
using Fhir.TypeFramework.DataTypes;

namespace Fhir.R4.Models.Resources;

/// <summary>
/// A type of a manufactured item that is used in the provision of healthcare without being substantially changed through that activity. The device may be a medical or non-medical device.
/// </summary>
public class Device : DomainResource
{
    /// <summary>
    /// Resource type name
    /// </summary>
    [JsonPropertyName("resourceType")]
    public override string ResourceType => "Device";

    /// <summary>
    /// Instance identifier
    /// </summary>
    [JsonPropertyName("identifier")]
    public List<Identifier>? IdentifierValue { get; set; }

    /// <summary>
    /// The reference to the definition for the device
    /// </summary>
    [JsonPropertyName("definition")]
    public Reference Definition { get; set; }

    /// <summary>
    /// Unique Device Identifier (UDI) Barcode string
    /// </summary>
    [JsonPropertyName("udiCarrier")]
    public List<BackboneElement>? UdiCarrier { get; set; }

    /// <summary>
    /// Mandatory fixed portion of UDI
    /// </summary>
    [JsonPropertyName("deviceIdentifier")]
    public FhirString DeviceIdentifier { get; set; }

    /// <summary>
    /// UDI Issuing Organization
    /// </summary>
    [JsonPropertyName("issuer")]
    public FhirUri Issuer { get; set; }

    /// <summary>
    /// Regional UDI authority
    /// </summary>
    [JsonPropertyName("jurisdiction")]
    public FhirUri Jurisdiction { get; set; }

    /// <summary>
    /// UDI Machine Readable Barcode String
    /// </summary>
    [JsonPropertyName("carrierAIDC")]
    public FhirBase64Binary CarrierAIDC { get; set; }

    /// <summary>
    /// UDI Human Readable Barcode String
    /// </summary>
    [JsonPropertyName("carrierHRF")]
    public FhirString CarrierHRF { get; set; }

    /// <summary>
    /// barcode | rfid | manual +
    /// </summary>
    [JsonPropertyName("entryType")]
    public FhirCode EntryType { get; set; }

    /// <summary>
    /// active | inactive | entered-in-error | unknown
    /// </summary>
    [JsonPropertyName("status")]
    public FhirCode Status { get; set; }

    /// <summary>
    /// online | paused | standby | offline | not-ready | transduc-discon | hw-discon | off
    /// </summary>
    [JsonPropertyName("statusReason")]
    public List<CodeableConcept>? StatusReason { get; set; }

    /// <summary>
    /// The distinct identification string
    /// </summary>
    [JsonPropertyName("distinctIdentifier")]
    public FhirString DistinctIdentifier { get; set; }

    /// <summary>
    /// Name of device manufacturer
    /// </summary>
    [JsonPropertyName("manufacturer")]
    public FhirString Manufacturer { get; set; }

    /// <summary>
    /// Date when the device was made
    /// </summary>
    [JsonPropertyName("manufactureDate")]
    public FhirDateTime ManufactureDate { get; set; }

    /// <summary>
    /// Date and time of expiry of this device (if applicable)
    /// </summary>
    [JsonPropertyName("expirationDate")]
    public FhirDateTime ExpirationDate { get; set; }

    /// <summary>
    /// Lot number of manufacture
    /// </summary>
    [JsonPropertyName("lotNumber")]
    public FhirString LotNumber { get; set; }

    /// <summary>
    /// Serial number assigned by the manufacturer
    /// </summary>
    [JsonPropertyName("serialNumber")]
    public FhirString SerialNumber { get; set; }

    /// <summary>
    /// The name of the device as given by the manufacturer
    /// </summary>
    [JsonPropertyName("deviceName")]
    public List<BackboneElement>? DeviceName { get; set; }

    /// <summary>
    /// The name of the device
    /// </summary>
    [Required]
    [JsonPropertyName("name")]
    public FhirString Name { get; set; }

    /// <summary>
    /// udi-label-name | user-friendly-name | patient-reported-name | manufacturer-name | model-name | other
    /// </summary>
    [Required]
    [JsonPropertyName("type")]
    public FhirCode Type { get; set; }

    /// <summary>
    /// The model number for the device
    /// </summary>
    [JsonPropertyName("modelNumber")]
    public FhirString ModelNumber { get; set; }

    /// <summary>
    /// The part number of the device
    /// </summary>
    [JsonPropertyName("partNumber")]
    public FhirString PartNumber { get; set; }

    /// <summary>
    /// The kind or type of device
    /// </summary>
    [JsonPropertyName("type")]
    public CodeableConcept Type { get; set; }

    /// <summary>
    /// The capabilities supported on a  device, the standards to which the device conforms for a particular purpose, and used for the communication
    /// </summary>
    [JsonPropertyName("specialization")]
    public List<BackboneElement>? Specialization { get; set; }

    /// <summary>
    /// The standard that is used to operate and communicate
    /// </summary>
    [Required]
    [JsonPropertyName("systemType")]
    public CodeableConcept SystemType { get; set; }

    /// <summary>
    /// The version of the standard that is used to operate and communicate
    /// </summary>
    [JsonPropertyName("version")]
    public FhirString Version { get; set; }

    /// <summary>
    /// The actual design of the device or software version running on the device
    /// </summary>
    [JsonPropertyName("version")]
    public List<BackboneElement>? Version { get; set; }

    /// <summary>
    /// The type of the device version
    /// </summary>
    [JsonPropertyName("type")]
    public CodeableConcept Type { get; set; }

    /// <summary>
    /// A single component of the device version
    /// </summary>
    [JsonPropertyName("component")]
    public Identifier Component { get; set; }

    /// <summary>
    /// The version text
    /// </summary>
    [Required]
    [JsonPropertyName("value")]
    public FhirString Value { get; set; }

    /// <summary>
    /// The actual configuration settings of a device as it actually operates, e.g., regulation status, time properties
    /// </summary>
    [JsonPropertyName("property")]
    public List<BackboneElement>? Property { get; set; }

    /// <summary>
    /// Code that specifies the property DeviceDefinitionPropetyCode (Extensible)
    /// </summary>
    [Required]
    [JsonPropertyName("type")]
    public CodeableConcept Type { get; set; }

    /// <summary>
    /// Property value as a quantity
    /// </summary>
    [JsonPropertyName("valueQuantity")]
    public List<Quantity>? ValueQuantity { get; set; }

    /// <summary>
    /// Property value as a code, e.g., NTP4 (synced to NTP)
    /// </summary>
    [JsonPropertyName("valueCode")]
    public List<CodeableConcept>? ValueCode { get; set; }

    /// <summary>
    /// Patient to whom Device is affixed
    /// </summary>
    [JsonPropertyName("patient")]
    public Reference Patient { get; set; }

    /// <summary>
    /// Organization responsible for device
    /// </summary>
    [JsonPropertyName("owner")]
    public Reference Owner { get; set; }

    /// <summary>
    /// Details for human/organization for support
    /// </summary>
    [JsonPropertyName("contact")]
    public List<ContactPoint>? Contact { get; set; }

    /// <summary>
    /// Where the device is found
    /// </summary>
    [JsonPropertyName("location")]
    public Reference Location { get; set; }

    /// <summary>
    /// Network address to contact device
    /// </summary>
    [JsonPropertyName("url")]
    public FhirUri Url { get; set; }

    /// <summary>
    /// Device notes and comments
    /// </summary>
    [JsonPropertyName("note")]
    public List<Annotation>? Note { get; set; }

    /// <summary>
    /// Safety Characteristics of Device
    /// </summary>
    [JsonPropertyName("safety")]
    public List<CodeableConcept>? Safety { get; set; }

    /// <summary>
    /// The parent device
    /// </summary>
    [JsonPropertyName("parent")]
    public Reference Parent { get; set; }

    /// <summary>
    /// Validates this instance according to FHIR rules
    /// </summary>
    public override IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        foreach (var result in base.Validate(validationContext))
            yield return result;

        // TODO: Add specific validation rules
    }

}
