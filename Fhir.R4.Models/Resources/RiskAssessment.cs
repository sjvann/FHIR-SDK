// <auto-generated />
// FHIR R4 Resource: RiskAssessment
// This file is automatically generated. Do not edit manually.

using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization;
using Fhir.R4.Models.Base;
using Fhir.TypeFramework.DataTypes;

namespace Fhir.R4.Models.Resources;

/// <summary>
/// An assessment of the likely outcome(s) for a patient or other subject as well as the likelihood of each outcome.
/// </summary>
public class RiskAssessment : DomainResource
{
    /// <summary>
    /// Resource type name
    /// </summary>
    [JsonPropertyName("resourceType")]
    public override string ResourceType => "RiskAssessment";

    /// <summary>
    /// Unique identifier for the assessment
    /// </summary>
    [JsonPropertyName("identifier")]
    public List<Identifier>? IdentifierValue { get; set; }

    /// <summary>
    /// Request fulfilled by this assessment
    /// </summary>
    [JsonPropertyName("basedOn")]
    public Reference BasedOn { get; set; }

    /// <summary>
    /// Part of this occurrence
    /// </summary>
    [JsonPropertyName("parent")]
    public Reference Parent { get; set; }

    /// <summary>
    /// registered | preliminary | final | amended +
    /// </summary>
    [Required]
    [JsonPropertyName("status")]
    public FhirCode Status { get; set; }

    /// <summary>
    /// Evaluation mechanism
    /// </summary>
    [JsonPropertyName("method")]
    public CodeableConcept Method { get; set; }

    /// <summary>
    /// Type of assessment
    /// </summary>
    [JsonPropertyName("code")]
    public CodeableConcept Code { get; set; }

    /// <summary>
    /// Who/what does assessment apply to?
    /// </summary>
    [Required]
    [JsonPropertyName("subject")]
    public Reference Subject { get; set; }

    /// <summary>
    /// Where was assessment performed?
    /// </summary>
    [JsonPropertyName("encounter")]
    public Reference Encounter { get; set; }

    /// <summary>
    /// Condition assessed
    /// </summary>
    [JsonPropertyName("condition")]
    public Reference Condition { get; set; }

    /// <summary>
    /// Who did assessment?
    /// </summary>
    [JsonPropertyName("performer")]
    public Reference Performer { get; set; }

    /// <summary>
    /// Why the assessment was necessary?
    /// </summary>
    [JsonPropertyName("reasonCode")]
    public List<CodeableConcept>? ReasonCode { get; set; }

    /// <summary>
    /// Why the assessment was necessary?
    /// </summary>
    [JsonPropertyName("reasonReference")]
    public List<Reference>? ReasonReference { get; set; }

    /// <summary>
    /// Information used in assessment
    /// </summary>
    [JsonPropertyName("basis")]
    public List<Reference>? Basis { get; set; }

    /// <summary>
    /// Outcome predicted
    /// </summary>
    [JsonPropertyName("prediction")]
    public List<BackboneElement>? Prediction { get; set; }

    /// <summary>
    /// Possible outcome for the subject
    /// </summary>
    [JsonPropertyName("outcome")]
    public CodeableConcept Outcome { get; set; }

    /// <summary>
    /// Likelihood of specified outcome as a qualitative value
    /// </summary>
    [JsonPropertyName("qualitativeRisk")]
    public CodeableConcept QualitativeRisk { get; set; }

    /// <summary>
    /// Relative likelihood
    /// </summary>
    [JsonPropertyName("relativeRisk")]
    public FhirDecimal RelativeRisk { get; set; }

    /// <summary>
    /// Explanation of prediction
    /// </summary>
    [JsonPropertyName("rationale")]
    public FhirString Rationale { get; set; }

    /// <summary>
    /// How to reduce risk
    /// </summary>
    [JsonPropertyName("mitigation")]
    public FhirString Mitigation { get; set; }

    /// <summary>
    /// Comments on the risk assessment
    /// </summary>
    [JsonPropertyName("note")]
    public List<Annotation>? Note { get; set; }

    /// <summary>
    /// Validates this instance according to FHIR rules
    /// </summary>
    public override IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        foreach (var result in base.Validate(validationContext))
            yield return result;

        // TODO: Add specific validation rules
    }

}
