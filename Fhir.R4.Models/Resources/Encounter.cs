// <auto-generated />
// FHIR R4 Resource: Encounter
// This file is automatically generated. Do not edit manually.

using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization;
using Fhir.Abstractions;
using Fhir.Support.Base;

namespace Fhir.R4.Models.Resources;

/// <summary>
/// An interaction between a patient and healthcare provider(s) for the purpose of providing healthcare service(s) or assessing the health status of a patient.
/// </summary>
public class Encounter : IDomainResource
{
    /// <summary>
    /// Resource type name
    /// </summary>
    [JsonPropertyName("resourceType")]
    public string ResourceType => "Encounter";

    /// <summary>
    /// Logical id of this artifact
    /// </summary>
    [JsonPropertyName("id")]
    public string? Id { get; set; }

    /// <summary>
    /// A human-readable narrative
    /// </summary>
    [JsonPropertyName("text")]
    public object? Text { get; set; }

    /// <summary>
    /// Additional content defined by implementations
    /// </summary>
    [JsonPropertyName("extension")]
    public IList<object>? Extension { get; set; }

    /// <summary>
    /// Extensions that cannot be ignored
    /// </summary>
    [JsonPropertyName("modifierExtension")]
    public IList<object>? ModifierExtension { get; set; }

    /// <summary>
    /// Identifier(s) by which this encounter is known
    /// </summary>
    [JsonPropertyName("identifier")]
    public List<Identifier> IdentifierValue { get; set; }

    /// <summary>
    /// planned | arrived | triaged | in-progress | onleave | finished | cancelled +
    /// </summary>
    [Required]
    [JsonPropertyName("status")]
    public FhirCode Status { get; set; }

    /// <summary>
    /// List of past encounter statuses
    /// </summary>
    [JsonPropertyName("statusHistory")]
    public List<BackboneElement> StatusHistory { get; set; }

    /// <summary>
    /// planned | arrived | triaged | in-progress | onleave | finished | cancelled +
    /// </summary>
    [Required]
    [JsonPropertyName("status")]
    public FhirCode Status { get; set; }

    /// <summary>
    /// The time that the episode was in the specified status
    /// </summary>
    [Required]
    [JsonPropertyName("period")]
    public Period PeriodValue { get; set; }

    /// <summary>
    /// Classification of patient encounter
    /// </summary>
    [Required]
    [JsonPropertyName("class")]
    public Coding Class { get; set; }

    /// <summary>
    /// List of past encounter classes
    /// </summary>
    [JsonPropertyName("classHistory")]
    public List<BackboneElement> ClassHistory { get; set; }

    /// <summary>
    /// inpatient | outpatient | ambulatory | emergency +
    /// </summary>
    [Required]
    [JsonPropertyName("class")]
    public Coding Class { get; set; }

    /// <summary>
    /// The time that the episode was in the specified class
    /// </summary>
    [Required]
    [JsonPropertyName("period")]
    public Period PeriodValue { get; set; }

    /// <summary>
    /// Specific type of encounter
    /// </summary>
    [JsonPropertyName("type")]
    public List<CodeableConcept> Type { get; set; }

    /// <summary>
    /// Specific type of service
    /// </summary>
    [JsonPropertyName("serviceType")]
    public CodeableConcept ServiceType { get; set; }

    /// <summary>
    /// Indicates the urgency of the encounter
    /// </summary>
    [JsonPropertyName("priority")]
    public CodeableConcept Priority { get; set; }

    /// <summary>
    /// The patient or group present at the encounter
    /// </summary>
    [JsonPropertyName("subject")]
    public Reference Subject { get; set; }

    /// <summary>
    /// Episode(s) of care that this encounter should be recorded against
    /// </summary>
    [JsonPropertyName("episodeOfCare")]
    public List<Reference> EpisodeOfCare { get; set; }

    /// <summary>
    /// The ServiceRequest that initiated this encounter
    /// </summary>
    [JsonPropertyName("basedOn")]
    public List<Reference> BasedOn { get; set; }

    /// <summary>
    /// List of participants involved in the encounter
    /// </summary>
    [JsonPropertyName("participant")]
    public List<BackboneElement> Participant { get; set; }

    /// <summary>
    /// Role of participant in encounter
    /// </summary>
    [JsonPropertyName("type")]
    public List<CodeableConcept> Type { get; set; }

    /// <summary>
    /// Period of time during the encounter that the participant participated
    /// </summary>
    [JsonPropertyName("period")]
    public Period PeriodValue { get; set; }

    /// <summary>
    /// Persons involved in the encounter other than the patient
    /// </summary>
    [JsonPropertyName("individual")]
    public Reference Individual { get; set; }

    /// <summary>
    /// The appointment that scheduled this encounter
    /// </summary>
    [JsonPropertyName("appointment")]
    public List<Reference> Appointment { get; set; }

    /// <summary>
    /// The start and end time of the encounter
    /// </summary>
    [JsonPropertyName("period")]
    public Period PeriodValue { get; set; }

    /// <summary>
    /// Quantity of time the encounter lasted (less time absent)
    /// </summary>
    [JsonPropertyName("length")]
    public Duration Length { get; set; }

    /// <summary>
    /// Coded reason the encounter takes place
    /// </summary>
    [JsonPropertyName("reasonCode")]
    public List<CodeableConcept> ReasonCode { get; set; }

    /// <summary>
    /// Reason the encounter takes place (reference)
    /// </summary>
    [JsonPropertyName("reasonReference")]
    public List<Reference> ReasonReference { get; set; }

    /// <summary>
    /// The list of diagnosis relevant to this encounter
    /// </summary>
    [JsonPropertyName("diagnosis")]
    public List<BackboneElement> Diagnosis { get; set; }

    /// <summary>
    /// The diagnosis or procedure relevant to the encounter
    /// </summary>
    [Required]
    [JsonPropertyName("condition")]
    public Reference Condition { get; set; }

    /// <summary>
    /// Role that this diagnosis has within the encounter (e.g. admission, billing, discharge â€¦)
    /// </summary>
    [JsonPropertyName("use")]
    public CodeableConcept Use { get; set; }

    /// <summary>
    /// Ranking of the diagnosis (for each role type)
    /// </summary>
    [JsonPropertyName("rank")]
    public FhirPositiveInt Rank { get; set; }

    /// <summary>
    /// The set of accounts that may be used for billing for this Encounter
    /// </summary>
    [JsonPropertyName("account")]
    public List<Reference> Account { get; set; }

    /// <summary>
    /// Details about the admission to a healthcare service
    /// </summary>
    [JsonPropertyName("hospitalization")]
    public BackboneElement Hospitalization { get; set; }

    /// <summary>
    /// Pre-admission identifier
    /// </summary>
    [JsonPropertyName("preAdmissionIdentifier")]
    public Identifier PreAdmissionIdentifier { get; set; }

    /// <summary>
    /// The location/organization from which the patient came before admission
    /// </summary>
    [JsonPropertyName("origin")]
    public Reference Origin { get; set; }

    /// <summary>
    /// From where patient was admitted (physician referral, transfer)
    /// </summary>
    [JsonPropertyName("admitSource")]
    public CodeableConcept AdmitSource { get; set; }

    /// <summary>
    /// The type of hospital re-admission that has occurred (if any). If the value is absent, then this is not identified as a readmission
    /// </summary>
    [JsonPropertyName("reAdmission")]
    public CodeableConcept ReAdmission { get; set; }

    /// <summary>
    /// Diet preferences reported by the patient
    /// </summary>
    [JsonPropertyName("dietPreference")]
    public List<CodeableConcept> DietPreference { get; set; }

    /// <summary>
    /// Special courtesies (VIP, board member)
    /// </summary>
    [JsonPropertyName("specialCourtesy")]
    public List<CodeableConcept> SpecialCourtesy { get; set; }

    /// <summary>
    /// Wheelchair, translator, stretcher, etc.
    /// </summary>
    [JsonPropertyName("specialArrangement")]
    public List<CodeableConcept> SpecialArrangement { get; set; }

    /// <summary>
    /// Location/organization to which the patient is discharged
    /// </summary>
    [JsonPropertyName("destination")]
    public Reference Destination { get; set; }

    /// <summary>
    /// Category or kind of location after discharge
    /// </summary>
    [JsonPropertyName("dischargeDisposition")]
    public CodeableConcept DischargeDisposition { get; set; }

    /// <summary>
    /// List of locations where the patient has been
    /// </summary>
    [JsonPropertyName("location")]
    public List<BackboneElement> Location { get; set; }

    /// <summary>
    /// Location the encounter takes place
    /// </summary>
    [Required]
    [JsonPropertyName("location")]
    public Reference Location { get; set; }

    /// <summary>
    /// planned | active | reserved | completed
    /// </summary>
    [JsonPropertyName("status")]
    public FhirCode Status { get; set; }

    /// <summary>
    /// The physical type of the location (usually the level in the location hierachy - bed room ward etc.)
    /// </summary>
    [JsonPropertyName("physicalType")]
    public CodeableConcept PhysicalType { get; set; }

    /// <summary>
    /// Time period during which the patient was present at the location
    /// </summary>
    [JsonPropertyName("period")]
    public Period PeriodValue { get; set; }

    /// <summary>
    /// The organization (facility) responsible for this encounter
    /// </summary>
    [JsonPropertyName("serviceProvider")]
    public Reference ServiceProvider { get; set; }

    /// <summary>
    /// Another Encounter this encounter is part of
    /// </summary>
    [JsonPropertyName("partOf")]
    public Reference PartOf { get; set; }

    /// <summary>
    /// Validates this instance according to FHIR rules
    /// </summary>
    public override IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        foreach (var result in base.Validate(validationContext))
            yield return result;

        // TODO: Add specific validation rules
    }

}
