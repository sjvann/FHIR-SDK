// <auto-generated />
// FHIR R4 Resource: CapabilityStatement
// This file is automatically generated. Do not edit manually.

using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization;
using Fhir.R4.Models.Base;
using Fhir.TypeFramework.DataTypes;

namespace Fhir.R4.Models.Resources;

/// <summary>
/// A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server for a particular version of FHIR that may be used as a statement of actual server functionality or a statement of required or desired server implementation.
/// </summary>
public class CapabilityStatement : DomainResource
{
    /// <summary>
    /// Resource type name
    /// </summary>
    [JsonPropertyName("resourceType")]
    public override string ResourceType => "CapabilityStatement";

    /// <summary>
    /// Canonical identifier for this capability statement, represented as a URI (globally unique)
    /// </summary>
    [JsonPropertyName("url")]
    public FhirUri Url { get; set; }

    /// <summary>
    /// Business version of the capability statement
    /// </summary>
    [JsonPropertyName("version")]
    public FhirString Version { get; set; }

    /// <summary>
    /// Name for this capability statement (computer friendly)
    /// </summary>
    [JsonPropertyName("name")]
    public FhirString Name { get; set; }

    /// <summary>
    /// Name for this capability statement (human friendly)
    /// </summary>
    [JsonPropertyName("title")]
    public FhirString Title { get; set; }

    /// <summary>
    /// draft | active | retired | unknown
    /// </summary>
    [Required]
    [JsonPropertyName("status")]
    public FhirCode Status { get; set; }

    /// <summary>
    /// For testing purposes, not real usage
    /// </summary>
    [JsonPropertyName("experimental")]
    public FhirBoolean Experimental { get; set; }

    /// <summary>
    /// Date last changed
    /// </summary>
    [Required]
    [JsonPropertyName("date")]
    public FhirDateTime Date { get; set; }

    /// <summary>
    /// Name of the publisher (organization or individual)
    /// </summary>
    [JsonPropertyName("publisher")]
    public FhirString Publisher { get; set; }

    /// <summary>
    /// Contact details for the publisher
    /// </summary>
    [JsonPropertyName("contact")]
    public List<ContactDetail>? Contact { get; set; }

    /// <summary>
    /// Natural language description of the capability statement
    /// </summary>
    [JsonPropertyName("description")]
    public FhirMarkdown Description { get; set; }

    /// <summary>
    /// The context that the content is intended to support
    /// </summary>
    [JsonPropertyName("useContext")]
    public List<UsageContext>? UseContext { get; set; }

    /// <summary>
    /// Intended jurisdiction for capability statement (if applicable)
    /// </summary>
    [JsonPropertyName("jurisdiction")]
    public List<CodeableConcept>? Jurisdiction { get; set; }

    /// <summary>
    /// Why this capability statement is defined
    /// </summary>
    [JsonPropertyName("purpose")]
    public FhirMarkdown Purpose { get; set; }

    /// <summary>
    /// Use and/or publishing restrictions
    /// </summary>
    [JsonPropertyName("copyright")]
    public FhirMarkdown Copyright { get; set; }

    /// <summary>
    /// instance | capability | requirements
    /// </summary>
    [Required]
    [JsonPropertyName("kind")]
    public FhirCode Kind { get; set; }

    /// <summary>
    /// Canonical URL of another capability statement this implements
    /// </summary>
    [JsonPropertyName("instantiates")]
    public List<FhirCanonical>? Instantiates { get; set; }

    /// <summary>
    /// Canonical URL of another capability statement this adds to
    /// </summary>
    [JsonPropertyName("imports")]
    public List<FhirCanonical>? Imports { get; set; }

    /// <summary>
    /// Software that is covered by this capability statement
    /// </summary>
    [JsonPropertyName("software")]
    public BackboneElement Software { get; set; }

    /// <summary>
    /// A name the software is known by
    /// </summary>
    [Required]
    [JsonPropertyName("name")]
    public FhirString Name { get; set; }

    /// <summary>
    /// Version covered by this statement
    /// </summary>
    [JsonPropertyName("version")]
    public FhirString Version { get; set; }

    /// <summary>
    /// Date this version was released
    /// </summary>
    [JsonPropertyName("releaseDate")]
    public FhirDateTime ReleaseDate { get; set; }

    /// <summary>
    /// If this describes a specific instance
    /// </summary>
    [JsonPropertyName("implementation")]
    public BackboneElement Implementation { get; set; }

    /// <summary>
    /// Describes this specific instance
    /// </summary>
    [Required]
    [JsonPropertyName("description")]
    public FhirString Description { get; set; }

    /// <summary>
    /// Base URL for the installation
    /// </summary>
    [JsonPropertyName("url")]
    public FhirUrl UrlValue { get; set; }

    /// <summary>
    /// Organization that manages the data
    /// </summary>
    [JsonPropertyName("custodian")]
    public Reference Custodian { get; set; }

    /// <summary>
    /// FHIR Version the system supports
    /// </summary>
    [Required]
    [JsonPropertyName("fhirVersion")]
    public FhirCode FhirVersion { get; set; }

    /// <summary>
    /// formats supported (xml | json | ttl | mime type)
    /// </summary>
    [Required]
    [JsonPropertyName("format")]
    public List<FhirCode> Format { get; set; }

    /// <summary>
    /// Patch formats supported
    /// </summary>
    [JsonPropertyName("patchFormat")]
    public List<FhirCode>? PatchFormat { get; set; }

    /// <summary>
    /// Implementation guides supported
    /// </summary>
    [JsonPropertyName("implementationGuide")]
    public List<FhirCanonical>? ImplementationGuide { get; set; }

    /// <summary>
    /// If the endpoint is a RESTful one
    /// </summary>
    [JsonPropertyName("rest")]
    public List<BackboneElement>? Rest { get; set; }

    /// <summary>
    /// client | server
    /// </summary>
    [Required]
    [JsonPropertyName("mode")]
    public FhirCode Mode { get; set; }

    /// <summary>
    /// General description of implementation
    /// </summary>
    [JsonPropertyName("documentation")]
    public FhirMarkdown Documentation { get; set; }

    /// <summary>
    /// Information about security of implementation
    /// </summary>
    [JsonPropertyName("security")]
    public BackboneElement Security { get; set; }

    /// <summary>
    /// Resource served on the REST interface
    /// </summary>
    [JsonPropertyName("resource")]
    public List<BackboneElement>? Resource { get; set; }

    /// <summary>
    /// What operations are supported?
    /// </summary>
    [JsonPropertyName("interaction")]
    public List<BackboneElement>? Interaction { get; set; }

    /// <summary>
    /// Search parameters for searching all resources
    /// </summary>
    [JsonPropertyName("searchParam")]
    public List<>? SearchParam { get; set; }

    /// <summary>
    /// Definition of a system level operation
    /// </summary>
    [JsonPropertyName("operation")]
    public List<>? Operation { get; set; }

    /// <summary>
    /// Compartments served/used by system
    /// </summary>
    [JsonPropertyName("compartment")]
    public List<FhirCanonical>? Compartment { get; set; }

    /// <summary>
    /// If messaging is supported
    /// </summary>
    [JsonPropertyName("messaging")]
    public List<BackboneElement>? Messaging { get; set; }

    /// <summary>
    /// Where messages should be sent
    /// </summary>
    [JsonPropertyName("endpoint")]
    public List<BackboneElement>? Endpoint { get; set; }

    /// <summary>
    /// Reliable Message Cache Length (min)
    /// </summary>
    [JsonPropertyName("reliableCache")]
    public FhirUnsignedInt ReliableCache { get; set; }

    /// <summary>
    /// Messaging interface behavior details
    /// </summary>
    [JsonPropertyName("documentation")]
    public FhirMarkdown Documentation { get; set; }

    /// <summary>
    /// Messages supported by this system
    /// </summary>
    [JsonPropertyName("supportedMessage")]
    public List<BackboneElement>? SupportedMessage { get; set; }

    /// <summary>
    /// Document definition
    /// </summary>
    [JsonPropertyName("document")]
    public List<BackboneElement>? Document { get; set; }

    /// <summary>
    /// producer | consumer
    /// </summary>
    [Required]
    [JsonPropertyName("mode")]
    public FhirCode Mode { get; set; }

    /// <summary>
    /// Description of document support
    /// </summary>
    [JsonPropertyName("documentation")]
    public FhirMarkdown Documentation { get; set; }

    /// <summary>
    /// Constraint on the resources used in the document
    /// </summary>
    [Required]
    [JsonPropertyName("profile")]
    public FhirCanonical Profile { get; set; }

    /// <summary>
    /// Validates this instance according to FHIR rules
    /// </summary>
    public override IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        foreach (var result in base.Validate(validationContext))
            yield return result;

        // TODO: Add specific validation rules
    }

}
