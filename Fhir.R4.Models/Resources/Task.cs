// <auto-generated />
// FHIR R4 Resource: Task
// This file is automatically generated. Do not edit manually.

using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization;
using Fhir.R4.Models.Base;
using Fhir.TypeFramework.DataTypes;

namespace Fhir.R4.Models.Resources;

/// <summary>
/// A task to be performed.
/// </summary>
public class Task : DomainResource
{
    /// <summary>
    /// Resource type name
    /// </summary>
    [JsonPropertyName("resourceType")]
    public override string ResourceType => "Task";

    /// <summary>
    /// Task Instance Identifier
    /// </summary>
    [JsonPropertyName("identifier")]
    public List<Identifier>? IdentifierValue { get; set; }

    /// <summary>
    /// Formal definition of task
    /// </summary>
    [JsonPropertyName("instantiatesCanonical")]
    public FhirCanonical InstantiatesCanonical { get; set; }

    /// <summary>
    /// Formal definition of task
    /// </summary>
    [JsonPropertyName("instantiatesUri")]
    public FhirUri InstantiatesUri { get; set; }

    /// <summary>
    /// Request fulfilled by this task
    /// </summary>
    [JsonPropertyName("basedOn")]
    public List<Reference>? BasedOn { get; set; }

    /// <summary>
    /// Requisition or grouper id
    /// </summary>
    [JsonPropertyName("groupIdentifier")]
    public Identifier GroupIdentifier { get; set; }

    /// <summary>
    /// Composite task
    /// </summary>
    [JsonPropertyName("partOf")]
    public List<Reference>? PartOf { get; set; }

    /// <summary>
    /// draft | requested | received | accepted | +
    /// </summary>
    [Required]
    [JsonPropertyName("status")]
    public FhirCode Status { get; set; }

    /// <summary>
    /// Reason for current status
    /// </summary>
    [JsonPropertyName("statusReason")]
    public CodeableConcept StatusReason { get; set; }

    /// <summary>
    /// E.g. &quot;Specimen collected&quot;, &quot;IV prepped&quot;
    /// </summary>
    [JsonPropertyName("businessStatus")]
    public CodeableConcept BusinessStatus { get; set; }

    /// <summary>
    /// unknown | proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option
    /// </summary>
    [Required]
    [JsonPropertyName("intent")]
    public FhirCode Intent { get; set; }

    /// <summary>
    /// routine | urgent | asap | stat
    /// </summary>
    [JsonPropertyName("priority")]
    public FhirCode Priority { get; set; }

    /// <summary>
    /// Task Type
    /// </summary>
    [JsonPropertyName("code")]
    public CodeableConcept Code { get; set; }

    /// <summary>
    /// Human-readable explanation of task
    /// </summary>
    [JsonPropertyName("description")]
    public FhirString Description { get; set; }

    /// <summary>
    /// What task is acting on
    /// </summary>
    [JsonPropertyName("focus")]
    public Reference Focus { get; set; }

    /// <summary>
    /// Beneficiary of the Task
    /// </summary>
    [JsonPropertyName("for")]
    public Reference For { get; set; }

    /// <summary>
    /// Healthcare event during which this task originated
    /// </summary>
    [JsonPropertyName("encounter")]
    public Reference Encounter { get; set; }

    /// <summary>
    /// Start and end time of execution
    /// </summary>
    [JsonPropertyName("executionPeriod")]
    public Period ExecutionPeriod { get; set; }

    /// <summary>
    /// Task Creation Date
    /// </summary>
    [JsonPropertyName("authoredOn")]
    public FhirDateTime AuthoredOn { get; set; }

    /// <summary>
    /// Task Last Modified Date
    /// </summary>
    [JsonPropertyName("lastModified")]
    public FhirDateTime LastModified { get; set; }

    /// <summary>
    /// Who is asking for task to be done
    /// </summary>
    [JsonPropertyName("requester")]
    public Reference Requester { get; set; }

    /// <summary>
    /// Requested performer
    /// </summary>
    [JsonPropertyName("performerType")]
    public List<CodeableConcept>? PerformerType { get; set; }

    /// <summary>
    /// Responsible individual
    /// </summary>
    [JsonPropertyName("owner")]
    public Reference Owner { get; set; }

    /// <summary>
    /// Where task occurs
    /// </summary>
    [JsonPropertyName("location")]
    public Reference Location { get; set; }

    /// <summary>
    /// Why task is needed
    /// </summary>
    [JsonPropertyName("reasonCode")]
    public CodeableConcept ReasonCode { get; set; }

    /// <summary>
    /// Why task is needed
    /// </summary>
    [JsonPropertyName("reasonReference")]
    public Reference ReasonReference { get; set; }

    /// <summary>
    /// Associated insurance coverage
    /// </summary>
    [JsonPropertyName("insurance")]
    public List<Reference>? Insurance { get; set; }

    /// <summary>
    /// Comments made about the task
    /// </summary>
    [JsonPropertyName("note")]
    public List<Annotation>? Note { get; set; }

    /// <summary>
    /// Key events in history of the Task
    /// </summary>
    [JsonPropertyName("relevantHistory")]
    public List<Reference>? RelevantHistory { get; set; }

    /// <summary>
    /// Constraints on fulfillment tasks
    /// </summary>
    [JsonPropertyName("restriction")]
    public BackboneElement Restriction { get; set; }

    /// <summary>
    /// How many times to repeat
    /// </summary>
    [JsonPropertyName("repetitions")]
    public FhirPositiveInt Repetitions { get; set; }

    /// <summary>
    /// When fulfillment sought
    /// </summary>
    [JsonPropertyName("period")]
    public Period PeriodValue { get; set; }

    /// <summary>
    /// For whom is fulfillment sought?
    /// </summary>
    [JsonPropertyName("recipient")]
    public List<Reference>? Recipient { get; set; }

    /// <summary>
    /// Information used to perform task
    /// </summary>
    [JsonPropertyName("input")]
    public List<BackboneElement>? Input { get; set; }

    /// <summary>
    /// Information produced as part of task
    /// </summary>
    [JsonPropertyName("output")]
    public List<BackboneElement>? Output { get; set; }

    /// <summary>
    /// Validates this instance according to FHIR rules
    /// </summary>
    public override IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        foreach (var result in base.Validate(validationContext))
            yield return result;

        // TODO: Add specific validation rules
    }

}
