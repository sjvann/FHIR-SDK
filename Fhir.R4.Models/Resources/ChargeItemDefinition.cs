// <auto-generated />
// FHIR R4 Resource: ChargeItemDefinition
// This file is automatically generated. Do not edit manually.

using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization;
using Fhir.R4.Models.Base;
using Fhir.TypeFramework.DataTypes;

namespace Fhir.R4.Models.Resources;

/// <summary>
/// The ChargeItemDefinition resource provides the properties that apply to the (billing) codes necessary to calculate costs and prices. The properties may differ largely depending on type and realm, therefore this resource gives only a rough structure and requires profiling for each type of billing code system.
/// </summary>
public class ChargeItemDefinition : DomainResource
{
    /// <summary>
    /// Resource type name
    /// </summary>
    [JsonPropertyName("resourceType")]
    public override string ResourceType => "ChargeItemDefinition";

    /// <summary>
    /// Canonical identifier for this charge item definition, represented as a URI (globally unique)
    /// </summary>
    [Required]
    [JsonPropertyName("url")]
    public FhirUri Url { get; set; }

    /// <summary>
    /// Additional identifier for the charge item definition
    /// </summary>
    [JsonPropertyName("identifier")]
    public List<Identifier>? IdentifierValue { get; set; }

    /// <summary>
    /// Business version of the charge item definition
    /// </summary>
    [JsonPropertyName("version")]
    public FhirString Version { get; set; }

    /// <summary>
    /// Name for this charge item definition (human friendly)
    /// </summary>
    [JsonPropertyName("title")]
    public FhirString Title { get; set; }

    /// <summary>
    /// Underlying externally-defined charge item definition
    /// </summary>
    [JsonPropertyName("derivedFromUri")]
    public List<FhirUri>? DerivedFromUri { get; set; }

    /// <summary>
    /// A larger definition of which this particular definition is a component or step
    /// </summary>
    [JsonPropertyName("partOf")]
    public List<FhirCanonical>? PartOf { get; set; }

    /// <summary>
    /// Completed or terminated request(s) whose function is taken by this new request
    /// </summary>
    [JsonPropertyName("replaces")]
    public List<FhirCanonical>? Replaces { get; set; }

    /// <summary>
    /// draft | active | retired | unknown
    /// </summary>
    [Required]
    [JsonPropertyName("status")]
    public FhirCode Status { get; set; }

    /// <summary>
    /// For testing purposes, not real usage
    /// </summary>
    [JsonPropertyName("experimental")]
    public FhirBoolean Experimental { get; set; }

    /// <summary>
    /// Date last changed
    /// </summary>
    [JsonPropertyName("date")]
    public FhirDateTime Date { get; set; }

    /// <summary>
    /// Name of the publisher (organization or individual)
    /// </summary>
    [JsonPropertyName("publisher")]
    public FhirString Publisher { get; set; }

    /// <summary>
    /// Contact details for the publisher
    /// </summary>
    [JsonPropertyName("contact")]
    public List<ContactDetail>? Contact { get; set; }

    /// <summary>
    /// Natural language description of the charge item definition
    /// </summary>
    [JsonPropertyName("description")]
    public FhirMarkdown Description { get; set; }

    /// <summary>
    /// The context that the content is intended to support
    /// </summary>
    [JsonPropertyName("useContext")]
    public List<UsageContext>? UseContext { get; set; }

    /// <summary>
    /// Intended jurisdiction for charge item definition (if applicable)
    /// </summary>
    [JsonPropertyName("jurisdiction")]
    public List<CodeableConcept>? Jurisdiction { get; set; }

    /// <summary>
    /// Use and/or publishing restrictions
    /// </summary>
    [JsonPropertyName("copyright")]
    public FhirMarkdown Copyright { get; set; }

    /// <summary>
    /// When the charge item definition was approved by publisher
    /// </summary>
    [JsonPropertyName("approvalDate")]
    public FhirDate ApprovalDate { get; set; }

    /// <summary>
    /// When the charge item definition was last reviewed
    /// </summary>
    [JsonPropertyName("lastReviewDate")]
    public FhirDate LastReviewDate { get; set; }

    /// <summary>
    /// When the charge item definition is expected to be used
    /// </summary>
    [JsonPropertyName("effectivePeriod")]
    public Period EffectivePeriod { get; set; }

    /// <summary>
    /// Billing codes or product types this definition applies to
    /// </summary>
    [JsonPropertyName("code")]
    public CodeableConcept Code { get; set; }

    /// <summary>
    /// Instances this definition applies to
    /// </summary>
    [JsonPropertyName("instance")]
    public List<Reference>? Instance { get; set; }

    /// <summary>
    /// Whether or not the billing code is applicable
    /// </summary>
    [JsonPropertyName("applicability")]
    public List<BackboneElement>? Applicability { get; set; }

    /// <summary>
    /// Natural language description of the condition
    /// </summary>
    [JsonPropertyName("description")]
    public FhirString Description { get; set; }

    /// <summary>
    /// Boolean-valued expression
    /// </summary>
    [JsonPropertyName("expression")]
    public FhirString Expression { get; set; }

    /// <summary>
    /// Group of properties which are applicable under the same conditions
    /// </summary>
    [JsonPropertyName("propertyGroup")]
    public List<BackboneElement>? PropertyGroup { get; set; }

    /// <summary>
    /// Conditions under which the priceComponent is applicable
    /// </summary>
    [JsonPropertyName("applicability")]
    public List<>? Applicability { get; set; }

    /// <summary>
    /// Components of total line item price
    /// </summary>
    [JsonPropertyName("priceComponent")]
    public List<BackboneElement>? PriceComponent { get; set; }

    /// <summary>
    /// Validates this instance according to FHIR rules
    /// </summary>
    public override IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        foreach (var result in base.Validate(validationContext))
            yield return result;

        // TODO: Add specific validation rules
    }

}
