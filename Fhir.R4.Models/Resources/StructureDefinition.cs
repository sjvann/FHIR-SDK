// <auto-generated />
// FHIR R4 Resource: StructureDefinition
// This file is automatically generated. Do not edit manually.

using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization;
using Fhir.R4.Models.Base;
using Fhir.TypeFramework.DataTypes;

namespace Fhir.R4.Models.Resources;

/// <summary>
/// A definition of a FHIR structure. This resource is used to describe the underlying resources, data types defined in FHIR, and also for describing extensions and constraints on resources and data types.
/// </summary>
public class StructureDefinition : DomainResource
{
    /// <summary>
    /// Resource type name
    /// </summary>
    [JsonPropertyName("resourceType")]
    public override string ResourceType => "StructureDefinition";

    /// <summary>
    /// Canonical identifier for this structure definition, represented as a URI (globally unique)
    /// </summary>
    [Required]
    [JsonPropertyName("url")]
    public FhirUri Url { get; set; }

    /// <summary>
    /// Additional identifier for the structure definition
    /// </summary>
    [JsonPropertyName("identifier")]
    public List<Identifier>? IdentifierValue { get; set; }

    /// <summary>
    /// Business version of the structure definition
    /// </summary>
    [JsonPropertyName("version")]
    public FhirString Version { get; set; }

    /// <summary>
    /// Name for this structure definition (computer friendly)
    /// </summary>
    [Required]
    [JsonPropertyName("name")]
    public FhirString Name { get; set; }

    /// <summary>
    /// Name for this structure definition (human friendly)
    /// </summary>
    [JsonPropertyName("title")]
    public FhirString Title { get; set; }

    /// <summary>
    /// draft | active | retired | unknown
    /// </summary>
    [Required]
    [JsonPropertyName("status")]
    public FhirCode Status { get; set; }

    /// <summary>
    /// For testing purposes, not real usage
    /// </summary>
    [JsonPropertyName("experimental")]
    public FhirBoolean Experimental { get; set; }

    /// <summary>
    /// Date last changed
    /// </summary>
    [JsonPropertyName("date")]
    public FhirDateTime Date { get; set; }

    /// <summary>
    /// Name of the publisher (organization or individual)
    /// </summary>
    [JsonPropertyName("publisher")]
    public FhirString Publisher { get; set; }

    /// <summary>
    /// Contact details for the publisher
    /// </summary>
    [JsonPropertyName("contact")]
    public List<ContactDetail>? Contact { get; set; }

    /// <summary>
    /// Natural language description of the structure definition
    /// </summary>
    [JsonPropertyName("description")]
    public FhirMarkdown Description { get; set; }

    /// <summary>
    /// The context that the content is intended to support
    /// </summary>
    [JsonPropertyName("useContext")]
    public List<UsageContext>? UseContext { get; set; }

    /// <summary>
    /// Intended jurisdiction for structure definition (if applicable)
    /// </summary>
    [JsonPropertyName("jurisdiction")]
    public List<CodeableConcept>? Jurisdiction { get; set; }

    /// <summary>
    /// Why this structure definition is defined
    /// </summary>
    [JsonPropertyName("purpose")]
    public FhirMarkdown Purpose { get; set; }

    /// <summary>
    /// Use and/or publishing restrictions
    /// </summary>
    [JsonPropertyName("copyright")]
    public FhirMarkdown Copyright { get; set; }

    /// <summary>
    /// Assist with indexing and finding
    /// </summary>
    [JsonPropertyName("keyword")]
    public List<Coding>? Keyword { get; set; }

    /// <summary>
    /// FHIR Version this StructureDefinition targets
    /// </summary>
    [JsonPropertyName("fhirVersion")]
    public FhirCode FhirVersion { get; set; }

    /// <summary>
    /// External specification that the content is mapped to
    /// </summary>
    [JsonPropertyName("mapping")]
    public List<BackboneElement>? Mapping { get; set; }

    /// <summary>
    /// Internal id when this mapping is used
    /// </summary>
    [Required]
    [JsonPropertyName("identity")]
    public FhirId Identity { get; set; }

    /// <summary>
    /// Identifies what this mapping refers to
    /// </summary>
    [JsonPropertyName("uri")]
    public FhirUri UriValue { get; set; }

    /// <summary>
    /// Names what this mapping refers to
    /// </summary>
    [JsonPropertyName("name")]
    public FhirString Name { get; set; }

    /// <summary>
    /// Versions, Issues, Scope limitations etc.
    /// </summary>
    [JsonPropertyName("comment")]
    public FhirString Comment { get; set; }

    /// <summary>
    /// primitive-type | complex-type | resource | logical
    /// </summary>
    [Required]
    [JsonPropertyName("kind")]
    public FhirCode Kind { get; set; }

    /// <summary>
    /// Whether the structure is abstract
    /// </summary>
    [Required]
    [JsonPropertyName("abstract")]
    public FhirBoolean Abstract { get; set; }

    /// <summary>
    /// If an extension, where it can be used in instances
    /// </summary>
    [JsonPropertyName("context")]
    public List<BackboneElement>? Context { get; set; }

    /// <summary>
    /// fhirpath | element | extension
    /// </summary>
    [Required]
    [JsonPropertyName("type")]
    public FhirCode Type { get; set; }

    /// <summary>
    /// Where the extension can be used in instances
    /// </summary>
    [Required]
    [JsonPropertyName("expression")]
    public FhirString Expression { get; set; }

    /// <summary>
    /// FHIRPath invariants - when the extension can be used
    /// </summary>
    [JsonPropertyName("contextInvariant")]
    public List<FhirString>? ContextInvariant { get; set; }

    /// <summary>
    /// Type defined or constrained by this structure
    /// </summary>
    [Required]
    [JsonPropertyName("type")]
    public FhirUri Type { get; set; }

    /// <summary>
    /// Definition that this type is constrained/specialized from
    /// </summary>
    [JsonPropertyName("baseDefinition")]
    public FhirCanonical BaseDefinition { get; set; }

    /// <summary>
    /// specialization | constraint - How relates to base definition
    /// </summary>
    [JsonPropertyName("derivation")]
    public FhirCode Derivation { get; set; }

    /// <summary>
    /// Snapshot view of the structure
    /// </summary>
    [JsonPropertyName("snapshot")]
    public BackboneElement Snapshot { get; set; }

    /// <summary>
    /// Definition of elements in the resource (if no StructureDefinition)
    /// </summary>
    [Required]
    [JsonPropertyName("element")]
    public List<ElementDefinition> Element { get; set; }

    /// <summary>
    /// Differential view of the structure
    /// </summary>
    [JsonPropertyName("differential")]
    public BackboneElement Differential { get; set; }

    /// <summary>
    /// Definition of elements in the resource (if no StructureDefinition)
    /// </summary>
    [Required]
    [JsonPropertyName("element")]
    public List<ElementDefinition> Element { get; set; }

    /// <summary>
    /// Validates this instance according to FHIR rules
    /// </summary>
    public override IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        foreach (var result in base.Validate(validationContext))
            yield return result;

        // TODO: Add specific validation rules
    }

}
