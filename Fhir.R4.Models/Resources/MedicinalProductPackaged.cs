// <auto-generated />
// FHIR R4 Resource: MedicinalProductPackaged
// This file is automatically generated. Do not edit manually.

using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization;
using Fhir.R4.Models.Base;
using Fhir.TypeFramework.DataTypes;

namespace Fhir.R4.Models.Resources;

/// <summary>
/// A medicinal product in a container or package.
/// </summary>
public class MedicinalProductPackaged : DomainResource
{
    /// <summary>
    /// Resource type name
    /// </summary>
    [JsonPropertyName("resourceType")]
    public override string ResourceType => "MedicinalProductPackaged";

    /// <summary>
    /// Unique identifier
    /// </summary>
    [JsonPropertyName("identifier")]
    public List<Identifier>? IdentifierValue { get; set; }

    /// <summary>
    /// The product with this is a pack for
    /// </summary>
    [JsonPropertyName("subject")]
    public List<Reference>? Subject { get; set; }

    /// <summary>
    /// Textual description
    /// </summary>
    [JsonPropertyName("description")]
    public FhirString Description { get; set; }

    /// <summary>
    /// The legal status of supply of the medicinal product as classified by the regulator
    /// </summary>
    [JsonPropertyName("legalStatusOfSupply")]
    public CodeableConcept LegalStatusOfSupply { get; set; }

    /// <summary>
    /// Marketing information
    /// </summary>
    [JsonPropertyName("marketingStatus")]
    public List<MarketingStatus>? MarketingStatusValue { get; set; }

    /// <summary>
    /// Manufacturer of this Package Item
    /// </summary>
    [JsonPropertyName("marketingAuthorization")]
    public Reference MarketingAuthorization { get; set; }

    /// <summary>
    /// Manufacturer of this Package Item
    /// </summary>
    [JsonPropertyName("manufacturer")]
    public List<Reference>? Manufacturer { get; set; }

    /// <summary>
    /// Batch numbering
    /// </summary>
    [JsonPropertyName("batchIdentifier")]
    public List<BackboneElement>? BatchIdentifier { get; set; }

    /// <summary>
    /// A number appearing on the outer packaging of a specific batch
    /// </summary>
    [Required]
    [JsonPropertyName("outerPackaging")]
    public Identifier OuterPackaging { get; set; }

    /// <summary>
    /// A number appearing on the immediate packaging (and not the outer packaging)
    /// </summary>
    [JsonPropertyName("immediatePackaging")]
    public Identifier ImmediatePackaging { get; set; }

    /// <summary>
    /// A packaging item, as a contained for medicine, possibly with other packaging items within
    /// </summary>
    [Required]
    [JsonPropertyName("packageItem")]
    public List<BackboneElement> PackageItem { get; set; }

    /// <summary>
    /// Including possibly Data Carrier Identifier
    /// </summary>
    [JsonPropertyName("identifier")]
    public List<Identifier>? IdentifierValue { get; set; }

    /// <summary>
    /// The physical type of the container of the medicine
    /// </summary>
    [Required]
    [JsonPropertyName("type")]
    public CodeableConcept Type { get; set; }

    /// <summary>
    /// The quantity of this package in the medicinal product, at the current level of packaging. The outermost is always 1
    /// </summary>
    [Required]
    [JsonPropertyName("quantity")]
    public Quantity QuantityValue { get; set; }

    /// <summary>
    /// Material type of the package item
    /// </summary>
    [JsonPropertyName("material")]
    public List<CodeableConcept>? Material { get; set; }

    /// <summary>
    /// A possible alternate material for the packaging
    /// </summary>
    [JsonPropertyName("alternateMaterial")]
    public List<CodeableConcept>? AlternateMaterial { get; set; }

    /// <summary>
    /// A device accompanying a medicinal product
    /// </summary>
    [JsonPropertyName("device")]
    public List<Reference>? Device { get; set; }

    /// <summary>
    /// The manufactured item as contained in the packaged medicinal product
    /// </summary>
    [JsonPropertyName("manufacturedItem")]
    public List<Reference>? ManufacturedItem { get; set; }

    /// <summary>
    /// Allows containers within containers
    /// </summary>
    [JsonPropertyName("packageItem")]
    public List<>? PackageItem { get; set; }

    /// <summary>
    /// Dimensions, color etc.
    /// </summary>
    [JsonPropertyName("physicalCharacteristics")]
    public ProdCharacteristic PhysicalCharacteristics { get; set; }

    /// <summary>
    /// Other codeable characteristics
    /// </summary>
    [JsonPropertyName("otherCharacteristics")]
    public List<CodeableConcept>? OtherCharacteristics { get; set; }

    /// <summary>
    /// Shelf Life and storage information
    /// </summary>
    [JsonPropertyName("shelfLifeStorage")]
    public List<ProductShelfLife>? ShelfLifeStorage { get; set; }

    /// <summary>
    /// Manufacturer of this Package Item
    /// </summary>
    [JsonPropertyName("manufacturer")]
    public List<Reference>? Manufacturer { get; set; }

    /// <summary>
    /// Validates this instance according to FHIR rules
    /// </summary>
    public override IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        foreach (var result in base.Validate(validationContext))
            yield return result;

        // TODO: Add specific validation rules
    }

}
