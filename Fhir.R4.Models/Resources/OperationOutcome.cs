// <auto-generated />
// FHIR R4 Resource: OperationOutcome
// This file is automatically generated. Do not edit manually.

using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization;
using Fhir.R4.Models.Base;
using Fhir.TypeFramework.DataTypes;

namespace Fhir.R4.Models.Resources;

/// <summary>
/// A collection of error, warning, or information messages that result from a system action.
/// </summary>
public class OperationOutcome : DomainResource
{
    /// <summary>
    /// Resource type name
    /// </summary>
    [JsonPropertyName("resourceType")]
    public override string ResourceType => "OperationOutcome";

    /// <summary>
    /// A single issue associated with the action
    /// </summary>
    [Required]
    [JsonPropertyName("issue")]
    public List<BackboneElement> Issue { get; set; }

    /// <summary>
    /// fatal | error | warning | information
    /// </summary>
    [Required]
    [JsonPropertyName("severity")]
    public FhirCode Severity { get; set; }

    /// <summary>
    /// Error or warning code
    /// </summary>
    [Required]
    [JsonPropertyName("code")]
    public FhirCode CodeValue { get; set; }

    /// <summary>
    /// Additional details about the error
    /// </summary>
    [JsonPropertyName("details")]
    public CodeableConcept Details { get; set; }

    /// <summary>
    /// Additional diagnostic information about the issue
    /// </summary>
    [JsonPropertyName("diagnostics")]
    public FhirString Diagnostics { get; set; }

    /// <summary>
    /// Deprecated: Path of element(s) related to issue
    /// </summary>
    [JsonPropertyName("location")]
    public List<FhirString>? Location { get; set; }

    /// <summary>
    /// FHIRPath of element(s) related to issue
    /// </summary>
    [JsonPropertyName("expression")]
    public List<FhirString>? Expression { get; set; }

    /// <summary>
    /// Validates this instance according to FHIR rules
    /// </summary>
    public override IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        foreach (var result in base.Validate(validationContext))
            yield return result;

        // TODO: Add specific validation rules
    }

}
