// <auto-generated />
// FHIR R4 Resource: SubstanceNucleicAcid
// This file is automatically generated. Do not edit manually.

using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization;
using Fhir.R4.Models.Base;
using Fhir.TypeFramework.DataTypes;

namespace Fhir.R4.Models.Resources;

/// <summary>
/// Nucleic acids are defined by three distinct elements: the base, sugar and linkage. Individual substance/moiety IDs will be created for each of these elements. The nucleotide sequence will be always entered in the 5’-3’ direction.
/// </summary>
public class SubstanceNucleicAcid : DomainResource
{
    /// <summary>
    /// Resource type name
    /// </summary>
    [JsonPropertyName("resourceType")]
    public override string ResourceType => "SubstanceNucleicAcid";

    /// <summary>
    /// The type of the sequence shall be specified based on a controlled vocabulary
    /// </summary>
    [JsonPropertyName("sequenceType")]
    public CodeableConcept SequenceType { get; set; }

    /// <summary>
    /// The number of linear sequences of nucleotides linked through phosphodiester bonds shall be described. Subunits would be strands of nucleic acids that are tightly associated typically through Watson-Crick base pairing. NOTE: If not specified in the reference source, the assumption is that there is 1 subunit
    /// </summary>
    [JsonPropertyName("numberOfSubunits")]
    public FhirInteger NumberOfSubunits { get; set; }

    /// <summary>
    /// The area of hybridisation shall be described if applicable for double stranded RNA or DNA. The number associated with the subunit followed by the number associated to the residue shall be specified in increasing order. The underscore “” shall be used as separator as follows: “Subunitnumber Residue”
    /// </summary>
    [JsonPropertyName("areaOfHybridisation")]
    public FhirString AreaOfHybridisation { get; set; }

    /// <summary>
    /// (TBC)
    /// </summary>
    [JsonPropertyName("oligoNucleotideType")]
    public CodeableConcept OligoNucleotideType { get; set; }

    /// <summary>
    /// Subunits are listed in order of decreasing length; sequences of the same length will be ordered by molecular weight; subunits that have identical sequences will be repeated multiple times
    /// </summary>
    [JsonPropertyName("subunit")]
    public List<BackboneElement>? Subunit { get; set; }

    /// <summary>
    /// Index of linear sequences of nucleic acids in order of decreasing length. Sequences of the same length will be ordered by molecular weight. Subunits that have identical sequences will be repeated and have sequential subscripts
    /// </summary>
    [JsonPropertyName("subunit")]
    public FhirInteger Subunit { get; set; }

    /// <summary>
    /// Actual nucleotide sequence notation from 5&apos; to 3&apos; end using standard single letter codes. In addition to the base sequence, sugar and type of phosphate or non-phosphate linkage should also be captured
    /// </summary>
    [JsonPropertyName("sequence")]
    public FhirString Sequence { get; set; }

    /// <summary>
    /// The length of the sequence shall be captured
    /// </summary>
    [JsonPropertyName("length")]
    public FhirInteger Length { get; set; }

    /// <summary>
    /// (TBC)
    /// </summary>
    [JsonPropertyName("sequenceAttachment")]
    public Attachment SequenceAttachment { get; set; }

    /// <summary>
    /// The nucleotide present at the 5’ terminal shall be specified based on a controlled vocabulary. Since the sequence is represented from the 5&apos; to the 3&apos; end, the 5’ prime nucleotide is the letter at the first position in the sequence. A separate representation would be redundant
    /// </summary>
    [JsonPropertyName("fivePrime")]
    public CodeableConcept FivePrime { get; set; }

    /// <summary>
    /// The nucleotide present at the 3’ terminal shall be specified based on a controlled vocabulary. Since the sequence is represented from the 5&apos; to the 3&apos; end, the 5’ prime nucleotide is the letter at the last position in the sequence. A separate representation would be redundant
    /// </summary>
    [JsonPropertyName("threePrime")]
    public CodeableConcept ThreePrime { get; set; }

    /// <summary>
    /// The linkages between sugar residues will also be captured
    /// </summary>
    [JsonPropertyName("linkage")]
    public List<BackboneElement>? Linkage { get; set; }

    /// <summary>
    /// 5.3.6.8.1 Sugar ID (Mandatory)
    /// </summary>
    [JsonPropertyName("sugar")]
    public List<BackboneElement>? Sugar { get; set; }

    /// <summary>
    /// Validates this instance according to FHIR rules
    /// </summary>
    public override IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        foreach (var result in base.Validate(validationContext))
            yield return result;

        // TODO: Add specific validation rules
    }

}
