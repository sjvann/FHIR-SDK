// <auto-generated />
// FHIR R4 Resource: VerificationResult
// This file is automatically generated. Do not edit manually.

using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization;
using Fhir.R4.Models.Base;
using Fhir.TypeFramework.DataTypes;

namespace Fhir.R4.Models.Resources;

/// <summary>
/// Describes validation requirements, source(s), status and dates for one or more elements.
/// </summary>
public class VerificationResult : DomainResource
{
    /// <summary>
    /// Resource type name
    /// </summary>
    [JsonPropertyName("resourceType")]
    public override string ResourceType => "VerificationResult";

    /// <summary>
    /// A resource that was validated
    /// </summary>
    [JsonPropertyName("target")]
    public List<Reference>? Target { get; set; }

    /// <summary>
    /// The fhirpath location(s) within the resource that was validated
    /// </summary>
    [JsonPropertyName("targetLocation")]
    public List<FhirString>? TargetLocation { get; set; }

    /// <summary>
    /// none | initial | periodic
    /// </summary>
    [JsonPropertyName("need")]
    public CodeableConcept Need { get; set; }

    /// <summary>
    /// attested | validated | in-process | req-revalid | val-fail | reval-fail
    /// </summary>
    [Required]
    [JsonPropertyName("status")]
    public FhirCode Status { get; set; }

    /// <summary>
    /// When the validation status was updated
    /// </summary>
    [JsonPropertyName("statusDate")]
    public FhirDateTime StatusDate { get; set; }

    /// <summary>
    /// nothing | primary | multiple
    /// </summary>
    [JsonPropertyName("validationType")]
    public CodeableConcept ValidationType { get; set; }

    /// <summary>
    /// The primary process by which the target is validated (edit check; value set; primary source; multiple sources; standalone; in context)
    /// </summary>
    [JsonPropertyName("validationProcess")]
    public List<CodeableConcept>? ValidationProcess { get; set; }

    /// <summary>
    /// Frequency of revalidation
    /// </summary>
    [JsonPropertyName("frequency")]
    public Timing Frequency { get; set; }

    /// <summary>
    /// The date/time validation was last completed (including failed validations)
    /// </summary>
    [JsonPropertyName("lastPerformed")]
    public FhirDateTime LastPerformed { get; set; }

    /// <summary>
    /// The date when target is next validated, if appropriate
    /// </summary>
    [JsonPropertyName("nextScheduled")]
    public FhirDate NextScheduled { get; set; }

    /// <summary>
    /// fatal | warn | rec-only | none
    /// </summary>
    [JsonPropertyName("failureAction")]
    public CodeableConcept FailureAction { get; set; }

    /// <summary>
    /// Information about the primary source(s) involved in validation
    /// </summary>
    [JsonPropertyName("primarySource")]
    public List<BackboneElement>? PrimarySource { get; set; }

    /// <summary>
    /// Reference to the primary source
    /// </summary>
    [JsonPropertyName("who")]
    public Reference Who { get; set; }

    /// <summary>
    /// Type of primary source (License Board; Primary Education; Continuing Education; Postal Service; Relationship owner; Registration Authority; legal source; issuing source; authoritative source)
    /// </summary>
    [JsonPropertyName("type")]
    public List<CodeableConcept>? Type { get; set; }

    /// <summary>
    /// Method for exchanging information with the primary source
    /// </summary>
    [JsonPropertyName("communicationMethod")]
    public List<CodeableConcept>? CommunicationMethod { get; set; }

    /// <summary>
    /// successful | failed | unknown
    /// </summary>
    [JsonPropertyName("validationStatus")]
    public CodeableConcept ValidationStatus { get; set; }

    /// <summary>
    /// When the target was validated against the primary source
    /// </summary>
    [JsonPropertyName("validationDate")]
    public FhirDateTime ValidationDate { get; set; }

    /// <summary>
    /// yes | no | undetermined
    /// </summary>
    [JsonPropertyName("canPushUpdates")]
    public CodeableConcept CanPushUpdates { get; set; }

    /// <summary>
    /// specific | any | source
    /// </summary>
    [JsonPropertyName("pushTypeAvailable")]
    public List<CodeableConcept>? PushTypeAvailable { get; set; }

    /// <summary>
    /// Information about the entity attesting to information
    /// </summary>
    [JsonPropertyName("attestation")]
    public BackboneElement Attestation { get; set; }

    /// <summary>
    /// The individual or organization attesting to information
    /// </summary>
    [JsonPropertyName("who")]
    public Reference Who { get; set; }

    /// <summary>
    /// When the who is asserting on behalf of another (organization or individual)
    /// </summary>
    [JsonPropertyName("onBehalfOf")]
    public Reference OnBehalfOf { get; set; }

    /// <summary>
    /// The method by which attested information was submitted/retrieved
    /// </summary>
    [JsonPropertyName("communicationMethod")]
    public CodeableConcept CommunicationMethod { get; set; }

    /// <summary>
    /// The date the information was attested to
    /// </summary>
    [JsonPropertyName("date")]
    public FhirDate DateValue { get; set; }

    /// <summary>
    /// A digital identity certificate associated with the attestation source
    /// </summary>
    [JsonPropertyName("sourceIdentityCertificate")]
    public FhirString SourceIdentityCertificate { get; set; }

    /// <summary>
    /// A digital identity certificate associated with the proxy entity submitting attested information on behalf of the attestation source
    /// </summary>
    [JsonPropertyName("proxyIdentityCertificate")]
    public FhirString ProxyIdentityCertificate { get; set; }

    /// <summary>
    /// Proxy signature
    /// </summary>
    [JsonPropertyName("proxySignature")]
    public Signature ProxySignature { get; set; }

    /// <summary>
    /// Attester signature
    /// </summary>
    [JsonPropertyName("sourceSignature")]
    public Signature SourceSignature { get; set; }

    /// <summary>
    /// Information about the entity validating information
    /// </summary>
    [JsonPropertyName("validator")]
    public List<BackboneElement>? Validator { get; set; }

    /// <summary>
    /// Reference to the organization validating information
    /// </summary>
    [Required]
    [JsonPropertyName("organization")]
    public Reference Organization { get; set; }

    /// <summary>
    /// A digital identity certificate associated with the validator
    /// </summary>
    [JsonPropertyName("identityCertificate")]
    public FhirString IdentityCertificate { get; set; }

    /// <summary>
    /// Validator signature
    /// </summary>
    [JsonPropertyName("attestationSignature")]
    public Signature AttestationSignature { get; set; }

    /// <summary>
    /// Validates this instance according to FHIR rules
    /// </summary>
    public override IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        foreach (var result in base.Validate(validationContext))
            yield return result;

        // TODO: Add specific validation rules
    }

}
