// <auto-generated />
// FHIR R4 Resource: ObservationDefinition
// This file is automatically generated. Do not edit manually.

using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization;
using Fhir.R4.Models.Base;
using Fhir.TypeFramework.DataTypes;

namespace Fhir.R4.Models.Resources;

/// <summary>
/// Set of definitional characteristics for a kind of observation or measurement produced or consumed by an orderable health care service.
/// </summary>
public class ObservationDefinition : DomainResource
{
    /// <summary>
    /// Resource type name
    /// </summary>
    [JsonPropertyName("resourceType")]
    public override string ResourceType => "ObservationDefinition";

    /// <summary>
    /// Category of observation
    /// </summary>
    [JsonPropertyName("category")]
    public List<CodeableConcept>? Category { get; set; }

    /// <summary>
    /// Type of observation (code / type)
    /// </summary>
    [Required]
    [JsonPropertyName("code")]
    public CodeableConcept Code { get; set; }

    /// <summary>
    /// Business identifier for this ObservationDefinition instance
    /// </summary>
    [JsonPropertyName("identifier")]
    public List<Identifier>? IdentifierValue { get; set; }

    /// <summary>
    /// Quantity | CodeableConcept | string | boolean | integer | Range | Ratio | SampledData | time | dateTime | Period
    /// </summary>
    [JsonPropertyName("permittedDataType")]
    public List<FhirCode>? PermittedDataType { get; set; }

    /// <summary>
    /// Multiple results allowed
    /// </summary>
    [JsonPropertyName("multipleResultsAllowed")]
    public FhirBoolean MultipleResultsAllowed { get; set; }

    /// <summary>
    /// Method used to produce the observation
    /// </summary>
    [JsonPropertyName("method")]
    public CodeableConcept Method { get; set; }

    /// <summary>
    /// Preferred report name
    /// </summary>
    [JsonPropertyName("preferredReportName")]
    public FhirString PreferredReportName { get; set; }

    /// <summary>
    /// Characteristics of quantitative results
    /// </summary>
    [JsonPropertyName("quantitativeDetails")]
    public BackboneElement QuantitativeDetails { get; set; }

    /// <summary>
    /// Customary unit for quantitative results
    /// </summary>
    [JsonPropertyName("customaryUnit")]
    public CodeableConcept CustomaryUnit { get; set; }

    /// <summary>
    /// SI unit for quantitative results
    /// </summary>
    [JsonPropertyName("unit")]
    public CodeableConcept Unit { get; set; }

    /// <summary>
    /// SI to Customary unit conversion factor
    /// </summary>
    [JsonPropertyName("conversionFactor")]
    public FhirDecimal ConversionFactor { get; set; }

    /// <summary>
    /// Decimal precision of observation quantitative results
    /// </summary>
    [JsonPropertyName("decimalPrecision")]
    public FhirInteger DecimalPrecision { get; set; }

    /// <summary>
    /// Qualified range for continuous and ordinal observation results
    /// </summary>
    [JsonPropertyName("qualifiedInterval")]
    public List<BackboneElement>? QualifiedInterval { get; set; }

    /// <summary>
    /// reference | critical | absolute
    /// </summary>
    [JsonPropertyName("category")]
    public FhirCode Category { get; set; }

    /// <summary>
    /// The interval itself, for continuous or ordinal observations
    /// </summary>
    [JsonPropertyName("range")]
    public Range RangeValue { get; set; }

    /// <summary>
    /// Range context qualifier
    /// </summary>
    [JsonPropertyName("context")]
    public CodeableConcept Context { get; set; }

    /// <summary>
    /// Targetted population of the range
    /// </summary>
    [JsonPropertyName("appliesTo")]
    public List<CodeableConcept>? AppliesTo { get; set; }

    /// <summary>
    /// male | female | other | unknown
    /// </summary>
    [JsonPropertyName("gender")]
    public FhirCode Gender { get; set; }

    /// <summary>
    /// Applicable age range, if relevant
    /// </summary>
    [JsonPropertyName("age")]
    public Range Age { get; set; }

    /// <summary>
    /// Applicable gestational age range, if relevant
    /// </summary>
    [JsonPropertyName("gestationalAge")]
    public Range GestationalAge { get; set; }

    /// <summary>
    /// Condition associated with the reference range
    /// </summary>
    [JsonPropertyName("condition")]
    public FhirString Condition { get; set; }

    /// <summary>
    /// Value set of valid coded values for the observations conforming to this ObservationDefinition
    /// </summary>
    [JsonPropertyName("validCodedValueSet")]
    public Reference ValidCodedValueSet { get; set; }

    /// <summary>
    /// Value set of normal coded values for the observations conforming to this ObservationDefinition
    /// </summary>
    [JsonPropertyName("normalCodedValueSet")]
    public Reference NormalCodedValueSet { get; set; }

    /// <summary>
    /// Value set of abnormal coded values for the observations conforming to this ObservationDefinition
    /// </summary>
    [JsonPropertyName("abnormalCodedValueSet")]
    public Reference AbnormalCodedValueSet { get; set; }

    /// <summary>
    /// Value set of critical coded values for the observations conforming to this ObservationDefinition
    /// </summary>
    [JsonPropertyName("criticalCodedValueSet")]
    public Reference CriticalCodedValueSet { get; set; }

    /// <summary>
    /// Validates this instance according to FHIR rules
    /// </summary>
    public override IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        foreach (var result in base.Validate(validationContext))
            yield return result;

        // TODO: Add specific validation rules
    }

}
