// <auto-generated />
// FHIR R4 Resource: Provenance
// This file is automatically generated. Do not edit manually.

using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization;
using Fhir.R4.Models.Base;
using Fhir.TypeFramework.DataTypes;

namespace Fhir.R4.Models.Resources;

/// <summary>
/// Provenance of a resource is a record that describes entities and processes involved in producing and delivering or otherwise influencing that resource. Provenance provides a critical foundation for assessing authenticity, enabling trust, and allowing reproducibility. Provenance assertions are a form of contextual metadata and can themselves become important records with their own provenance. Provenance statement indicates clinical significance in terms of confidence in authenticity, reliability, and trustworthiness, integrity, and stage in lifecycle (e.g. Document Completion - has the artifact been legally authenticated), all of which may impact security, privacy, and trust policies.
/// </summary>
public class Provenance : DomainResource
{
    /// <summary>
    /// Resource type name
    /// </summary>
    [JsonPropertyName("resourceType")]
    public override string ResourceType => "Provenance";

    /// <summary>
    /// Target Reference(s) (usually version specific)
    /// </summary>
    [Required]
    [JsonPropertyName("target")]
    public List<Reference> Target { get; set; }

    /// <summary>
    /// When the activity was recorded / updated
    /// </summary>
    [Required]
    [JsonPropertyName("recorded")]
    public FhirInstant Recorded { get; set; }

    /// <summary>
    /// Policy or plan the activity was defined by
    /// </summary>
    [JsonPropertyName("policy")]
    public List<FhirUri>? Policy { get; set; }

    /// <summary>
    /// Where the activity occurred, if relevant
    /// </summary>
    [JsonPropertyName("location")]
    public Reference Location { get; set; }

    /// <summary>
    /// Reason the activity is occurring
    /// </summary>
    [JsonPropertyName("reason")]
    public List<CodeableConcept>? Reason { get; set; }

    /// <summary>
    /// Activity that occurred
    /// </summary>
    [JsonPropertyName("activity")]
    public CodeableConcept Activity { get; set; }

    /// <summary>
    /// Actor involved
    /// </summary>
    [Required]
    [JsonPropertyName("agent")]
    public List<BackboneElement> Agent { get; set; }

    /// <summary>
    /// How the agent participated
    /// </summary>
    [JsonPropertyName("type")]
    public CodeableConcept Type { get; set; }

    /// <summary>
    /// What the agents role was
    /// </summary>
    [JsonPropertyName("role")]
    public List<CodeableConcept>? Role { get; set; }

    /// <summary>
    /// Who participated
    /// </summary>
    [Required]
    [JsonPropertyName("who")]
    public Reference Who { get; set; }

    /// <summary>
    /// Who the agent is representing
    /// </summary>
    [JsonPropertyName("onBehalfOf")]
    public Reference OnBehalfOf { get; set; }

    /// <summary>
    /// An entity used in this activity
    /// </summary>
    [JsonPropertyName("entity")]
    public List<BackboneElement>? Entity { get; set; }

    /// <summary>
    /// derivation | revision | quotation | source | removal
    /// </summary>
    [Required]
    [JsonPropertyName("role")]
    public FhirCode Role { get; set; }

    /// <summary>
    /// Identity of entity
    /// </summary>
    [Required]
    [JsonPropertyName("what")]
    public Reference What { get; set; }

    /// <summary>
    /// Entity is attributed to this agent
    /// </summary>
    [JsonPropertyName("agent")]
    public List<>? Agent { get; set; }

    /// <summary>
    /// Signature on target
    /// </summary>
    [JsonPropertyName("signature")]
    public List<Signature>? SignatureValue { get; set; }

    /// <summary>
    /// Validates this instance according to FHIR rules
    /// </summary>
    public override IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        foreach (var result in base.Validate(validationContext))
            yield return result;

        // TODO: Add specific validation rules
    }

}
