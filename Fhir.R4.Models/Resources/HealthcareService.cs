// <auto-generated />
// FHIR R4 Resource: HealthcareService
// This file is automatically generated. Do not edit manually.

using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization;
using Fhir.R4.Models.Base;
using Fhir.TypeFramework.DataTypes;

namespace Fhir.R4.Models.Resources;

/// <summary>
/// The details of a healthcare service available at a location.
/// </summary>
public class HealthcareService : DomainResource
{
    /// <summary>
    /// Resource type name
    /// </summary>
    [JsonPropertyName("resourceType")]
    public override string ResourceType => "HealthcareService";

    /// <summary>
    /// External identifiers for this item
    /// </summary>
    [JsonPropertyName("identifier")]
    public List<Identifier>? IdentifierValue { get; set; }

    /// <summary>
    /// Whether this HealthcareService record is in active use
    /// </summary>
    [JsonPropertyName("active")]
    public FhirBoolean Active { get; set; }

    /// <summary>
    /// Organization that provides this service
    /// </summary>
    [JsonPropertyName("providedBy")]
    public Reference ProvidedBy { get; set; }

    /// <summary>
    /// Broad category of service being performed or delivered
    /// </summary>
    [JsonPropertyName("category")]
    public List<CodeableConcept>? Category { get; set; }

    /// <summary>
    /// Type of service that may be delivered or performed
    /// </summary>
    [JsonPropertyName("type")]
    public List<CodeableConcept>? Type { get; set; }

    /// <summary>
    /// Specialties handled by the HealthcareService
    /// </summary>
    [JsonPropertyName("specialty")]
    public List<CodeableConcept>? Specialty { get; set; }

    /// <summary>
    /// Location(s) where service may be provided
    /// </summary>
    [JsonPropertyName("location")]
    public List<Reference>? Location { get; set; }

    /// <summary>
    /// Description of service as presented to a consumer while searching
    /// </summary>
    [JsonPropertyName("name")]
    public FhirString Name { get; set; }

    /// <summary>
    /// Additional description and/or any specific issues not covered elsewhere
    /// </summary>
    [JsonPropertyName("comment")]
    public FhirString Comment { get; set; }

    /// <summary>
    /// Extra details about the service that can&apos;t be placed in the other fields
    /// </summary>
    [JsonPropertyName("extraDetails")]
    public FhirMarkdown ExtraDetails { get; set; }

    /// <summary>
    /// Facilitates quick identification of the service
    /// </summary>
    [JsonPropertyName("photo")]
    public Attachment Photo { get; set; }

    /// <summary>
    /// Contacts related to the healthcare service
    /// </summary>
    [JsonPropertyName("telecom")]
    public List<ContactPoint>? Telecom { get; set; }

    /// <summary>
    /// Location(s) service is intended for/available to
    /// </summary>
    [JsonPropertyName("coverageArea")]
    public List<Reference>? CoverageArea { get; set; }

    /// <summary>
    /// Conditions under which service is available/offered
    /// </summary>
    [JsonPropertyName("serviceProvisionCode")]
    public List<CodeableConcept>? ServiceProvisionCode { get; set; }

    /// <summary>
    /// Specific eligibility requirements required to use the service
    /// </summary>
    [JsonPropertyName("eligibility")]
    public List<BackboneElement>? Eligibility { get; set; }

    /// <summary>
    /// Coded value for the eligibility
    /// </summary>
    [JsonPropertyName("code")]
    public CodeableConcept Code { get; set; }

    /// <summary>
    /// Describes the eligibility conditions for the service
    /// </summary>
    [JsonPropertyName("comment")]
    public FhirMarkdown Comment { get; set; }

    /// <summary>
    /// Programs that this service is applicable to
    /// </summary>
    [JsonPropertyName("program")]
    public List<CodeableConcept>? Program { get; set; }

    /// <summary>
    /// Collection of characteristics (attributes)
    /// </summary>
    [JsonPropertyName("characteristic")]
    public List<CodeableConcept>? Characteristic { get; set; }

    /// <summary>
    /// The language that this service is offered in
    /// </summary>
    [JsonPropertyName("communication")]
    public List<CodeableConcept>? Communication { get; set; }

    /// <summary>
    /// Ways that the service accepts referrals
    /// </summary>
    [JsonPropertyName("referralMethod")]
    public List<CodeableConcept>? ReferralMethod { get; set; }

    /// <summary>
    /// If an appointment is required for access to this service
    /// </summary>
    [JsonPropertyName("appointmentRequired")]
    public FhirBoolean AppointmentRequired { get; set; }

    /// <summary>
    /// Times the Service Site is available
    /// </summary>
    [JsonPropertyName("availableTime")]
    public List<BackboneElement>? AvailableTime { get; set; }

    /// <summary>
    /// mon | tue | wed | thu | fri | sat | sun
    /// </summary>
    [JsonPropertyName("daysOfWeek")]
    public List<FhirCode>? DaysOfWeek { get; set; }

    /// <summary>
    /// Always available? e.g. 24 hour service
    /// </summary>
    [JsonPropertyName("allDay")]
    public FhirBoolean AllDay { get; set; }

    /// <summary>
    /// Opening time of day (ignored if allDay = true)
    /// </summary>
    [JsonPropertyName("availableStartTime")]
    public FhirTime AvailableStartTime { get; set; }

    /// <summary>
    /// Closing time of day (ignored if allDay = true)
    /// </summary>
    [JsonPropertyName("availableEndTime")]
    public FhirTime AvailableEndTime { get; set; }

    /// <summary>
    /// Not available during this time due to provided reason
    /// </summary>
    [JsonPropertyName("notAvailable")]
    public List<BackboneElement>? NotAvailable { get; set; }

    /// <summary>
    /// Reason presented to the user explaining why time not available
    /// </summary>
    [Required]
    [JsonPropertyName("description")]
    public FhirString Description { get; set; }

    /// <summary>
    /// Service not available from this date
    /// </summary>
    [JsonPropertyName("during")]
    public Period During { get; set; }

    /// <summary>
    /// Description of availability exceptions
    /// </summary>
    [JsonPropertyName("availabilityExceptions")]
    public FhirString AvailabilityExceptions { get; set; }

    /// <summary>
    /// Technical endpoints providing access to electronic services operated for the healthcare service
    /// </summary>
    [JsonPropertyName("endpoint")]
    public List<Reference>? Endpoint { get; set; }

    /// <summary>
    /// Validates this instance according to FHIR rules
    /// </summary>
    public override IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        foreach (var result in base.Validate(validationContext))
            yield return result;

        // TODO: Add specific validation rules
    }

}
