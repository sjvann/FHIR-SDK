// <auto-generated />
// FHIR R4 Resource: TestReport
// This file is automatically generated. Do not edit manually.

using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization;
using Fhir.R4.Models.Base;
using Fhir.TypeFramework.DataTypes;

namespace Fhir.R4.Models.Resources;

/// <summary>
/// A summary of information based on the results of executing a TestScript.
/// </summary>
public class TestReport : DomainResource
{
    /// <summary>
    /// Resource type name
    /// </summary>
    [JsonPropertyName("resourceType")]
    public override string ResourceType => "TestReport";

    /// <summary>
    /// External identifier
    /// </summary>
    [JsonPropertyName("identifier")]
    public Identifier IdentifierValue { get; set; }

    /// <summary>
    /// Informal name of the executed TestScript
    /// </summary>
    [JsonPropertyName("name")]
    public FhirString Name { get; set; }

    /// <summary>
    /// completed | in-progress | waiting | stopped | entered-in-error
    /// </summary>
    [Required]
    [JsonPropertyName("status")]
    public FhirCode Status { get; set; }

    /// <summary>
    /// Reference to the  version-specific TestScript that was executed to produce this TestReport
    /// </summary>
    [Required]
    [JsonPropertyName("testScript")]
    public Reference TestScript { get; set; }

    /// <summary>
    /// pass | fail | pending
    /// </summary>
    [Required]
    [JsonPropertyName("result")]
    public FhirCode Result { get; set; }

    /// <summary>
    /// The final score (percentage of tests passed) resulting from the execution of the TestScript
    /// </summary>
    [JsonPropertyName("score")]
    public FhirDecimal Score { get; set; }

    /// <summary>
    /// Name of the tester producing this report (Organization or individual)
    /// </summary>
    [JsonPropertyName("tester")]
    public FhirString Tester { get; set; }

    /// <summary>
    /// When the TestScript was executed and this TestReport was generated
    /// </summary>
    [JsonPropertyName("issued")]
    public FhirDateTime Issued { get; set; }

    /// <summary>
    /// A participant in the test execution, either the execution engine, a client, or a server
    /// </summary>
    [JsonPropertyName("participant")]
    public List<BackboneElement>? Participant { get; set; }

    /// <summary>
    /// The results of the series of required setup operations before the tests were executed
    /// </summary>
    [JsonPropertyName("setup")]
    public BackboneElement Setup { get; set; }

    /// <summary>
    /// A setup operation or assert that was executed
    /// </summary>
    [Required]
    [JsonPropertyName("action")]
    public List<BackboneElement> Action { get; set; }

    /// <summary>
    /// A test executed from the test script
    /// </summary>
    [JsonPropertyName("test")]
    public List<BackboneElement>? Test { get; set; }

    /// <summary>
    /// Tracking/logging name of this test
    /// </summary>
    [JsonPropertyName("name")]
    public FhirString Name { get; set; }

    /// <summary>
    /// Tracking/reporting short description of the test
    /// </summary>
    [JsonPropertyName("description")]
    public FhirString Description { get; set; }

    /// <summary>
    /// A test operation or assert that was performed
    /// </summary>
    [Required]
    [JsonPropertyName("action")]
    public List<BackboneElement> Action { get; set; }

    /// <summary>
    /// The results of running the series of required clean up steps
    /// </summary>
    [JsonPropertyName("teardown")]
    public BackboneElement Teardown { get; set; }

    /// <summary>
    /// One or more teardown operations performed
    /// </summary>
    [Required]
    [JsonPropertyName("action")]
    public List<BackboneElement> Action { get; set; }

    /// <summary>
    /// Validates this instance according to FHIR rules
    /// </summary>
    public override IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        foreach (var result in base.Validate(validationContext))
            yield return result;

        // TODO: Add specific validation rules
    }

}
