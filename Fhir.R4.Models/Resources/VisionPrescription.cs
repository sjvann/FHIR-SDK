// <auto-generated />
// FHIR R4 Resource: VisionPrescription
// This file is automatically generated. Do not edit manually.

using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization;
using Fhir.R4.Models.Base;
using Fhir.TypeFramework.DataTypes;

namespace Fhir.R4.Models.Resources;

/// <summary>
/// An authorization for the provision of glasses and/or contact lenses to a patient.
/// </summary>
public class VisionPrescription : DomainResource
{
    /// <summary>
    /// Resource type name
    /// </summary>
    [JsonPropertyName("resourceType")]
    public override string ResourceType => "VisionPrescription";

    /// <summary>
    /// Business Identifier for vision prescription
    /// </summary>
    [JsonPropertyName("identifier")]
    public List<Identifier>? IdentifierValue { get; set; }

    /// <summary>
    /// active | cancelled | draft | entered-in-error
    /// </summary>
    [Required]
    [JsonPropertyName("status")]
    public FhirCode Status { get; set; }

    /// <summary>
    /// Response creation date
    /// </summary>
    [Required]
    [JsonPropertyName("created")]
    public FhirDateTime Created { get; set; }

    /// <summary>
    /// Who prescription is for
    /// </summary>
    [Required]
    [JsonPropertyName("patient")]
    public Reference Patient { get; set; }

    /// <summary>
    /// Created during encounter / admission / stay
    /// </summary>
    [JsonPropertyName("encounter")]
    public Reference Encounter { get; set; }

    /// <summary>
    /// When prescription was authorized
    /// </summary>
    [Required]
    [JsonPropertyName("dateWritten")]
    public FhirDateTime DateWritten { get; set; }

    /// <summary>
    /// Who authorized the vision prescription
    /// </summary>
    [Required]
    [JsonPropertyName("prescriber")]
    public Reference Prescriber { get; set; }

    /// <summary>
    /// Vision lens authorization
    /// </summary>
    [Required]
    [JsonPropertyName("lensSpecification")]
    public List<BackboneElement> LensSpecification { get; set; }

    /// <summary>
    /// Product to be supplied
    /// </summary>
    [Required]
    [JsonPropertyName("product")]
    public CodeableConcept Product { get; set; }

    /// <summary>
    /// right | left
    /// </summary>
    [Required]
    [JsonPropertyName("eye")]
    public FhirCode Eye { get; set; }

    /// <summary>
    /// Power of the lens
    /// </summary>
    [JsonPropertyName("sphere")]
    public FhirDecimal Sphere { get; set; }

    /// <summary>
    /// Lens power for astigmatism
    /// </summary>
    [JsonPropertyName("cylinder")]
    public FhirDecimal Cylinder { get; set; }

    /// <summary>
    /// Lens meridian which contain no power for astigmatism
    /// </summary>
    [JsonPropertyName("axis")]
    public FhirInteger Axis { get; set; }

    /// <summary>
    /// Eye alignment compensation
    /// </summary>
    [JsonPropertyName("prism")]
    public List<BackboneElement>? Prism { get; set; }

    /// <summary>
    /// Added power for multifocal levels
    /// </summary>
    [JsonPropertyName("add")]
    public FhirDecimal Add { get; set; }

    /// <summary>
    /// Contact lens power
    /// </summary>
    [JsonPropertyName("power")]
    public FhirDecimal Power { get; set; }

    /// <summary>
    /// Contact lens back curvature
    /// </summary>
    [JsonPropertyName("backCurve")]
    public FhirDecimal BackCurve { get; set; }

    /// <summary>
    /// Contact lens diameter
    /// </summary>
    [JsonPropertyName("diameter")]
    public FhirDecimal Diameter { get; set; }

    /// <summary>
    /// Lens wear duration
    /// </summary>
    [JsonPropertyName("duration")]
    public Quantity Duration { get; set; }

    /// <summary>
    /// Color required
    /// </summary>
    [JsonPropertyName("color")]
    public FhirString Color { get; set; }

    /// <summary>
    /// Brand required
    /// </summary>
    [JsonPropertyName("brand")]
    public FhirString Brand { get; set; }

    /// <summary>
    /// Notes for coatings
    /// </summary>
    [JsonPropertyName("note")]
    public List<Annotation>? Note { get; set; }

    /// <summary>
    /// Validates this instance according to FHIR rules
    /// </summary>
    public override IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        foreach (var result in base.Validate(validationContext))
            yield return result;

        // TODO: Add specific validation rules
    }

}
