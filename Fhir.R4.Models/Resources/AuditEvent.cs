// <auto-generated />
// FHIR R4 Resource: AuditEvent
// This file is automatically generated. Do not edit manually.

using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization;
using Fhir.R4.Models.Base;
using Fhir.TypeFramework.DataTypes;

namespace Fhir.R4.Models.Resources;

/// <summary>
/// A record of an event made for purposes of maintaining a security log. Typical uses include detection of intrusion attempts and monitoring for inappropriate usage.
/// </summary>
public class AuditEvent : DomainResource
{
    /// <summary>
    /// Resource type name
    /// </summary>
    [JsonPropertyName("resourceType")]
    public override string ResourceType => "AuditEvent";

    /// <summary>
    /// Type/identifier of event
    /// </summary>
    [Required]
    [JsonPropertyName("type")]
    public Coding Type { get; set; }

    /// <summary>
    /// More specific type/id for the event
    /// </summary>
    [JsonPropertyName("subtype")]
    public List<Coding>? Subtype { get; set; }

    /// <summary>
    /// Type of action performed during the event
    /// </summary>
    [JsonPropertyName("action")]
    public FhirCode Action { get; set; }

    /// <summary>
    /// When the activity occurred
    /// </summary>
    [JsonPropertyName("period")]
    public Period PeriodValue { get; set; }

    /// <summary>
    /// Time when the event was recorded
    /// </summary>
    [Required]
    [JsonPropertyName("recorded")]
    public FhirInstant Recorded { get; set; }

    /// <summary>
    /// Whether the event succeeded or failed
    /// </summary>
    [JsonPropertyName("outcome")]
    public FhirCode Outcome { get; set; }

    /// <summary>
    /// Description of the event outcome
    /// </summary>
    [JsonPropertyName("outcomeDesc")]
    public FhirString OutcomeDesc { get; set; }

    /// <summary>
    /// The purposeOfUse of the event
    /// </summary>
    [JsonPropertyName("purposeOfEvent")]
    public List<CodeableConcept>? PurposeOfEvent { get; set; }

    /// <summary>
    /// Actor involved in the event
    /// </summary>
    [Required]
    [JsonPropertyName("agent")]
    public List<BackboneElement> Agent { get; set; }

    /// <summary>
    /// How agent participated
    /// </summary>
    [JsonPropertyName("type")]
    public CodeableConcept Type { get; set; }

    /// <summary>
    /// Agent role in the event
    /// </summary>
    [JsonPropertyName("role")]
    public List<CodeableConcept>? Role { get; set; }

    /// <summary>
    /// Identifier of who
    /// </summary>
    [JsonPropertyName("who")]
    public Reference Who { get; set; }

    /// <summary>
    /// Alternative User identity
    /// </summary>
    [JsonPropertyName("altId")]
    public FhirString AltId { get; set; }

    /// <summary>
    /// Human friendly name for the agent
    /// </summary>
    [JsonPropertyName("name")]
    public FhirString Name { get; set; }

    /// <summary>
    /// Whether user is initiator
    /// </summary>
    [Required]
    [JsonPropertyName("requestor")]
    public FhirBoolean Requestor { get; set; }

    /// <summary>
    /// Where
    /// </summary>
    [JsonPropertyName("location")]
    public Reference Location { get; set; }

    /// <summary>
    /// Policy that authorized event
    /// </summary>
    [JsonPropertyName("policy")]
    public List<FhirUri>? Policy { get; set; }

    /// <summary>
    /// Type of media
    /// </summary>
    [JsonPropertyName("media")]
    public Coding Media { get; set; }

    /// <summary>
    /// Logical network location for application activity
    /// </summary>
    [JsonPropertyName("network")]
    public BackboneElement Network { get; set; }

    /// <summary>
    /// Reason given for this user
    /// </summary>
    [JsonPropertyName("purposeOfUse")]
    public List<CodeableConcept>? PurposeOfUse { get; set; }

    /// <summary>
    /// Audit Event Reporter
    /// </summary>
    [Required]
    [JsonPropertyName("source")]
    public BackboneElement Source { get; set; }

    /// <summary>
    /// Logical source location within the enterprise
    /// </summary>
    [JsonPropertyName("site")]
    public FhirString Site { get; set; }

    /// <summary>
    /// The identity of source detecting the event
    /// </summary>
    [Required]
    [JsonPropertyName("observer")]
    public Reference Observer { get; set; }

    /// <summary>
    /// The type of source where event originated
    /// </summary>
    [JsonPropertyName("type")]
    public List<Coding>? Type { get; set; }

    /// <summary>
    /// Data or objects used
    /// </summary>
    [JsonPropertyName("entity")]
    public List<BackboneElement>? Entity { get; set; }

    /// <summary>
    /// Specific instance of resource
    /// </summary>
    [JsonPropertyName("what")]
    public Reference What { get; set; }

    /// <summary>
    /// Type of entity involved
    /// </summary>
    [JsonPropertyName("type")]
    public Coding Type { get; set; }

    /// <summary>
    /// What role the entity played
    /// </summary>
    [JsonPropertyName("role")]
    public Coding Role { get; set; }

    /// <summary>
    /// Life-cycle stage for the entity
    /// </summary>
    [JsonPropertyName("lifecycle")]
    public Coding Lifecycle { get; set; }

    /// <summary>
    /// Security labels on the entity
    /// </summary>
    [JsonPropertyName("securityLabel")]
    public List<Coding>? SecurityLabel { get; set; }

    /// <summary>
    /// Descriptor for entity
    /// </summary>
    [JsonPropertyName("name")]
    public FhirString Name { get; set; }

    /// <summary>
    /// Descriptive text
    /// </summary>
    [JsonPropertyName("description")]
    public FhirString Description { get; set; }

    /// <summary>
    /// Query parameters
    /// </summary>
    [JsonPropertyName("query")]
    public FhirBase64Binary Query { get; set; }

    /// <summary>
    /// Additional Information about the entity
    /// </summary>
    [JsonPropertyName("detail")]
    public List<BackboneElement>? Detail { get; set; }

    /// <summary>
    /// Validates this instance according to FHIR rules
    /// </summary>
    public override IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        foreach (var result in base.Validate(validationContext))
            yield return result;

        // TODO: Add specific validation rules
    }

}
