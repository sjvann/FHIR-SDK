// <auto-generated />
// FHIR R4 Resource: Bundle
// This file is automatically generated. Do not edit manually.

using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization;
using Fhir.R4.Models.Base;
using Fhir.TypeFramework.DataTypes;

namespace Fhir.R4.Models.Resources;

/// <summary>
/// A container for a collection of resources.
/// </summary>
public class Bundle : DomainResource
{
    /// <summary>
    /// Resource type name
    /// </summary>
    [JsonPropertyName("resourceType")]
    public override string ResourceType => "Bundle";

    /// <summary>
    /// Persistent identifier for the bundle
    /// </summary>
    [JsonPropertyName("identifier")]
    public Identifier IdentifierValue { get; set; }

    /// <summary>
    /// document | message | transaction | transaction-response | batch | batch-response | history | searchset | collection
    /// </summary>
    [Required]
    [JsonPropertyName("type")]
    public FhirCode Type { get; set; }

    /// <summary>
    /// When the bundle was assembled
    /// </summary>
    [JsonPropertyName("timestamp")]
    public FhirInstant Timestamp { get; set; }

    /// <summary>
    /// If search, the total number of matches
    /// </summary>
    [JsonPropertyName("total")]
    public FhirUnsignedInt Total { get; set; }

    /// <summary>
    /// Links related to this Bundle
    /// </summary>
    [JsonPropertyName("link")]
    public List<BackboneElement>? Link { get; set; }

    /// <summary>
    /// Entry in the bundle - will have a resource or information
    /// </summary>
    [JsonPropertyName("entry")]
    public List<BackboneElement>? Entry { get; set; }

    /// <summary>
    /// Digital Signature
    /// </summary>
    [JsonPropertyName("signature")]
    public Signature SignatureValue { get; set; }

    /// <summary>
    /// Validates this instance according to FHIR rules
    /// </summary>
    public override IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        foreach (var result in base.Validate(validationContext))
            yield return result;

        // TODO: Add specific validation rules
    }

}
