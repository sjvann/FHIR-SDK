// <auto-generated />
// FHIR R4 Resource: ExampleScenario
// This file is automatically generated. Do not edit manually.

using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization;
using Fhir.R4.Models.Base;
using Fhir.TypeFramework.DataTypes;

namespace Fhir.R4.Models.Resources;

/// <summary>
/// Example of workflow instance.
/// </summary>
public class ExampleScenario : DomainResource
{
    /// <summary>
    /// Resource type name
    /// </summary>
    [JsonPropertyName("resourceType")]
    public override string ResourceType => "ExampleScenario";

    /// <summary>
    /// Canonical identifier for this example scenario, represented as a URI (globally unique)
    /// </summary>
    [JsonPropertyName("url")]
    public FhirUri Url { get; set; }

    /// <summary>
    /// Additional identifier for the example scenario
    /// </summary>
    [JsonPropertyName("identifier")]
    public List<Identifier>? IdentifierValue { get; set; }

    /// <summary>
    /// Business version of the example scenario
    /// </summary>
    [JsonPropertyName("version")]
    public FhirString Version { get; set; }

    /// <summary>
    /// Name for this example scenario (computer friendly)
    /// </summary>
    [JsonPropertyName("name")]
    public FhirString Name { get; set; }

    /// <summary>
    /// draft | active | retired | unknown
    /// </summary>
    [Required]
    [JsonPropertyName("status")]
    public FhirCode Status { get; set; }

    /// <summary>
    /// For testing purposes, not real usage
    /// </summary>
    [JsonPropertyName("experimental")]
    public FhirBoolean Experimental { get; set; }

    /// <summary>
    /// Date last changed
    /// </summary>
    [JsonPropertyName("date")]
    public FhirDateTime Date { get; set; }

    /// <summary>
    /// Name of the publisher (organization or individual)
    /// </summary>
    [JsonPropertyName("publisher")]
    public FhirString Publisher { get; set; }

    /// <summary>
    /// Contact details for the publisher
    /// </summary>
    [JsonPropertyName("contact")]
    public List<ContactDetail>? Contact { get; set; }

    /// <summary>
    /// The context that the content is intended to support
    /// </summary>
    [JsonPropertyName("useContext")]
    public List<UsageContext>? UseContext { get; set; }

    /// <summary>
    /// Intended jurisdiction for example scenario (if applicable)
    /// </summary>
    [JsonPropertyName("jurisdiction")]
    public List<CodeableConcept>? Jurisdiction { get; set; }

    /// <summary>
    /// Use and/or publishing restrictions
    /// </summary>
    [JsonPropertyName("copyright")]
    public FhirMarkdown Copyright { get; set; }

    /// <summary>
    /// The purpose of the example, e.g. to illustrate a scenario
    /// </summary>
    [JsonPropertyName("purpose")]
    public FhirMarkdown Purpose { get; set; }

    /// <summary>
    /// Actor participating in the resource
    /// </summary>
    [JsonPropertyName("actor")]
    public List<BackboneElement>? Actor { get; set; }

    /// <summary>
    /// ID or acronym of the actor
    /// </summary>
    [Required]
    [JsonPropertyName("actorId")]
    public FhirString ActorId { get; set; }

    /// <summary>
    /// person | entity
    /// </summary>
    [Required]
    [JsonPropertyName("type")]
    public FhirCode Type { get; set; }

    /// <summary>
    /// The name of the actor as shown in the page
    /// </summary>
    [JsonPropertyName("name")]
    public FhirString Name { get; set; }

    /// <summary>
    /// The description of the actor
    /// </summary>
    [JsonPropertyName("description")]
    public FhirMarkdown Description { get; set; }

    /// <summary>
    /// Each resource and each version that is present in the workflow
    /// </summary>
    [JsonPropertyName("instance")]
    public List<BackboneElement>? Instance { get; set; }

    /// <summary>
    /// The id of the resource for referencing
    /// </summary>
    [Required]
    [JsonPropertyName("resourceId")]
    public FhirString ResourceId { get; set; }

    /// <summary>
    /// A short name for the resource instance
    /// </summary>
    [JsonPropertyName("name")]
    public FhirString Name { get; set; }

    /// <summary>
    /// Human-friendly description of the resource instance
    /// </summary>
    [JsonPropertyName("description")]
    public FhirMarkdown Description { get; set; }

    /// <summary>
    /// A specific version of the resource
    /// </summary>
    [JsonPropertyName("version")]
    public List<BackboneElement>? Version { get; set; }

    /// <summary>
    /// Resources contained in the instance
    /// </summary>
    [JsonPropertyName("containedInstance")]
    public List<BackboneElement>? ContainedInstance { get; set; }

    /// <summary>
    /// Each major process - a group of operations
    /// </summary>
    [JsonPropertyName("process")]
    public List<BackboneElement>? Process { get; set; }

    /// <summary>
    /// The diagram title of the group of operations
    /// </summary>
    [Required]
    [JsonPropertyName("title")]
    public FhirString Title { get; set; }

    /// <summary>
    /// A longer description of the group of operations
    /// </summary>
    [JsonPropertyName("description")]
    public FhirMarkdown Description { get; set; }

    /// <summary>
    /// Description of initial status before the process starts
    /// </summary>
    [JsonPropertyName("preConditions")]
    public FhirMarkdown PreConditions { get; set; }

    /// <summary>
    /// Description of final status after the process ends
    /// </summary>
    [JsonPropertyName("postConditions")]
    public FhirMarkdown PostConditions { get; set; }

    /// <summary>
    /// Each step of the process
    /// </summary>
    [JsonPropertyName("step")]
    public List<BackboneElement>? Step { get; set; }

    /// <summary>
    /// Another nested workflow
    /// </summary>
    [JsonPropertyName("workflow")]
    public List<FhirCanonical>? Workflow { get; set; }

    /// <summary>
    /// Validates this instance according to FHIR rules
    /// </summary>
    public override IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        foreach (var result in base.Validate(validationContext))
            yield return result;

        // TODO: Add specific validation rules
    }

}
