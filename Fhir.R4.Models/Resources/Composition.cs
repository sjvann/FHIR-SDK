// <auto-generated />
// FHIR R4 Resource: Composition
// This file is automatically generated. Do not edit manually.

using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization;
using Fhir.R4.Models.Base;
using Fhir.TypeFramework.DataTypes;

namespace Fhir.R4.Models.Resources;

/// <summary>
/// A set of healthcare-related information that is assembled together into a single logical package that provides a single coherent statement of meaning, establishes its own context and that has clinical attestation with regard to who is making the statement. A Composition defines the structure and narrative content necessary for a document. However, a Composition alone does not constitute a document. Rather, the Composition must be the first entry in a Bundle where Bundle.type=document, and any other resources referenced from Composition must be included as subsequent entries in the Bundle (for example Patient, Practitioner, Encounter, etc.).
/// </summary>
public class Composition : DomainResource
{
    /// <summary>
    /// Resource type name
    /// </summary>
    [JsonPropertyName("resourceType")]
    public override string ResourceType => "Composition";

    /// <summary>
    /// Version-independent identifier for the Composition
    /// </summary>
    [JsonPropertyName("identifier")]
    public Identifier IdentifierValue { get; set; }

    /// <summary>
    /// preliminary | final | amended | entered-in-error
    /// </summary>
    [Required]
    [JsonPropertyName("status")]
    public FhirCode Status { get; set; }

    /// <summary>
    /// Kind of composition (LOINC if possible)
    /// </summary>
    [Required]
    [JsonPropertyName("type")]
    public CodeableConcept Type { get; set; }

    /// <summary>
    /// Categorization of Composition
    /// </summary>
    [JsonPropertyName("category")]
    public List<CodeableConcept>? Category { get; set; }

    /// <summary>
    /// Who and/or what the composition is about
    /// </summary>
    [JsonPropertyName("subject")]
    public Reference Subject { get; set; }

    /// <summary>
    /// Context of the Composition
    /// </summary>
    [JsonPropertyName("encounter")]
    public Reference Encounter { get; set; }

    /// <summary>
    /// Composition editing time
    /// </summary>
    [Required]
    [JsonPropertyName("date")]
    public FhirDateTime Date { get; set; }

    /// <summary>
    /// Who and/or what authored the composition
    /// </summary>
    [Required]
    [JsonPropertyName("author")]
    public List<Reference> Author { get; set; }

    /// <summary>
    /// Human Readable name/title
    /// </summary>
    [Required]
    [JsonPropertyName("title")]
    public FhirString Title { get; set; }

    /// <summary>
    /// As defined by affinity domain
    /// </summary>
    [JsonPropertyName("confidentiality")]
    public FhirCode Confidentiality { get; set; }

    /// <summary>
    /// Attests to accuracy of composition
    /// </summary>
    [JsonPropertyName("attester")]
    public List<BackboneElement>? Attester { get; set; }

    /// <summary>
    /// personal | professional | legal | official
    /// </summary>
    [Required]
    [JsonPropertyName("mode")]
    public FhirCode Mode { get; set; }

    /// <summary>
    /// When the composition was attested
    /// </summary>
    [JsonPropertyName("time")]
    public FhirDateTime Time { get; set; }

    /// <summary>
    /// Who attested the composition
    /// </summary>
    [JsonPropertyName("party")]
    public Reference Party { get; set; }

    /// <summary>
    /// Organization which maintains the composition
    /// </summary>
    [JsonPropertyName("custodian")]
    public Reference Custodian { get; set; }

    /// <summary>
    /// Relationships to other compositions/documents
    /// </summary>
    [JsonPropertyName("relatesTo")]
    public List<BackboneElement>? RelatesTo { get; set; }

    /// <summary>
    /// replaces | transforms | signs | appends
    /// </summary>
    [Required]
    [JsonPropertyName("code")]
    public FhirCode CodeValue { get; set; }

    /// <summary>
    /// The clinical service(s) being documented
    /// </summary>
    [JsonPropertyName("event")]
    public List<BackboneElement>? Event { get; set; }

    /// <summary>
    /// Code(s) that apply to the event being documented
    /// </summary>
    [JsonPropertyName("code")]
    public List<CodeableConcept>? Code { get; set; }

    /// <summary>
    /// The period covered by the documentation
    /// </summary>
    [JsonPropertyName("period")]
    public Period PeriodValue { get; set; }

    /// <summary>
    /// The event(s) being documented
    /// </summary>
    [JsonPropertyName("detail")]
    public List<Reference>? Detail { get; set; }

    /// <summary>
    /// Composition is broken into sections
    /// </summary>
    [JsonPropertyName("section")]
    public List<BackboneElement>? Section { get; set; }

    /// <summary>
    /// Label for section (e.g. for ToC)
    /// </summary>
    [JsonPropertyName("title")]
    public FhirString Title { get; set; }

    /// <summary>
    /// Classification of section (recommended)
    /// </summary>
    [JsonPropertyName("code")]
    public CodeableConcept Code { get; set; }

    /// <summary>
    /// Who and/or what authored the section
    /// </summary>
    [JsonPropertyName("author")]
    public List<Reference>? Author { get; set; }

    /// <summary>
    /// Who/what the section is about, when it is not about the subject of composition
    /// </summary>
    [JsonPropertyName("focus")]
    public Reference Focus { get; set; }

    /// <summary>
    /// working | snapshot | changes
    /// </summary>
    [JsonPropertyName("mode")]
    public FhirCode Mode { get; set; }

    /// <summary>
    /// Order of section entries
    /// </summary>
    [JsonPropertyName("orderedBy")]
    public CodeableConcept OrderedBy { get; set; }

    /// <summary>
    /// A reference to data that supports this section
    /// </summary>
    [JsonPropertyName("entry")]
    public List<Reference>? Entry { get; set; }

    /// <summary>
    /// Why the section is empty
    /// </summary>
    [JsonPropertyName("emptyReason")]
    public CodeableConcept EmptyReason { get; set; }

    /// <summary>
    /// Nested Section
    /// </summary>
    [JsonPropertyName("section")]
    public List<>? Section { get; set; }

    /// <summary>
    /// Validates this instance according to FHIR rules
    /// </summary>
    public override IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        foreach (var result in base.Validate(validationContext))
            yield return result;

        // TODO: Add specific validation rules
    }

}
