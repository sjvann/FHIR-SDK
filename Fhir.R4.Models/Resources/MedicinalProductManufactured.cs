// <auto-generated />
// FHIR R4 Resource: MedicinalProductManufactured
// This file is automatically generated. Do not edit manually.

using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization;
using Fhir.R4.Models.Base;
using Fhir.TypeFramework.DataTypes;

namespace Fhir.R4.Models.Resources;

/// <summary>
/// The manufactured item as contained in the packaged medicinal product.
/// </summary>
public class MedicinalProductManufactured : DomainResource
{
    /// <summary>
    /// Resource type name
    /// </summary>
    [JsonPropertyName("resourceType")]
    public override string ResourceType => "MedicinalProductManufactured";

    /// <summary>
    /// Dose form as manufactured and before any transformation into the pharmaceutical product
    /// </summary>
    [Required]
    [JsonPropertyName("manufacturedDoseForm")]
    public CodeableConcept ManufacturedDoseForm { get; set; }

    /// <summary>
    /// The “real world” units in which the quantity of the manufactured item is described
    /// </summary>
    [JsonPropertyName("unitOfPresentation")]
    public CodeableConcept UnitOfPresentation { get; set; }

    /// <summary>
    /// The quantity or &quot;count number&quot; of the manufactured item
    /// </summary>
    [Required]
    [JsonPropertyName("quantity")]
    public Quantity QuantityValue { get; set; }

    /// <summary>
    /// Manufacturer of the item (Note that this should be named &quot;manufacturer&quot; but it currently causes technical issues)
    /// </summary>
    [JsonPropertyName("manufacturer")]
    public List<Reference>? Manufacturer { get; set; }

    /// <summary>
    /// Ingredient
    /// </summary>
    [JsonPropertyName("ingredient")]
    public List<Reference>? Ingredient { get; set; }

    /// <summary>
    /// Dimensions, color etc.
    /// </summary>
    [JsonPropertyName("physicalCharacteristics")]
    public ProdCharacteristic PhysicalCharacteristics { get; set; }

    /// <summary>
    /// Other codeable characteristics
    /// </summary>
    [JsonPropertyName("otherCharacteristics")]
    public List<CodeableConcept>? OtherCharacteristics { get; set; }

    /// <summary>
    /// Validates this instance according to FHIR rules
    /// </summary>
    public override IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        foreach (var result in base.Validate(validationContext))
            yield return result;

        // TODO: Add specific validation rules
    }

}
