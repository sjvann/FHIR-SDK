// <auto-generated />
// FHIR R4 Resource: Substance
// This file is automatically generated. Do not edit manually.

using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization;
using Fhir.R4.Models.Base;
using Fhir.TypeFramework.DataTypes;

namespace Fhir.R4.Models.Resources;

/// <summary>
/// A homogeneous material with a definite composition.
/// </summary>
public class Substance : DomainResource
{
    /// <summary>
    /// Resource type name
    /// </summary>
    [JsonPropertyName("resourceType")]
    public override string ResourceType => "Substance";

    /// <summary>
    /// Unique identifier
    /// </summary>
    [JsonPropertyName("identifier")]
    public List<Identifier>? IdentifierValue { get; set; }

    /// <summary>
    /// active | inactive | entered-in-error
    /// </summary>
    [JsonPropertyName("status")]
    public FhirCode Status { get; set; }

    /// <summary>
    /// What class/type of substance this is
    /// </summary>
    [JsonPropertyName("category")]
    public List<CodeableConcept>? Category { get; set; }

    /// <summary>
    /// What substance this is
    /// </summary>
    [Required]
    [JsonPropertyName("code")]
    public CodeableConcept Code { get; set; }

    /// <summary>
    /// Textual description of the substance, comments
    /// </summary>
    [JsonPropertyName("description")]
    public FhirString Description { get; set; }

    /// <summary>
    /// If this describes a specific package/container of the substance
    /// </summary>
    [JsonPropertyName("instance")]
    public List<BackboneElement>? Instance { get; set; }

    /// <summary>
    /// Identifier of the package/container
    /// </summary>
    [JsonPropertyName("identifier")]
    public Identifier IdentifierValue { get; set; }

    /// <summary>
    /// When no longer valid to use
    /// </summary>
    [JsonPropertyName("expiry")]
    public FhirDateTime Expiry { get; set; }

    /// <summary>
    /// Amount of substance in the package
    /// </summary>
    [JsonPropertyName("quantity")]
    public Quantity QuantityValue { get; set; }

    /// <summary>
    /// Composition information about the substance
    /// </summary>
    [JsonPropertyName("ingredient")]
    public List<BackboneElement>? Ingredient { get; set; }

    /// <summary>
    /// Optional amount (concentration)
    /// </summary>
    [JsonPropertyName("quantity")]
    public Ratio Quantity { get; set; }

    /// <summary>
    /// Validates this instance according to FHIR rules
    /// </summary>
    public override IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        foreach (var result in base.Validate(validationContext))
            yield return result;

        // TODO: Add specific validation rules
    }

}
