// <auto-generated />
// FHIR R4 Resource: Observation
// This file is automatically generated. Do not edit manually.

using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization;
using Fhir.R4.Models.Base;
using Fhir.TypeFramework.DataTypes;

namespace Fhir.R4.Models.Resources;

/// <summary>
/// Measurements and simple assertions made about a patient, device or other subject.
/// </summary>
public class Observation : DomainResource
{
    /// <summary>
    /// Resource type name
    /// </summary>
    [JsonPropertyName("resourceType")]
    public override string ResourceType => "Observation";

    /// <summary>
    /// Business Identifier for observation
    /// </summary>
    [JsonPropertyName("identifier")]
    public List<Identifier>? IdentifierValue { get; set; }

    /// <summary>
    /// Fulfills plan, proposal or order
    /// </summary>
    [JsonPropertyName("basedOn")]
    public List<Reference>? BasedOn { get; set; }

    /// <summary>
    /// Part of referenced event
    /// </summary>
    [JsonPropertyName("partOf")]
    public List<Reference>? PartOf { get; set; }

    /// <summary>
    /// registered | preliminary | final | amended +
    /// </summary>
    [Required]
    [JsonPropertyName("status")]
    public FhirCode Status { get; set; }

    /// <summary>
    /// Classification of  type of observation
    /// </summary>
    [JsonPropertyName("category")]
    public List<CodeableConcept>? Category { get; set; }

    /// <summary>
    /// Type of observation (code / type)
    /// </summary>
    [Required]
    [JsonPropertyName("code")]
    public CodeableConcept Code { get; set; }

    /// <summary>
    /// Who and/or what the observation is about
    /// </summary>
    [JsonPropertyName("subject")]
    public Reference Subject { get; set; }

    /// <summary>
    /// What the observation is about, when it is not about the subject of record
    /// </summary>
    [JsonPropertyName("focus")]
    public List<Reference>? Focus { get; set; }

    /// <summary>
    /// Healthcare event during which this observation is made
    /// </summary>
    [JsonPropertyName("encounter")]
    public Reference Encounter { get; set; }

    /// <summary>
    /// Date/Time this version was made available
    /// </summary>
    [JsonPropertyName("issued")]
    public FhirInstant Issued { get; set; }

    /// <summary>
    /// Who is responsible for the observation
    /// </summary>
    [JsonPropertyName("performer")]
    public List<Reference>? Performer { get; set; }

    /// <summary>
    /// Why the result is missing
    /// </summary>
    [JsonPropertyName("dataAbsentReason")]
    public CodeableConcept DataAbsentReason { get; set; }

    /// <summary>
    /// High, low, normal, etc.
    /// </summary>
    [JsonPropertyName("interpretation")]
    public List<CodeableConcept>? Interpretation { get; set; }

    /// <summary>
    /// Comments about the observation
    /// </summary>
    [JsonPropertyName("note")]
    public List<Annotation>? Note { get; set; }

    /// <summary>
    /// Observed body part
    /// </summary>
    [JsonPropertyName("bodySite")]
    public CodeableConcept BodySite { get; set; }

    /// <summary>
    /// How it was done
    /// </summary>
    [JsonPropertyName("method")]
    public CodeableConcept Method { get; set; }

    /// <summary>
    /// Specimen used for this observation
    /// </summary>
    [JsonPropertyName("specimen")]
    public Reference Specimen { get; set; }

    /// <summary>
    /// (Measurement) Device
    /// </summary>
    [JsonPropertyName("device")]
    public Reference Device { get; set; }

    /// <summary>
    /// Provides guide for interpretation
    /// </summary>
    [JsonPropertyName("referenceRange")]
    public List<BackboneElement>? ReferenceRange { get; set; }

    /// <summary>
    /// Low Range, if relevant
    /// </summary>
    [JsonPropertyName("low")]
    public Quantity Low { get; set; }

    /// <summary>
    /// High Range, if relevant
    /// </summary>
    [JsonPropertyName("high")]
    public Quantity High { get; set; }

    /// <summary>
    /// Reference range qualifier
    /// </summary>
    [JsonPropertyName("type")]
    public CodeableConcept Type { get; set; }

    /// <summary>
    /// Reference range population
    /// </summary>
    [JsonPropertyName("appliesTo")]
    public List<CodeableConcept>? AppliesTo { get; set; }

    /// <summary>
    /// Applicable age range, if relevant
    /// </summary>
    [JsonPropertyName("age")]
    public Range Age { get; set; }

    /// <summary>
    /// Related resource that belongs to the Observation group
    /// </summary>
    [JsonPropertyName("hasMember")]
    public List<Reference>? HasMember { get; set; }

    /// <summary>
    /// Related measurements the observation is made from
    /// </summary>
    [JsonPropertyName("derivedFrom")]
    public List<Reference>? DerivedFrom { get; set; }

    /// <summary>
    /// Component results
    /// </summary>
    [JsonPropertyName("component")]
    public List<BackboneElement>? Component { get; set; }

    /// <summary>
    /// Validates this instance according to FHIR rules
    /// </summary>
    public override IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        foreach (var result in base.Validate(validationContext))
            yield return result;

        // TODO: Add specific validation rules
    }

}
