// <auto-generated />
// FHIR R4 Resource: Schedule
// This file is automatically generated. Do not edit manually.

using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization;
using Fhir.R4.Models.Base;
using Fhir.TypeFramework.DataTypes;

namespace Fhir.R4.Models.Resources;

/// <summary>
/// A container for slots of time that may be available for booking appointments.
/// </summary>
public class Schedule : DomainResource
{
    /// <summary>
    /// Resource type name
    /// </summary>
    [JsonPropertyName("resourceType")]
    public override string ResourceType => "Schedule";

    /// <summary>
    /// External Ids for this item
    /// </summary>
    [JsonPropertyName("identifier")]
    public List<Identifier>? IdentifierValue { get; set; }

    /// <summary>
    /// Whether this schedule is in active use
    /// </summary>
    [JsonPropertyName("active")]
    public FhirBoolean Active { get; set; }

    /// <summary>
    /// High-level category
    /// </summary>
    [JsonPropertyName("serviceCategory")]
    public List<CodeableConcept>? ServiceCategory { get; set; }

    /// <summary>
    /// Specific service
    /// </summary>
    [JsonPropertyName("serviceType")]
    public List<CodeableConcept>? ServiceType { get; set; }

    /// <summary>
    /// Type of specialty needed
    /// </summary>
    [JsonPropertyName("specialty")]
    public List<CodeableConcept>? Specialty { get; set; }

    /// <summary>
    /// Resource(s) that availability information is being provided for
    /// </summary>
    [Required]
    [JsonPropertyName("actor")]
    public List<Reference> Actor { get; set; }

    /// <summary>
    /// Period of time covered by schedule
    /// </summary>
    [JsonPropertyName("planningHorizon")]
    public Period PlanningHorizon { get; set; }

    /// <summary>
    /// Comments on availability
    /// </summary>
    [JsonPropertyName("comment")]
    public FhirString Comment { get; set; }

    /// <summary>
    /// Validates this instance according to FHIR rules
    /// </summary>
    public override IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        foreach (var result in base.Validate(validationContext))
            yield return result;

        // TODO: Add specific validation rules
    }

}
