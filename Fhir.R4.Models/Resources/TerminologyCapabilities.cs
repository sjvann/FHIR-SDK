// <auto-generated />
// FHIR R4 Resource: TerminologyCapabilities
// This file is automatically generated. Do not edit manually.

using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization;
using Fhir.R4.Models.Base;
using Fhir.TypeFramework.DataTypes;

namespace Fhir.R4.Models.Resources;

/// <summary>
/// A TerminologyCapabilities resource documents a set of capabilities (behaviors) of a FHIR Terminology Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation.
/// </summary>
public class TerminologyCapabilities : DomainResource
{
    /// <summary>
    /// Resource type name
    /// </summary>
    [JsonPropertyName("resourceType")]
    public override string ResourceType => "TerminologyCapabilities";

    /// <summary>
    /// Canonical identifier for this terminology capabilities, represented as a URI (globally unique)
    /// </summary>
    [JsonPropertyName("url")]
    public FhirUri Url { get; set; }

    /// <summary>
    /// Business version of the terminology capabilities
    /// </summary>
    [JsonPropertyName("version")]
    public FhirString Version { get; set; }

    /// <summary>
    /// Name for this terminology capabilities (computer friendly)
    /// </summary>
    [JsonPropertyName("name")]
    public FhirString Name { get; set; }

    /// <summary>
    /// Name for this terminology capabilities (human friendly)
    /// </summary>
    [JsonPropertyName("title")]
    public FhirString Title { get; set; }

    /// <summary>
    /// draft | active | retired | unknown
    /// </summary>
    [Required]
    [JsonPropertyName("status")]
    public FhirCode Status { get; set; }

    /// <summary>
    /// For testing purposes, not real usage
    /// </summary>
    [JsonPropertyName("experimental")]
    public FhirBoolean Experimental { get; set; }

    /// <summary>
    /// Date last changed
    /// </summary>
    [Required]
    [JsonPropertyName("date")]
    public FhirDateTime Date { get; set; }

    /// <summary>
    /// Name of the publisher (organization or individual)
    /// </summary>
    [JsonPropertyName("publisher")]
    public FhirString Publisher { get; set; }

    /// <summary>
    /// Contact details for the publisher
    /// </summary>
    [JsonPropertyName("contact")]
    public List<ContactDetail>? Contact { get; set; }

    /// <summary>
    /// Natural language description of the terminology capabilities
    /// </summary>
    [JsonPropertyName("description")]
    public FhirMarkdown Description { get; set; }

    /// <summary>
    /// The context that the content is intended to support
    /// </summary>
    [JsonPropertyName("useContext")]
    public List<UsageContext>? UseContext { get; set; }

    /// <summary>
    /// Intended jurisdiction for terminology capabilities (if applicable)
    /// </summary>
    [JsonPropertyName("jurisdiction")]
    public List<CodeableConcept>? Jurisdiction { get; set; }

    /// <summary>
    /// Why this terminology capabilities is defined
    /// </summary>
    [JsonPropertyName("purpose")]
    public FhirMarkdown Purpose { get; set; }

    /// <summary>
    /// Use and/or publishing restrictions
    /// </summary>
    [JsonPropertyName("copyright")]
    public FhirMarkdown Copyright { get; set; }

    /// <summary>
    /// instance | capability | requirements
    /// </summary>
    [Required]
    [JsonPropertyName("kind")]
    public FhirCode Kind { get; set; }

    /// <summary>
    /// Software that is covered by this terminology capability statement
    /// </summary>
    [JsonPropertyName("software")]
    public BackboneElement Software { get; set; }

    /// <summary>
    /// A name the software is known by
    /// </summary>
    [Required]
    [JsonPropertyName("name")]
    public FhirString Name { get; set; }

    /// <summary>
    /// Version covered by this statement
    /// </summary>
    [JsonPropertyName("version")]
    public FhirString Version { get; set; }

    /// <summary>
    /// If this describes a specific instance
    /// </summary>
    [JsonPropertyName("implementation")]
    public BackboneElement Implementation { get; set; }

    /// <summary>
    /// Describes this specific instance
    /// </summary>
    [Required]
    [JsonPropertyName("description")]
    public FhirString Description { get; set; }

    /// <summary>
    /// Base URL for the implementation
    /// </summary>
    [JsonPropertyName("url")]
    public FhirUrl UrlValue { get; set; }

    /// <summary>
    /// Whether lockedDate is supported
    /// </summary>
    [JsonPropertyName("lockedDate")]
    public FhirBoolean LockedDate { get; set; }

    /// <summary>
    /// A code system supported by the server
    /// </summary>
    [JsonPropertyName("codeSystem")]
    public List<BackboneElement>? CodeSystem { get; set; }

    /// <summary>
    /// URI for the Code System
    /// </summary>
    [JsonPropertyName("uri")]
    public FhirCanonical Uri { get; set; }

    /// <summary>
    /// Version of Code System supported
    /// </summary>
    [JsonPropertyName("version")]
    public List<BackboneElement>? Version { get; set; }

    /// <summary>
    /// Whether subsumption is supported
    /// </summary>
    [JsonPropertyName("subsumption")]
    public FhirBoolean Subsumption { get; set; }

    /// <summary>
    /// Information about the [ValueSet/$expand](valueset-operation-expand.html) operation
    /// </summary>
    [JsonPropertyName("expansion")]
    public BackboneElement Expansion { get; set; }

    /// <summary>
    /// Whether the server can return nested value sets
    /// </summary>
    [JsonPropertyName("hierarchical")]
    public FhirBoolean Hierarchical { get; set; }

    /// <summary>
    /// Whether the server supports paging on expansion
    /// </summary>
    [JsonPropertyName("paging")]
    public FhirBoolean Paging { get; set; }

    /// <summary>
    /// Allow request for incomplete expansions?
    /// </summary>
    [JsonPropertyName("incomplete")]
    public FhirBoolean Incomplete { get; set; }

    /// <summary>
    /// Supported expansion parameter
    /// </summary>
    [JsonPropertyName("parameter")]
    public List<BackboneElement>? Parameter { get; set; }

    /// <summary>
    /// Documentation about text searching works
    /// </summary>
    [JsonPropertyName("textFilter")]
    public FhirMarkdown TextFilter { get; set; }

    /// <summary>
    /// explicit | all
    /// </summary>
    [JsonPropertyName("codeSearch")]
    public FhirCode CodeSearch { get; set; }

    /// <summary>
    /// Information about the [ValueSet/$validate-code](valueset-operation-validate-code.html) operation
    /// </summary>
    [JsonPropertyName("validateCode")]
    public BackboneElement ValidateCode { get; set; }

    /// <summary>
    /// Whether translations are validated
    /// </summary>
    [Required]
    [JsonPropertyName("translations")]
    public FhirBoolean Translations { get; set; }

    /// <summary>
    /// Information about the [ConceptMap/$translate](conceptmap-operation-translate.html) operation
    /// </summary>
    [JsonPropertyName("translation")]
    public BackboneElement Translation { get; set; }

    /// <summary>
    /// Whether the client must identify the map
    /// </summary>
    [Required]
    [JsonPropertyName("needsMap")]
    public FhirBoolean NeedsMap { get; set; }

    /// <summary>
    /// Information about the [ConceptMap/$closure](conceptmap-operation-closure.html) operation
    /// </summary>
    [JsonPropertyName("closure")]
    public BackboneElement Closure { get; set; }

    /// <summary>
    /// If cross-system closure is supported
    /// </summary>
    [JsonPropertyName("translation")]
    public FhirBoolean Translation { get; set; }

    /// <summary>
    /// Validates this instance according to FHIR rules
    /// </summary>
    public override IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        foreach (var result in base.Validate(validationContext))
            yield return result;

        // TODO: Add specific validation rules
    }

}
