// <auto-generated />
// FHIR R4 Resource: ServiceRequest
// This file is automatically generated. Do not edit manually.

using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization;
using Fhir.R4.Models.Base;
using Fhir.TypeFramework.DataTypes;

namespace Fhir.R4.Models.Resources;

/// <summary>
/// A record of a request for service such as diagnostic investigations, treatments, or operations to be performed.
/// </summary>
public class ServiceRequest : DomainResource
{
    /// <summary>
    /// Resource type name
    /// </summary>
    [JsonPropertyName("resourceType")]
    public override string ResourceType => "ServiceRequest";

    /// <summary>
    /// Identifiers assigned to this order
    /// </summary>
    [JsonPropertyName("identifier")]
    public List<Identifier>? IdentifierValue { get; set; }

    /// <summary>
    /// Instantiates FHIR protocol or definition
    /// </summary>
    [JsonPropertyName("instantiatesCanonical")]
    public List<FhirCanonical>? InstantiatesCanonical { get; set; }

    /// <summary>
    /// Instantiates external protocol or definition
    /// </summary>
    [JsonPropertyName("instantiatesUri")]
    public List<FhirUri>? InstantiatesUri { get; set; }

    /// <summary>
    /// What request fulfills
    /// </summary>
    [JsonPropertyName("basedOn")]
    public List<Reference>? BasedOn { get; set; }

    /// <summary>
    /// What request replaces
    /// </summary>
    [JsonPropertyName("replaces")]
    public List<Reference>? Replaces { get; set; }

    /// <summary>
    /// Composite Request ID
    /// </summary>
    [JsonPropertyName("requisition")]
    public Identifier Requisition { get; set; }

    /// <summary>
    /// draft | active | on-hold | revoked | completed | entered-in-error | unknown
    /// </summary>
    [Required]
    [JsonPropertyName("status")]
    public FhirCode Status { get; set; }

    /// <summary>
    /// proposal | plan | directive | order | original-order | reflex-order | filler-order | instance-order | option
    /// </summary>
    [Required]
    [JsonPropertyName("intent")]
    public FhirCode Intent { get; set; }

    /// <summary>
    /// Classification of service
    /// </summary>
    [JsonPropertyName("category")]
    public List<CodeableConcept>? Category { get; set; }

    /// <summary>
    /// routine | urgent | asap | stat
    /// </summary>
    [JsonPropertyName("priority")]
    public FhirCode Priority { get; set; }

    /// <summary>
    /// True if service/procedure should not be performed
    /// </summary>
    [JsonPropertyName("doNotPerform")]
    public FhirBoolean DoNotPerform { get; set; }

    /// <summary>
    /// What is being requested/ordered
    /// </summary>
    [JsonPropertyName("code")]
    public CodeableConcept Code { get; set; }

    /// <summary>
    /// Additional order information
    /// </summary>
    [JsonPropertyName("orderDetail")]
    public List<CodeableConcept>? OrderDetail { get; set; }

    /// <summary>
    /// Individual or Entity the service is ordered for
    /// </summary>
    [Required]
    [JsonPropertyName("subject")]
    public Reference Subject { get; set; }

    /// <summary>
    /// Encounter in which the request was created
    /// </summary>
    [JsonPropertyName("encounter")]
    public Reference Encounter { get; set; }

    /// <summary>
    /// Date request signed
    /// </summary>
    [JsonPropertyName("authoredOn")]
    public FhirDateTime AuthoredOn { get; set; }

    /// <summary>
    /// Who/what is requesting service
    /// </summary>
    [JsonPropertyName("requester")]
    public Reference Requester { get; set; }

    /// <summary>
    /// Performer role
    /// </summary>
    [JsonPropertyName("performerType")]
    public CodeableConcept PerformerType { get; set; }

    /// <summary>
    /// Requested performer
    /// </summary>
    [JsonPropertyName("performer")]
    public List<Reference>? Performer { get; set; }

    /// <summary>
    /// Requested location
    /// </summary>
    [JsonPropertyName("locationCode")]
    public List<CodeableConcept>? LocationCode { get; set; }

    /// <summary>
    /// Requested location
    /// </summary>
    [JsonPropertyName("locationReference")]
    public List<Reference>? LocationReference { get; set; }

    /// <summary>
    /// Explanation/Justification for procedure or service
    /// </summary>
    [JsonPropertyName("reasonCode")]
    public List<CodeableConcept>? ReasonCode { get; set; }

    /// <summary>
    /// Explanation/Justification for service or service
    /// </summary>
    [JsonPropertyName("reasonReference")]
    public List<Reference>? ReasonReference { get; set; }

    /// <summary>
    /// Associated insurance coverage
    /// </summary>
    [JsonPropertyName("insurance")]
    public List<Reference>? Insurance { get; set; }

    /// <summary>
    /// Additional clinical information
    /// </summary>
    [JsonPropertyName("supportingInfo")]
    public List<Reference>? SupportingInfo { get; set; }

    /// <summary>
    /// Procedure Samples
    /// </summary>
    [JsonPropertyName("specimen")]
    public List<Reference>? Specimen { get; set; }

    /// <summary>
    /// Location on Body
    /// </summary>
    [JsonPropertyName("bodySite")]
    public List<CodeableConcept>? BodySite { get; set; }

    /// <summary>
    /// Comments
    /// </summary>
    [JsonPropertyName("note")]
    public List<Annotation>? Note { get; set; }

    /// <summary>
    /// Patient or consumer-oriented instructions
    /// </summary>
    [JsonPropertyName("patientInstruction")]
    public FhirString PatientInstruction { get; set; }

    /// <summary>
    /// Request provenance
    /// </summary>
    [JsonPropertyName("relevantHistory")]
    public List<Reference>? RelevantHistory { get; set; }

    /// <summary>
    /// Validates this instance according to FHIR rules
    /// </summary>
    public override IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        foreach (var result in base.Validate(validationContext))
            yield return result;

        // TODO: Add specific validation rules
    }

}
