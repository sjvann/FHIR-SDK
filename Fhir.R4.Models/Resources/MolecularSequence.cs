// <auto-generated />
// FHIR R4 Resource: MolecularSequence
// This file is automatically generated. Do not edit manually.

using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization;
using Fhir.R4.Models.Base;
using Fhir.TypeFramework.DataTypes;

namespace Fhir.R4.Models.Resources;

/// <summary>
/// Raw data describing a biological sequence.
/// </summary>
public class MolecularSequence : DomainResource
{
    /// <summary>
    /// Resource type name
    /// </summary>
    [JsonPropertyName("resourceType")]
    public override string ResourceType => "MolecularSequence";

    /// <summary>
    /// Unique ID for this particular sequence. This is a FHIR-defined id
    /// </summary>
    [JsonPropertyName("identifier")]
    public List<Identifier>? IdentifierValue { get; set; }

    /// <summary>
    /// aa | dna | rna
    /// </summary>
    [JsonPropertyName("type")]
    public FhirCode Type { get; set; }

    /// <summary>
    /// Base number of coordinate system (0 for 0-based numbering or coordinates, inclusive start, exclusive end, 1 for 1-based numbering, inclusive start, inclusive end)
    /// </summary>
    [Required]
    [JsonPropertyName("coordinateSystem")]
    public FhirInteger CoordinateSystem { get; set; }

    /// <summary>
    /// Who and/or what this is about
    /// </summary>
    [JsonPropertyName("patient")]
    public Reference Patient { get; set; }

    /// <summary>
    /// Specimen used for sequencing
    /// </summary>
    [JsonPropertyName("specimen")]
    public Reference Specimen { get; set; }

    /// <summary>
    /// The method for sequencing
    /// </summary>
    [JsonPropertyName("device")]
    public Reference Device { get; set; }

    /// <summary>
    /// Who should be responsible for test result
    /// </summary>
    [JsonPropertyName("performer")]
    public Reference Performer { get; set; }

    /// <summary>
    /// The number of copies of the sequence of interest.  (RNASeq)
    /// </summary>
    [JsonPropertyName("quantity")]
    public Quantity QuantityValue { get; set; }

    /// <summary>
    /// A sequence used as reference
    /// </summary>
    [JsonPropertyName("referenceSeq")]
    public BackboneElement ReferenceSeq { get; set; }

    /// <summary>
    /// Chromosome containing genetic finding
    /// </summary>
    [JsonPropertyName("chromosome")]
    public CodeableConcept Chromosome { get; set; }

    /// <summary>
    /// The Genome Build used for reference, following GRCh build versions e.g. &apos;GRCh 37&apos;
    /// </summary>
    [JsonPropertyName("genomeBuild")]
    public FhirString GenomeBuild { get; set; }

    /// <summary>
    /// sense | antisense
    /// </summary>
    [JsonPropertyName("orientation")]
    public FhirCode Orientation { get; set; }

    /// <summary>
    /// Reference identifier
    /// </summary>
    [JsonPropertyName("referenceSeqId")]
    public CodeableConcept ReferenceSeqId { get; set; }

    /// <summary>
    /// A pointer to another MolecularSequence entity as reference sequence
    /// </summary>
    [JsonPropertyName("referenceSeqPointer")]
    public Reference ReferenceSeqPointer { get; set; }

    /// <summary>
    /// A string to represent reference sequence
    /// </summary>
    [JsonPropertyName("referenceSeqString")]
    public FhirString ReferenceSeqString { get; set; }

    /// <summary>
    /// watson | crick
    /// </summary>
    [JsonPropertyName("strand")]
    public FhirCode Strand { get; set; }

    /// <summary>
    /// Start position of the window on the  reference sequence
    /// </summary>
    [JsonPropertyName("windowStart")]
    public FhirInteger WindowStart { get; set; }

    /// <summary>
    /// End position of the window on the reference sequence
    /// </summary>
    [JsonPropertyName("windowEnd")]
    public FhirInteger WindowEnd { get; set; }

    /// <summary>
    /// Variant in sequence
    /// </summary>
    [JsonPropertyName("variant")]
    public List<BackboneElement>? Variant { get; set; }

    /// <summary>
    /// Start position of the variant on the  reference sequence
    /// </summary>
    [JsonPropertyName("start")]
    public FhirInteger Start { get; set; }

    /// <summary>
    /// End position of the variant on the reference sequence
    /// </summary>
    [JsonPropertyName("end")]
    public FhirInteger End { get; set; }

    /// <summary>
    /// Allele that was observed
    /// </summary>
    [JsonPropertyName("observedAllele")]
    public FhirString ObservedAllele { get; set; }

    /// <summary>
    /// Allele in the reference sequence
    /// </summary>
    [JsonPropertyName("referenceAllele")]
    public FhirString ReferenceAllele { get; set; }

    /// <summary>
    /// Extended CIGAR string for aligning the sequence with reference bases
    /// </summary>
    [JsonPropertyName("cigar")]
    public FhirString Cigar { get; set; }

    /// <summary>
    /// Pointer to observed variant information
    /// </summary>
    [JsonPropertyName("variantPointer")]
    public Reference VariantPointer { get; set; }

    /// <summary>
    /// Sequence that was observed
    /// </summary>
    [JsonPropertyName("observedSeq")]
    public FhirString ObservedSeq { get; set; }

    /// <summary>
    /// An set of value as quality of sequence
    /// </summary>
    [JsonPropertyName("quality")]
    public List<BackboneElement>? Quality { get; set; }

    /// <summary>
    /// indel | snp | unknown
    /// </summary>
    [Required]
    [JsonPropertyName("type")]
    public FhirCode Type { get; set; }

    /// <summary>
    /// Standard sequence for comparison
    /// </summary>
    [JsonPropertyName("standardSequence")]
    public CodeableConcept StandardSequence { get; set; }

    /// <summary>
    /// Start position of the sequence
    /// </summary>
    [JsonPropertyName("start")]
    public FhirInteger Start { get; set; }

    /// <summary>
    /// End position of the sequence
    /// </summary>
    [JsonPropertyName("end")]
    public FhirInteger End { get; set; }

    /// <summary>
    /// Quality score for the comparison
    /// </summary>
    [JsonPropertyName("score")]
    public Quantity Score { get; set; }

    /// <summary>
    /// Method to get quality
    /// </summary>
    [JsonPropertyName("method")]
    public CodeableConcept Method { get; set; }

    /// <summary>
    /// True positives from the perspective of the truth data
    /// </summary>
    [JsonPropertyName("truthTP")]
    public FhirDecimal TruthTP { get; set; }

    /// <summary>
    /// True positives from the perspective of the query data
    /// </summary>
    [JsonPropertyName("queryTP")]
    public FhirDecimal QueryTP { get; set; }

    /// <summary>
    /// False negatives
    /// </summary>
    [JsonPropertyName("truthFN")]
    public FhirDecimal TruthFN { get; set; }

    /// <summary>
    /// False positives
    /// </summary>
    [JsonPropertyName("queryFP")]
    public FhirDecimal QueryFP { get; set; }

    /// <summary>
    /// False positives where the non-REF alleles in the Truth and Query Call Sets match
    /// </summary>
    [JsonPropertyName("gtFP")]
    public FhirDecimal GtFP { get; set; }

    /// <summary>
    /// Precision of comparison
    /// </summary>
    [JsonPropertyName("precision")]
    public FhirDecimal Precision { get; set; }

    /// <summary>
    /// Recall of comparison
    /// </summary>
    [JsonPropertyName("recall")]
    public FhirDecimal Recall { get; set; }

    /// <summary>
    /// F-score
    /// </summary>
    [JsonPropertyName("fScore")]
    public FhirDecimal FScore { get; set; }

    /// <summary>
    /// Receiver Operator Characteristic (ROC) Curve
    /// </summary>
    [JsonPropertyName("roc")]
    public BackboneElement Roc { get; set; }

    /// <summary>
    /// Average number of reads representing a given nucleotide in the reconstructed sequence
    /// </summary>
    [JsonPropertyName("readCoverage")]
    public FhirInteger ReadCoverage { get; set; }

    /// <summary>
    /// External repository which contains detailed report related with observedSeq in this resource
    /// </summary>
    [JsonPropertyName("repository")]
    public List<BackboneElement>? Repository { get; set; }

    /// <summary>
    /// directlink | openapi | login | oauth | other
    /// </summary>
    [Required]
    [JsonPropertyName("type")]
    public FhirCode Type { get; set; }

    /// <summary>
    /// URI of the repository
    /// </summary>
    [JsonPropertyName("url")]
    public FhirUri Url { get; set; }

    /// <summary>
    /// Repository&apos;s name
    /// </summary>
    [JsonPropertyName("name")]
    public FhirString Name { get; set; }

    /// <summary>
    /// Id of the dataset that used to call for dataset in repository
    /// </summary>
    [JsonPropertyName("datasetId")]
    public FhirString DatasetId { get; set; }

    /// <summary>
    /// Id of the variantset that used to call for variantset in repository
    /// </summary>
    [JsonPropertyName("variantsetId")]
    public FhirString VariantsetId { get; set; }

    /// <summary>
    /// Id of the read
    /// </summary>
    [JsonPropertyName("readsetId")]
    public FhirString ReadsetId { get; set; }

    /// <summary>
    /// Pointer to next atomic sequence
    /// </summary>
    [JsonPropertyName("pointer")]
    public List<Reference>? Pointer { get; set; }

    /// <summary>
    /// Structural variant
    /// </summary>
    [JsonPropertyName("structureVariant")]
    public List<BackboneElement>? StructureVariant { get; set; }

    /// <summary>
    /// Structural variant change type
    /// </summary>
    [JsonPropertyName("variantType")]
    public CodeableConcept VariantType { get; set; }

    /// <summary>
    /// Does the structural variant have base pair resolution breakpoints?
    /// </summary>
    [JsonPropertyName("exact")]
    public FhirBoolean Exact { get; set; }

    /// <summary>
    /// Structural variant length
    /// </summary>
    [JsonPropertyName("length")]
    public FhirInteger Length { get; set; }

    /// <summary>
    /// Structural variant outer
    /// </summary>
    [JsonPropertyName("outer")]
    public BackboneElement Outer { get; set; }

    /// <summary>
    /// Structural variant inner
    /// </summary>
    [JsonPropertyName("inner")]
    public BackboneElement Inner { get; set; }

    /// <summary>
    /// Validates this instance according to FHIR rules
    /// </summary>
    public override IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        foreach (var result in base.Validate(validationContext))
            yield return result;

        // TODO: Add specific validation rules
    }

}
