// <auto-generated />
// FHIR R4 Resource: CodeSystem
// This file is automatically generated. Do not edit manually.

using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization;
using Fhir.R4.Models.Base;
using Fhir.TypeFramework.DataTypes;

namespace Fhir.R4.Models.Resources;

/// <summary>
/// The CodeSystem resource is used to declare the existence of and describe a code system or code system supplement and its key properties, and optionally define a part or all of its content.
/// </summary>
public class CodeSystem : DomainResource
{
    /// <summary>
    /// Resource type name
    /// </summary>
    [JsonPropertyName("resourceType")]
    public override string ResourceType => "CodeSystem";

    /// <summary>
    /// Canonical identifier for this code system, represented as a URI (globally unique) (Coding.system)
    /// </summary>
    [JsonPropertyName("url")]
    public FhirUri Url { get; set; }

    /// <summary>
    /// Additional identifier for the code system (business identifier)
    /// </summary>
    [JsonPropertyName("identifier")]
    public List<Identifier>? IdentifierValue { get; set; }

    /// <summary>
    /// Business version of the code system (Coding.version)
    /// </summary>
    [JsonPropertyName("version")]
    public FhirString Version { get; set; }

    /// <summary>
    /// Name for this code system (computer friendly)
    /// </summary>
    [JsonPropertyName("name")]
    public FhirString Name { get; set; }

    /// <summary>
    /// Name for this code system (human friendly)
    /// </summary>
    [JsonPropertyName("title")]
    public FhirString Title { get; set; }

    /// <summary>
    /// draft | active | retired | unknown
    /// </summary>
    [Required]
    [JsonPropertyName("status")]
    public FhirCode Status { get; set; }

    /// <summary>
    /// For testing purposes, not real usage
    /// </summary>
    [JsonPropertyName("experimental")]
    public FhirBoolean Experimental { get; set; }

    /// <summary>
    /// Date last changed
    /// </summary>
    [JsonPropertyName("date")]
    public FhirDateTime Date { get; set; }

    /// <summary>
    /// Name of the publisher (organization or individual)
    /// </summary>
    [JsonPropertyName("publisher")]
    public FhirString Publisher { get; set; }

    /// <summary>
    /// Contact details for the publisher
    /// </summary>
    [JsonPropertyName("contact")]
    public List<ContactDetail>? Contact { get; set; }

    /// <summary>
    /// Natural language description of the code system
    /// </summary>
    [JsonPropertyName("description")]
    public FhirMarkdown Description { get; set; }

    /// <summary>
    /// The context that the content is intended to support
    /// </summary>
    [JsonPropertyName("useContext")]
    public List<UsageContext>? UseContext { get; set; }

    /// <summary>
    /// Intended jurisdiction for code system (if applicable)
    /// </summary>
    [JsonPropertyName("jurisdiction")]
    public List<CodeableConcept>? Jurisdiction { get; set; }

    /// <summary>
    /// Why this code system is defined
    /// </summary>
    [JsonPropertyName("purpose")]
    public FhirMarkdown Purpose { get; set; }

    /// <summary>
    /// Use and/or publishing restrictions
    /// </summary>
    [JsonPropertyName("copyright")]
    public FhirMarkdown Copyright { get; set; }

    /// <summary>
    /// If code comparison is case sensitive
    /// </summary>
    [JsonPropertyName("caseSensitive")]
    public FhirBoolean CaseSensitive { get; set; }

    /// <summary>
    /// Canonical reference to the value set with entire code system
    /// </summary>
    [JsonPropertyName("valueSet")]
    public FhirCanonical ValueSet { get; set; }

    /// <summary>
    /// grouped-by | is-a | part-of | classified-with
    /// </summary>
    [JsonPropertyName("hierarchyMeaning")]
    public FhirCode HierarchyMeaning { get; set; }

    /// <summary>
    /// If code system defines a compositional grammar
    /// </summary>
    [JsonPropertyName("compositional")]
    public FhirBoolean Compositional { get; set; }

    /// <summary>
    /// If definitions are not stable
    /// </summary>
    [JsonPropertyName("versionNeeded")]
    public FhirBoolean VersionNeeded { get; set; }

    /// <summary>
    /// not-present | example | fragment | complete | supplement
    /// </summary>
    [Required]
    [JsonPropertyName("content")]
    public FhirCode Content { get; set; }

    /// <summary>
    /// Canonical URL of Code System this adds designations and properties to
    /// </summary>
    [JsonPropertyName("supplements")]
    public FhirCanonical Supplements { get; set; }

    /// <summary>
    /// Total concepts in the code system
    /// </summary>
    [JsonPropertyName("count")]
    public FhirUnsignedInt Count { get; set; }

    /// <summary>
    /// Filter that can be used in a value set
    /// </summary>
    [JsonPropertyName("filter")]
    public List<BackboneElement>? Filter { get; set; }

    /// <summary>
    /// Code that identifies the filter
    /// </summary>
    [Required]
    [JsonPropertyName("code")]
    public FhirCode CodeValue { get; set; }

    /// <summary>
    /// How or why the filter is used
    /// </summary>
    [JsonPropertyName("description")]
    public FhirString Description { get; set; }

    /// <summary>
    /// = | is-a | descendent-of | is-not-a | regex | in | not-in | generalizes | exists
    /// </summary>
    [Required]
    [JsonPropertyName("operator")]
    public List<FhirCode> Operator { get; set; }

    /// <summary>
    /// What to use for the value
    /// </summary>
    [Required]
    [JsonPropertyName("value")]
    public FhirString Value { get; set; }

    /// <summary>
    /// Additional information supplied about each concept
    /// </summary>
    [JsonPropertyName("property")]
    public List<BackboneElement>? Property { get; set; }

    /// <summary>
    /// Identifies the property on the concepts, and when referred to in operations
    /// </summary>
    [Required]
    [JsonPropertyName("code")]
    public FhirCode CodeValue { get; set; }

    /// <summary>
    /// Formal identifier for the property
    /// </summary>
    [JsonPropertyName("uri")]
    public FhirUri UriValue { get; set; }

    /// <summary>
    /// Why the property is defined, and/or what it conveys
    /// </summary>
    [JsonPropertyName("description")]
    public FhirString Description { get; set; }

    /// <summary>
    /// code | Coding | string | integer | boolean | dateTime | decimal
    /// </summary>
    [Required]
    [JsonPropertyName("type")]
    public FhirCode Type { get; set; }

    /// <summary>
    /// Concepts in the code system
    /// </summary>
    [JsonPropertyName("concept")]
    public List<BackboneElement>? Concept { get; set; }

    /// <summary>
    /// Code that identifies concept
    /// </summary>
    [Required]
    [JsonPropertyName("code")]
    public FhirCode CodeValue { get; set; }

    /// <summary>
    /// Text to display to the user
    /// </summary>
    [JsonPropertyName("display")]
    public FhirString Display { get; set; }

    /// <summary>
    /// Formal definition
    /// </summary>
    [JsonPropertyName("definition")]
    public FhirString Definition { get; set; }

    /// <summary>
    /// Additional representations for the concept
    /// </summary>
    [JsonPropertyName("designation")]
    public List<BackboneElement>? Designation { get; set; }

    /// <summary>
    /// Property value for the concept
    /// </summary>
    [JsonPropertyName("property")]
    public List<BackboneElement>? Property { get; set; }

    /// <summary>
    /// Child Concepts (is-a/contains/categorizes)
    /// </summary>
    [JsonPropertyName("concept")]
    public List<>? Concept { get; set; }

    /// <summary>
    /// Validates this instance according to FHIR rules
    /// </summary>
    public override IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        foreach (var result in base.Validate(validationContext))
            yield return result;

        // TODO: Add specific validation rules
    }

}
