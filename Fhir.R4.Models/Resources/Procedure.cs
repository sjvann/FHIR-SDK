// <auto-generated />
// FHIR R4 Resource: Procedure
// This file is automatically generated. Do not edit manually.

using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization;
using Fhir.R4.Models.Base;
using Fhir.TypeFramework.DataTypes;

namespace Fhir.R4.Models.Resources;

/// <summary>
/// An action that is or was performed on or for a patient. This can be a physical intervention like an operation, or less invasive like long term services, counseling, or hypnotherapy.
/// </summary>
public class Procedure : DomainResource
{
    /// <summary>
    /// Resource type name
    /// </summary>
    [JsonPropertyName("resourceType")]
    public override string ResourceType => "Procedure";

    /// <summary>
    /// External Identifiers for this procedure
    /// </summary>
    [JsonPropertyName("identifier")]
    public List<Identifier>? IdentifierValue { get; set; }

    /// <summary>
    /// Instantiates FHIR protocol or definition
    /// </summary>
    [JsonPropertyName("instantiatesCanonical")]
    public List<FhirCanonical>? InstantiatesCanonical { get; set; }

    /// <summary>
    /// Instantiates external protocol or definition
    /// </summary>
    [JsonPropertyName("instantiatesUri")]
    public List<FhirUri>? InstantiatesUri { get; set; }

    /// <summary>
    /// A request for this procedure
    /// </summary>
    [JsonPropertyName("basedOn")]
    public List<Reference>? BasedOn { get; set; }

    /// <summary>
    /// Part of referenced event
    /// </summary>
    [JsonPropertyName("partOf")]
    public List<Reference>? PartOf { get; set; }

    /// <summary>
    /// preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown
    /// </summary>
    [Required]
    [JsonPropertyName("status")]
    public FhirCode Status { get; set; }

    /// <summary>
    /// Reason for current status
    /// </summary>
    [JsonPropertyName("statusReason")]
    public CodeableConcept StatusReason { get; set; }

    /// <summary>
    /// Classification of the procedure
    /// </summary>
    [JsonPropertyName("category")]
    public CodeableConcept Category { get; set; }

    /// <summary>
    /// Identification of the procedure
    /// </summary>
    [JsonPropertyName("code")]
    public CodeableConcept Code { get; set; }

    /// <summary>
    /// Who the procedure was performed on
    /// </summary>
    [Required]
    [JsonPropertyName("subject")]
    public Reference Subject { get; set; }

    /// <summary>
    /// Encounter created as part of
    /// </summary>
    [JsonPropertyName("encounter")]
    public Reference Encounter { get; set; }

    /// <summary>
    /// Who recorded the procedure
    /// </summary>
    [JsonPropertyName("recorder")]
    public Reference Recorder { get; set; }

    /// <summary>
    /// Person who asserts this procedure
    /// </summary>
    [JsonPropertyName("asserter")]
    public Reference Asserter { get; set; }

    /// <summary>
    /// The people who performed the procedure
    /// </summary>
    [JsonPropertyName("performer")]
    public List<BackboneElement>? Performer { get; set; }

    /// <summary>
    /// Where the procedure happened
    /// </summary>
    [JsonPropertyName("location")]
    public Reference Location { get; set; }

    /// <summary>
    /// Coded reason procedure performed
    /// </summary>
    [JsonPropertyName("reasonCode")]
    public List<CodeableConcept>? ReasonCode { get; set; }

    /// <summary>
    /// The justification that the procedure was performed
    /// </summary>
    [JsonPropertyName("reasonReference")]
    public List<Reference>? ReasonReference { get; set; }

    /// <summary>
    /// Target body sites
    /// </summary>
    [JsonPropertyName("bodySite")]
    public List<CodeableConcept>? BodySite { get; set; }

    /// <summary>
    /// The result of procedure
    /// </summary>
    [JsonPropertyName("outcome")]
    public CodeableConcept Outcome { get; set; }

    /// <summary>
    /// Any report resulting from the procedure
    /// </summary>
    [JsonPropertyName("report")]
    public List<Reference>? Report { get; set; }

    /// <summary>
    /// Complication following the procedure
    /// </summary>
    [JsonPropertyName("complication")]
    public List<CodeableConcept>? Complication { get; set; }

    /// <summary>
    /// A condition that is a result of the procedure
    /// </summary>
    [JsonPropertyName("complicationDetail")]
    public List<Reference>? ComplicationDetail { get; set; }

    /// <summary>
    /// Instructions for follow up
    /// </summary>
    [JsonPropertyName("followUp")]
    public List<CodeableConcept>? FollowUp { get; set; }

    /// <summary>
    /// Additional information about the procedure
    /// </summary>
    [JsonPropertyName("note")]
    public List<Annotation>? Note { get; set; }

    /// <summary>
    /// Manipulated, implanted, or removed device
    /// </summary>
    [JsonPropertyName("focalDevice")]
    public List<BackboneElement>? FocalDevice { get; set; }

    /// <summary>
    /// Kind of change to device
    /// </summary>
    [JsonPropertyName("action")]
    public CodeableConcept Action { get; set; }

    /// <summary>
    /// Device that was changed
    /// </summary>
    [Required]
    [JsonPropertyName("manipulated")]
    public Reference Manipulated { get; set; }

    /// <summary>
    /// Items used during procedure
    /// </summary>
    [JsonPropertyName("usedReference")]
    public List<Reference>? UsedReference { get; set; }

    /// <summary>
    /// Coded items used during the procedure
    /// </summary>
    [JsonPropertyName("usedCode")]
    public List<CodeableConcept>? UsedCode { get; set; }

    /// <summary>
    /// Validates this instance according to FHIR rules
    /// </summary>
    public override IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        foreach (var result in base.Validate(validationContext))
            yield return result;

        // TODO: Add specific validation rules
    }

}
