// <auto-generated />
// FHIR R4 Resource: Location
// This file is automatically generated. Do not edit manually.

using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization;
using Fhir.Abstractions;
using Fhir.Support.Base;

namespace Fhir.R4.Models.Resources;

/// <summary>
/// Details and position information for a physical place where services are provided and resources and participants may be stored, found, contained, or accommodated.
/// </summary>
public class Location : IDomainResource
{
    /// <summary>
    /// Resource type name
    /// </summary>
    [JsonPropertyName("resourceType")]
    public string ResourceType => "Location";

    /// <summary>
    /// Logical id of this artifact
    /// </summary>
    [JsonPropertyName("id")]
    public string? Id { get; set; }

    /// <summary>
    /// A human-readable narrative
    /// </summary>
    [JsonPropertyName("text")]
    public object? Text { get; set; }

    /// <summary>
    /// Additional content defined by implementations
    /// </summary>
    [JsonPropertyName("extension")]
    public IList<object>? Extension { get; set; }

    /// <summary>
    /// Extensions that cannot be ignored
    /// </summary>
    [JsonPropertyName("modifierExtension")]
    public IList<object>? ModifierExtension { get; set; }

    /// <summary>
    /// Unique code or number identifying the location to its users
    /// </summary>
    [JsonPropertyName("identifier")]
    public List<Identifier> IdentifierValue { get; set; }

    /// <summary>
    /// active | suspended | inactive
    /// </summary>
    [JsonPropertyName("status")]
    public FhirCode Status { get; set; }

    /// <summary>
    /// The operational status of the location (typically only for a bed/room)
    /// </summary>
    [JsonPropertyName("operationalStatus")]
    public Coding OperationalStatus { get; set; }

    /// <summary>
    /// Name of the location as used by humans
    /// </summary>
    [JsonPropertyName("name")]
    public FhirString Name { get; set; }

    /// <summary>
    /// A list of alternate names that the location is known as, or was known as, in the past
    /// </summary>
    [JsonPropertyName("alias")]
    public List<FhirString> Alias { get; set; }

    /// <summary>
    /// Additional details about the location that could be displayed as further information to identify the location beyond its name
    /// </summary>
    [JsonPropertyName("description")]
    public FhirString Description { get; set; }

    /// <summary>
    /// instance | kind
    /// </summary>
    [JsonPropertyName("mode")]
    public FhirCode Mode { get; set; }

    /// <summary>
    /// Type of function performed
    /// </summary>
    [JsonPropertyName("type")]
    public List<CodeableConcept> Type { get; set; }

    /// <summary>
    /// Contact details of the location
    /// </summary>
    [JsonPropertyName("telecom")]
    public List<ContactPoint> Telecom { get; set; }

    /// <summary>
    /// Physical location
    /// </summary>
    [JsonPropertyName("address")]
    public Address AddressValue { get; set; }

    /// <summary>
    /// Physical form of the location
    /// </summary>
    [JsonPropertyName("physicalType")]
    public CodeableConcept PhysicalType { get; set; }

    /// <summary>
    /// The absolute geographic location
    /// </summary>
    [JsonPropertyName("position")]
    public BackboneElement Position { get; set; }

    /// <summary>
    /// Longitude with WGS84 datum
    /// </summary>
    [Required]
    [JsonPropertyName("longitude")]
    public FhirDecimal Longitude { get; set; }

    /// <summary>
    /// Latitude with WGS84 datum
    /// </summary>
    [Required]
    [JsonPropertyName("latitude")]
    public FhirDecimal Latitude { get; set; }

    /// <summary>
    /// Altitude with WGS84 datum
    /// </summary>
    [JsonPropertyName("altitude")]
    public FhirDecimal Altitude { get; set; }

    /// <summary>
    /// Organization responsible for provisioning and upkeep
    /// </summary>
    [JsonPropertyName("managingOrganization")]
    public Reference ManagingOrganization { get; set; }

    /// <summary>
    /// Another Location this one is physically a part of
    /// </summary>
    [JsonPropertyName("partOf")]
    public Reference PartOf { get; set; }

    /// <summary>
    /// What days/times during a week is this location usually open
    /// </summary>
    [JsonPropertyName("hoursOfOperation")]
    public List<BackboneElement> HoursOfOperation { get; set; }

    /// <summary>
    /// mon | tue | wed | thu | fri | sat | sun
    /// </summary>
    [JsonPropertyName("daysOfWeek")]
    public List<FhirCode> DaysOfWeek { get; set; }

    /// <summary>
    /// The Location is open all day
    /// </summary>
    [JsonPropertyName("allDay")]
    public FhirBoolean AllDay { get; set; }

    /// <summary>
    /// Time that the Location opens
    /// </summary>
    [JsonPropertyName("openingTime")]
    public FhirTime OpeningTime { get; set; }

    /// <summary>
    /// Time that the Location closes
    /// </summary>
    [JsonPropertyName("closingTime")]
    public FhirTime ClosingTime { get; set; }

    /// <summary>
    /// Description of availability exceptions
    /// </summary>
    [JsonPropertyName("availabilityExceptions")]
    public FhirString AvailabilityExceptions { get; set; }

    /// <summary>
    /// Technical endpoints providing access to services operated for the location
    /// </summary>
    [JsonPropertyName("endpoint")]
    public List<Reference> Endpoint { get; set; }

    /// <summary>
    /// Validates this instance according to FHIR rules
    /// </summary>
    public override IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        foreach (var result in base.Validate(validationContext))
            yield return result;

        // TODO: Add specific validation rules
    }

}
