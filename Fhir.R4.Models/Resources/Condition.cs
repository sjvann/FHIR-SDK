// <auto-generated />
// FHIR R4 Resource: Condition
// This file is automatically generated. Do not edit manually.

using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization;
using Fhir.R4.Models.Base;
using Fhir.TypeFramework.DataTypes;

namespace Fhir.R4.Models.Resources;

/// <summary>
/// A clinical condition, problem, diagnosis, or other event, situation, issue, or clinical concept that has risen to a level of concern.
/// </summary>
public class Condition : DomainResource
{
    /// <summary>
    /// Resource type name
    /// </summary>
    [JsonPropertyName("resourceType")]
    public override string ResourceType => "Condition";

    /// <summary>
    /// External Ids for this condition
    /// </summary>
    [JsonPropertyName("identifier")]
    public List<Identifier>? IdentifierValue { get; set; }

    /// <summary>
    /// active | recurrence | relapse | inactive | remission | resolved
    /// </summary>
    [JsonPropertyName("clinicalStatus")]
    public CodeableConcept ClinicalStatus { get; set; }

    /// <summary>
    /// unconfirmed | provisional | differential | confirmed | refuted | entered-in-error
    /// </summary>
    [JsonPropertyName("verificationStatus")]
    public CodeableConcept VerificationStatus { get; set; }

    /// <summary>
    /// problem-list-item | encounter-diagnosis
    /// </summary>
    [JsonPropertyName("category")]
    public List<CodeableConcept>? Category { get; set; }

    /// <summary>
    /// Subjective severity of condition
    /// </summary>
    [JsonPropertyName("severity")]
    public CodeableConcept Severity { get; set; }

    /// <summary>
    /// Identification of the condition, problem or diagnosis
    /// </summary>
    [JsonPropertyName("code")]
    public CodeableConcept Code { get; set; }

    /// <summary>
    /// Anatomical location, if relevant
    /// </summary>
    [JsonPropertyName("bodySite")]
    public List<CodeableConcept>? BodySite { get; set; }

    /// <summary>
    /// Who has the condition?
    /// </summary>
    [Required]
    [JsonPropertyName("subject")]
    public Reference Subject { get; set; }

    /// <summary>
    /// Encounter created as part of
    /// </summary>
    [JsonPropertyName("encounter")]
    public Reference Encounter { get; set; }

    /// <summary>
    /// Date record was first recorded
    /// </summary>
    [JsonPropertyName("recordedDate")]
    public FhirDateTime RecordedDate { get; set; }

    /// <summary>
    /// Who recorded the condition
    /// </summary>
    [JsonPropertyName("recorder")]
    public Reference Recorder { get; set; }

    /// <summary>
    /// Person who asserts this condition
    /// </summary>
    [JsonPropertyName("asserter")]
    public Reference Asserter { get; set; }

    /// <summary>
    /// Stage/grade, usually assessed formally
    /// </summary>
    [JsonPropertyName("stage")]
    public List<BackboneElement>? Stage { get; set; }

    /// <summary>
    /// Simple summary (disease specific)
    /// </summary>
    [JsonPropertyName("summary")]
    public CodeableConcept Summary { get; set; }

    /// <summary>
    /// Formal record of assessment
    /// </summary>
    [JsonPropertyName("assessment")]
    public List<Reference>? Assessment { get; set; }

    /// <summary>
    /// Kind of staging
    /// </summary>
    [JsonPropertyName("type")]
    public CodeableConcept Type { get; set; }

    /// <summary>
    /// Supporting evidence
    /// </summary>
    [JsonPropertyName("evidence")]
    public List<BackboneElement>? Evidence { get; set; }

    /// <summary>
    /// Manifestation/symptom
    /// </summary>
    [JsonPropertyName("code")]
    public List<CodeableConcept>? Code { get; set; }

    /// <summary>
    /// Supporting information found elsewhere
    /// </summary>
    [JsonPropertyName("detail")]
    public List<Reference>? Detail { get; set; }

    /// <summary>
    /// Additional information about the Condition
    /// </summary>
    [JsonPropertyName("note")]
    public List<Annotation>? Note { get; set; }

    /// <summary>
    /// Validates this instance according to FHIR rules
    /// </summary>
    public override IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        foreach (var result in base.Validate(validationContext))
            yield return result;

        // TODO: Add specific validation rules
    }

}
